DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `AccountGroup_Typeahead`( In Group_Name_ varchar(100))
Begin 
 set Group_Name_ = Concat( '%',Group_Name_ ,'%');
 SELECT  Account_Group_Id,
Group_Name From Account_Group 
where Group_Name like Group_Name_ and DeleteStatus=false 
 ORDER BY Group_Name Asc ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Agent_Login`( In User_Name_ VARCHAR(50),in Password_ VARCHAR(50))
BEGIN
SELECT 
Client_Accounts_Name,Client_Accounts_Id
From client_accounts 
 where 
 Client_Accounts_Name =User_Name_ and State=Password_;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Agent_Typeahead`( In Client_Accounts_Name_ varchar(100))
Begin
 set Client_Accounts_Name_ = Concat( '%',Client_Accounts_Name_ ,'%');
select  client_accounts.Client_Accounts_Id,Client_Accounts_Name
From client_accounts
where Client_Accounts_Name like Client_Accounts_Name_  and client_accounts.DeleteStatus=false and Account_Group_Id=13
order by Client_Accounts_Name asc  limit 5  ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Check_Agent_Mail`( In Email_ varchar(25))
Begin 
 SELECT Client_Accounts_Id, Client_Accounts_Name,State Password 
 From client_accounts where Email =Email_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Check_Student_Mail`( In Email_ varchar(25))
Begin 
 SELECT Student_Id, Student_Name,Password 
 From student where Email =Email_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Account_Group`( In Account_Group_Id_ Int)
Begin 
	declare DeleteStatus_ bit;
	if exists(select Client_Accounts.Account_Group_Id  from Client_Accounts where DeleteStatus=False and Account_Group_Id =Account_Group_Id_ )
	then
		set DeleteStatus_=0;
	else
		update Account_Group set DeleteStatus=true where Account_Group_Id =Account_Group_Id_ ;
		set DeleteStatus_=1;
	end if;
select DeleteStatus_;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Agent`( In Client_Accounts_Id_ Int)
Begin 

  declare DeleteStatus_ bit;

update Client_Accounts set DeleteStatus=True where Client_Accounts.Client_Accounts_Id=Client_Accounts_Id_;
update Employee_Details set DeleteStatus=true where Client_Accounts_Id =Client_Accounts_Id_ ;
#update Employee_Location set DeleteStatus=true where Client_Accounts_Id =Client_Accounts_Id_ ;
set DeleteStatus_=True;

select DeleteStatus_;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Branch`( In Branch_Id_ Int)
Begin 
 update Branch set Is_Delete=true where Branch_Id =Branch_Id_ ;
 SELECT Branch_Id  From Branch where Branch_Id =Branch_Id_  ;
 
 delete from Branch_Department where Branch_id=Branch_Id_;
 select Branch_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Client_Accounts`( In Client_Accounts_Id_ Int)
Begin 

  declare DeleteStatus_ bit;

update Client_Accounts set DeleteStatus=True where Client_Accounts.Client_Accounts_Id=Client_Accounts_Id_;
update Employee_Details set DeleteStatus=true where Client_Accounts_Id =Client_Accounts_Id_ ;
#update Employee_Location set DeleteStatus=true where Client_Accounts_Id =Client_Accounts_Id_ ;
set DeleteStatus_=True;

select DeleteStatus_;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Company`( In Company_Id_ Int)
Begin 
 update Company set Is_Delete=true where Company_Id =Company_Id_ ;
 SELECT Company_Id  From Company where Company_Id =Company_Id_  ;
 select Company_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Country`( In Country_Id_ Int)
Begin 
 update Country set DeleteStatus=true where Country_Id =Country_Id_ ;
 select Country_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Course`( In Course_Id_ Int)
Begin 
 update Course set DeleteStatus=true where Course_Id =Course_Id_ ;
 select Course_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Course_Intake`( In Course_Intake_Id_ Int)
Begin 
 update Course_Intake set DeleteStatus=true where Course_Intake_Id =Course_Intake_Id_ ;
 select Course_Intake_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Data`()
BEGIN
declare DeleteStatus_ bit;
		delete from student ;
        delete from student_followup ;
		delete from student_course_selection;
        delete from fees_receipt;
        set DeleteStatus_=1;
	select DeleteStatus_ as Deletefiles;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Department`( In Department_Id_ Int)
Begin 
 update Department set Is_Delete=true where Department_Id =Department_Id_ ;
 SELECT Department_Id  From Department where Department_Id =Department_Id_  ;
delete from Status_Selection where department_id=Department_Id_;
 select Department_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Department_Status`( In Department_Status_Id_ Int)
Begin 
 update Department_Status set Is_Delete=true where Department_Status_Id =Department_Status_Id_ ;
 SELECT Department_Status_Id  From Department_Status where Department_Status_Id =Department_Status_Id_  ;
 select Department_Status_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Document`( In Document_Id_ Int)
Begin 
 update Document set DeleteStatus=true where Document_Id =Document_Id_ ;
 select Document_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Duration`( In Duration_Id_ Int)
Begin 
 update Duration set DeleteStatus=true where Duration_Id =Duration_Id_ ;
 select Duration_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Enquiry_Source`( In Enquiry_Source_Id_ Int)
Begin 
 update Enquiry_Source set DeleteStatus=true where Enquiry_Source_Id =Enquiry_Source_Id_ ;
 select Enquiry_Source_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Fees`( In Fees_Id_ Int)
Begin 
 update fees set DeleteStatus=true where Fees_Id =Fees_Id_ ;
 select Fees_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Intake`( In Intake_Id_ Int)
Begin 
 update Intake set DeleteStatus=true where Intake_Id =Intake_Id_ ;
 select Intake_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Internship`( In Internship_Id_ Int)
Begin 
 update Internship set DeleteStatus=true where Internship_Id =Internship_Id_ ;
 select Internship_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Level_Detail`( In Level_Detail_Id_ Int)
Begin 
 update Level_Detail set DeleteStatus=true where Level_Detail_Id =Level_Detail_Id_ ;
 select Level_Detail_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Receipt`( In Fees_Receipt_Id_ Int)
Begin 
 update fees_receipt set Delete_Status=true where Fees_Receipt_Id =Fees_Receipt_Id_ ;
 select Fees_Receipt_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Remarks`( In Remarks_Id_ Int)
Begin 
 update Remarks set DeleteStatus=true where Remarks_Id =Remarks_Id_ ;
 select Remarks_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Student`( In Student_Id_ Int)
Begin 
 update Student set DeleteStatus=true where Student_Id =Student_Id_ ;
 update student_followup set DeleteStatus=true where Student_Id =Student_Id_ ;
 select Student_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Student_Document`( In Student_Document_Id_ Int)
Begin 
 update Student_Document set DeleteStatus=true where Student_Document_Id =Student_Document_Id_ ;
 select Student_Document_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Student_File`( In Student_Id_ Int, File_Name_ varchar(100) )
Begin 
if File_Name_='Passport_Copy'
then
 update Student set Passport_Copy='', Passport_Copy_File_Name='' where Student_Id =Student_Id_ ;
 elseif File_Name_='IELTS' then
 update Student set IELTS='' , IELTS_File_Name='' where Student_Id =Student_Id_ ;
 elseif File_Name_='Passport_Photo' then
 update Student set Passport_Photo='',Passport_Photo_File_Name=''  where Student_Id =Student_Id_ ;
 elseif File_Name_='Tenth_Certificate' then
 update Student set Tenth_Certificate='' ,Tenth_Certificate_File_Name=''  where Student_Id =Student_Id_ ;
 elseif File_Name_='Work_Experience' then
 update Student set Work_Experience='' ,Work_Experience_File_Name='' where Student_Id =Student_Id_ ;
 elseif File_Name_='Resume' then
 update Student set Resume='', Resume_File_Name=''  where Student_Id =Student_Id_ ;
 end if;
 
 select Student_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Student_Message`( In Student_Message_Id_ Int)
Begin 
 update Student_Message set DeleteStatus=true where Student_Message_Id =Student_Message_Id_ ;
 select Student_Message_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Student_Report`( In Student_ JSON)
Begin 
declare Student_Id_J int;declare i int;
set i=0;
WHILE i < JSON_LENGTH(Student_) DO
	#SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Student_Id')) INTO Student_Id_J; 
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,CONCAT('$[',i,'].Student_Id'))) INTO Student_Id_J;
    insert into data_log_ values(0,Student_Id_J,0);
		if( Student_Id_J>0 ) then
			update student_followup set DeleteStatus=1 where Student_Id= Student_Id_J ; 
			
            Update student set DeleteStatus=1 where Student_Id=Student_Id_J;
	    end if;
	SELECT i + 1 INTO i;  
end while;    
 select Student_Id_J;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Student_Status`( In Student_Status_Id_ Int)
Begin 
 update Student_Status set DeleteStatus=true where Student_Status_Id =Student_Status_Id_ ;
 select Student_Status_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Subject`( In Subject_Id_ Int)
Begin 
 update Subject set DeleteStatus=true where Subject_Id =Subject_Id_ ;
 select Subject_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_Sub_Section`( In Sub_Section_Id_ Int)
Begin 
 update Sub_Section set DeleteStatus=true where Sub_Section_Id = Sub_Section_Id_ ;
 select Sub_Section_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_University`( In University_Id_ Int)
Begin 
 update University set DeleteStatus=true where University_Id =University_Id_ ;
 update University_Photos set DeleteStatus=true where University_Id =University_Id_ ;
 select University_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_User_Details`( In User_Details_Id_ Int)
Begin 
update User_Menu_Selection set DeleteStatus=true where User_Id =User_Details_Id_ ;
update user_department set Is_Delete=true where User_Id =User_Details_Id_ ;
 update User_Details set DeleteStatus=true where User_Details_Id =User_Details_Id_ ;
 select User_Details_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Delete_User_Role`( In User_Role_Id_ Int)
Begin 
	declare DeleteStatus_ bit;
	if exists(select user_details.Role_Id  from user_details where DeleteStatus=False and Role_Id =User_Role_Id_ )
	then
		set DeleteStatus_=0;
	else
		update user_role set Is_Delete=true where User_Role_Id =User_Role_Id_ ;
		set DeleteStatus_=1;
	end if;
select DeleteStatus_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Dropdown_Branch`( )
BEGIN

SELECT 
Branch_Id,Branch_Name
From Branch
 where Is_Delete=false
ORDER BY Branch_Name ASC;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Dropdown_Department`()
BEGIN
SELECT 
Department_Id,Department_Name
From Department where Is_Delete=0
 
ORDER BY Department_Name ASC;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Dropdown_Users`()
BEGIN
SELECT 
User_Details_Id,User_Details_Name
From user_details
 where DeleteStatus=false
ORDER BY User_Details_Name ASC;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Fees_Typeahead`( In Fees_Name_ varchar(100))
Begin
 set Fees_Name_ = Concat( '%',Fees_Name_ ,'%');
select  fees.Fees_Id,Fees_Name
From fees
where Fees_Name like Fees_Name_  and fees.DeleteStatus=false
order by Fees_Name asc  limit 5  ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `FollowUp_Summary`(In  Department_String varchar(1000),RoleId_ varchar(100), By_User_ int,Login_User_Id_ int)
BEGIN
declare Search_Date_ varchar(500);declare User_Type_ int;
declare SearchbyName_Value varchar(2000);
set SearchbyName_Value='';
set Search_Date_=concat( " and date(student.Next_FollowUp_Date) < '", Date_Format( Now(),'%Y-%m-%d'),"'" );
set User_Type_=(select User_Type from user_details where User_Details_Id=Login_User_Id_);
if By_User_>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and student.User_Id =",By_User_);
end if;
if User_Type_=2 then
 	SET SearchbyName_Value =concat(SearchbyName_Value," and student.User_Id =",Login_User_Id_);
    else
    SET SearchbyName_Value =concat(SearchbyName_Value," and student.User_Id in (select User_Details_Id from user_details where Branch_Id in (select
distinct Branch_Id from user_department where User_Id =",Login_User_Id_," and VIew_All=1))");
end if;

SET @query = Concat( "select count(student.Student_Id) as Missed_FollowUp, User_Details_Name,User_Details_Id
from student
inner join user_details on user_details.User_Details_Id=student.User_Id
inner join department on department.Department_Id=student.Department  ",Department_String,"
where student.DeleteStatus=0 and department.FollowUp=1 ",SearchbyName_Value," ",Search_Date_, "
and user_details.Role_Id in(",RoleId_,")
group by student.User_Id
order by Next_FollowUp_Date asc ");

PREPARE QUERY FROM @query;
#select @query;
insert into data_log_ values(0,@query,'');

EXECUTE QUERY;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Account_Group`( In Account_Group_Id_ Int)
Begin 
 SELECT Account_Group_Id,
Primary_Id,
Group_Code,
Group_Name,
Link_Left,
Link_Right,
Under_Group,
IsPrimary,
CanDelete,
UserId From Account_Group where Account_Group_Id =Account_Group_Id_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Agent`( In Client_Accounts_Id_ Int)
Begin 
 SELECT 
Address1,Address2,
 Address3,Address4,Mobile
From Client_Accounts 
where Client_Accounts_Id =Client_Accounts_Id_ and Client_Accounts.DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Branch_Department_Edit`( In Branch_Id_ Int)
Begin 
 SELECT Department.Department_Id ,Department_Name,
 case when Branch_Department.Department_Id>0 then 1 else 0 end as Check_Box
  From Department left join Branch_Department on
  Department.Department_Id=Branch_Department.Department_Id
  and Branch_Id =Branch_Id_ where 
  Department.Is_Delete=false order by Department_Order ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Client_Accounts`( In Client_Accounts_Id_ Int)
Begin 
 SELECT 
Address1,Address2,
 Address3,Address4,Mobile
From Client_Accounts 
where Client_Accounts_Id =Client_Accounts_Id_ and Client_Accounts.DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Company`()
Begin 
 SELECT Company_Id ,
companyname ,
Phone1 ,
Phone2 ,
Mobile ,
Website,
Email,
Address1,
Address2,
Address3,
Logo
 From Company where  Is_Delete=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Country`( In Country_Id_ Int)
Begin 
 SELECT Country_Id,
Country_Name From Country where Country_Id =Country_Id_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Course`( In Course_Id_ Int)
Begin 
 SELECT Course_Id,
Course_Name,
Subject_Id,
Sub_Section_Id ,
Duration_Id,
Level_Id,
Ielts_Minimum_Score,
Internship_Id,
Notes,
Details,
Application_Fees,
Tution_Fees ,
Entry_Requirement,
Living_Expense,
Work_Experience,
IELTS_Name,
Intake_Name,
University_Id,
Country_Id,Tag From Course where Course_Id =Course_Id_ and DeleteStatus=false ;

  SELECT  case when  Intake_Status=1 then true else false end as Intake_Status , case when  Course_intake_id>0 then true else false end as Intake_Selection
  ,Intake_Name,intake.Intake_Id from Intake left join  course_intake on course_intake.Intake_Id=intake.Intake_Id
  and course_intake.course_id =course_id_
  order by Intake_Name ;
  
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Course_Import`( In Import_Master_Id_ Int)
Begin 
 SELECT 
Course_Name Course,
Subject_Name Subject,
Duration_Name Duration ,
Level_Id Level,
Ielts_Minimum_Score Ielts,
Internship_Name Internship,
Notes,
Details,
Application_Fees Fees,
University_Name University,
Country_Name Country,
Tag ,
Tution_Fees,
Entry_Requirement,
Duration,
Living_Expense,
Work_Experience
From Course
inner join import_detail on course.Course_Id=import_detail.Course_Id and import_detail.Import_Master_Id=Import_Master_Id_ 
inner join subject on  course.Subject_Id=subject.Subject_Id
inner join duration on course.Duration_Id=duration.Duration_Id
inner join level_detail on course.Level_Id=level_detail.Level_Detail_Id
inner join ielts on course.Ielts_Minimum_Score=ielts.Minimum_Score
inner join internship on course.Internship_Id=internship.Internship_Id
inner join university on course.University_Id=university.University_Id
inner join country on course.Country_Id=country.Country_Id ;


 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Course_Intake`( In Course_Intake_Id_ Int)
Begin 
 SELECT Course_Id,
Intake_Id From Course_Intake where Course_Intake_Id =Course_Intake_Id_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Course_Load_Data`()
BEGIN
SELECT Internship_Id,Internship_Name From internship where  DeleteStatus=false  order by Internship_Name asc ;
SELECT Ielts_Id,Ielts_Name From ielts  where  DeleteStatus=false order by  Ielts_Name asc ;
SELECT Duration_Id,Duration_Name From duration where  DeleteStatus=false  order by Duration_Name asc ;
SELECT Level_Detail_Id,Level_Detail_Name From level_detail where  DeleteStatus=false  order by Level_Detail_Name asc ;
SELECT Student_Status_Id,Student_Status_Name From student_status where  DeleteStatus=false  order by Student_Status_Name asc; 
SELECT Enquiry_Source_Id,Enquiry_Source_Name From enquiry_source where  DeleteStatus=false  order by Enquiry_Source_Name asc; 

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Dashboard_Count`(In RoleId_ varchar(100),Department_String varchar(4000))
BEGIN
declare Fromdate_ date;declare Todate_ date;
declare Search_Date_ varchar(200);
set Fromdate_=now();
set Todate_=now();
set Search_Date_='';

set Search_Date_=concat( " and date(student.Entry_Date) >= '", Fromdate_ ,"' and  date(student.Entry_Date) <= '", Todate_,"'");

SET @query = Concat( "  
select 1 as tp,count(student.Student_Id) as Data_Count from student
inner join Department on Department.Department_Id= student.Department  ",Department_String,"
inner join user_details on user_details.User_Details_Id=student.Created_By
where student.DeleteStatus=0     and date(student.Entry_Date) >= '", Fromdate_ ,"' and  date(student.Entry_Date) <= '", Todate_,"'
and user_details.Role_Id in(",RoleId_,")  
   union
    select 2 as tp,count(student.Student_Id) as Data_Count from student
inner join Department on Department.Department_Id= student.Department  ",Department_String,"
inner join user_details on user_details.User_Details_Id=student.Created_By
where student.DeleteStatus=0     and date(student.Registered_On) >= '", Fromdate_ ,"' and  date(student.Registered_On) <= '", Todate_,"'
and user_details.Role_Id in(",RoleId_,")     
union
    select 3 as tp,count(student.Student_Id) as Data_Count from student
inner join Department on Department.Department_Id= student.Department  ",Department_String,"
inner join user_details on user_details.User_Details_Id=student.Created_By
where student.DeleteStatus=0     and date(student.Next_FollowUp_Date) <'",  Fromdate_,"'
and user_details.Role_Id in(",RoleId_,") 
union

 select 4 as tp,COALESCE(sum(Fees_Receipt.Amount),0) as Data_Count from student
inner join Department on Department.Department_Id= student.Department  ",Department_String,"
inner join Fees_Receipt on Fees_Receipt.Student_Id=student.Student_Id
inner join user_details on user_details.User_Details_Id=Fees_Receipt.User_Id
where student.DeleteStatus=0   and fees_receipt.Delete_Status=0 and date(Fees_Receipt.Entry_Date) >= '", Fromdate_ ,"' and  date(Fees_Receipt.Entry_Date) <= '", Todate_,"'
and user_details.Role_Id in(",RoleId_,") order by tp 
    ");
PREPARE QUERY FROM @query;
#select @query;
#insert into data_log_ values(0,@query,'');
EXECUTE QUERY;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Department_InUser`()
BEGIN
select
Department.Department_Id,
Department_Name,
Branch.Branch_Id,
Branch_Name,'0' VIew_All,'0' View_Entry

from Department inner join Branch_Department on Branch_Department.Department_Id=Department.Department_Id
inner join Branch on Branch.Branch_Id=Branch_Department.Branch_Id
order by Branch_Name,Department_Name asc;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Department_Permission_Byuser`( In User_Id_ Int,Branch_ int)
Begin 
SELECT Department_Id,Branch_Id,View_Entry ,VIew_All From User_Department where 
User_Id =User_Id_  and Branch_Id=Branch_ ;#and Is_Delete=false ;
End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Department_Permission_Byuser_current_Branch`( In User_Id_ Int,Branch_ int)
Begin 
SELECT Department_Id,Branch_Id,View_Entry ,VIew_All From User_Department where 
User_Id =User_Id_  and VIew_All=1 ;
End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Department_Status`( In Department_Status_Id_ Int)
Begin 
 SELECT Department_Status_Id,
Department_Status_Name,
Status_Order,
Editable,
Color From Department_Status where Department_Status_Id =Department_Status_Id_ and Is_Delete=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Document`( In Document_Id_ Int)
Begin 
 SELECT Document_Id,
Document_Name From Document where Document_Id =Document_Id_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Duration`( In Duration_Id_ Int)
Begin 
 SELECT Duration_Id,
Duration_Name From Duration where Duration_Id =Duration_Id_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Enquiry_Source`( In Enquiry_Source_Id_ Int)
Begin 
 SELECT Enquiry_Source_Id,
Enquiry_Source_Name From Enquiry_Source where Enquiry_Source_Id =Enquiry_Source_Id_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Enquiry_Source_data_Count`(In RoleId_ varchar(100),Department_String varchar(1000))
BEGIN
declare Fromdate_ date;declare Todate_ date;
declare curday int;
set Fromdate_=now();
set Todate_=now();
set curday=(SELECT DAY(Fromdate_)-1);
set Fromdate_=(SELECT DATE_SUB(Fromdate_, INTERVAL curday DAY));
SET @query = Concat( "  
select Enquiry_Source_Name,count(student.Student_Id) as Data_Count from
enquiry_source left join(
student
inner join Department on Department.Department_Id= student.Department  ",Department_String,"
inner join user_details on user_details.User_Details_Id=student.Created_By
    and student.DeleteStatus=0    and date(student.Entry_Date) >= '", Fromdate_ ,"' and  date(student.Entry_Date) <= '", Todate_,"'
and user_details.Role_Id in(",RoleId_,") )
on enquiry_source.Enquiry_Source_Id=student.Enquiry_Source_Id
group by enquiry_source.Enquiry_Source_Id
order by Enquiry_Source_Name
    ");
PREPARE QUERY FROM @query;
#select @query;
insert into data_log_ values(0,@query,'');
EXECUTE QUERY;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Enquiry_Status`( In Enquiry_Source_Id_ Int)
Begin 
 SELECT Enquiry_Source_Id,
Enquiry_Source_Name From Enquiry_Source where Enquiry_Source_Id =Enquiry_Source_Id_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Fees`( In Fees_Id_ Int)
Begin 
 SELECT Fees_Id,
Fees_Name From fees where Fees_Id =Fees_Id_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Fees_Receipt`( In Fees_Receipt_Id_ Int)
Begin 
 SELECT Entry_Date,
 Description,
 Amount,
 Fees_Name
 From fees_receipt 
 inner join fees on fees_receipt.Fees_Id= fees.Fees_Id  
 where Fees_Receipt_Id =Fees_Receipt_Id_ and Delete_Status=false ;
 
End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_FollowUp_Details`( In Student_Id_ Int)
Begin 
 SELECT
	 student.Student_FollowUp_Id,Department,Department_Name,
     student.Status,Department_Status_Name,student.User_Id,User_Details_Name,
	(Date_Format(Next_FollowUp_Date,'%Y-%m-%d')) As Next_FollowUp_Date,Remark,
	Branch,Branch_Name,	Department.FollowUp  Department_FollowUp,By_User_Id
From student
inner join  Department on student.Department=Department.Department_Id
inner join Branch  on student.Branch=Branch.Branch_Id
inner join Department_Status on student.Status=Department_Status.Department_Status_Id
inner join user_details on student.User_Id=user_details.User_Details_Id 
 where student.Student_Id =Student_Id_  ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_FollowUp_History`( In Student_Id_ Int)
Begin 
 SET @query = Concat( " SELECT '1'  Entry_Type ,'FollowUp' as Entry_Caption,Branch_Name,Department_Name,Department.FollowUp Followup_value ,
 Department_Status.Department_Status_Name Status_Name,
(Date_Format(Next_FollowUp_Date,'%Y-%m-%d')) As Next_FollowUp_Date,(Date_Format(Entry_Date,'%Y-%m-%d-%h:%i')) As Entry_Date,
user_details.User_Details_Name User_Name,By_User.User_Details_Name By_User_Name,
Remark,FollowUp_Difference,(Date_Format(Actual_FollowUp_Date,'%Y-%m-%d')) As Actual_FollowUp_Date
From student_followup
inner join Department on student_followup.Department=Department.Department_Id
inner join Branch  on student_followup.Branch=Branch.Branch_Id
inner join Department_Status on student_followup.Status=Department_Status.Department_Status_Id
inner join user_details on student_followup.User_Id=user_details.User_Details_Id 
inner join user_details By_User on student_followup.By_User_Id=By_User.User_Details_Id
where student_followup.Student_Id = ",Student_Id_,"   and student_followup.DeleteStatus=false
  union
	select  '2'  Entry_Type ,'Fees Receipt' as Entry_Caption,Branch_Name,'' Department_Name,'' Followup_value,Fees_Name as Status_Name, (Date_Format(fees_receipt.Actual_Entry_Date,'%Y-%m-%d-%h:%i')) As Next_FollowUp_Date  ,
    (Date_Format(fees_receipt.Entry_Date,'%Y-%m-%d')) as Entry_Date,
	'' as User_Name,user_details.User_Details_Name By_User_Name,
	Description,'' FollowUp_Difference,Amount As Actual_FollowUp_Date
	  from fees_receipt
	  inner join fees on fees.Fees_Id=fees_receipt.Fees_Id
	  inner join  user_details on fees_receipt.User_Id=user_details.User_Details_Id 
      inner join Branch  on fees_receipt.Fee_Receipt_Branch=Branch.Branch_Id
	  where fees_receipt.Student_Id = ",Student_Id_," and  Delete_Status=false
      union
      
      SELECT '3'  Entry_Type ,'Course Sent' as Entry_Caption,'' Branch_Name,''Department_Name,'' Followup_value ,'' Status_Name,
	'' Next_FollowUp_Date,(Date_Format(Entry_Date,'%Y-%m-%d-%h:%i')) As Entry_Date,
	user_details.User_Details_Name User_Name,'' By_User_Name,
	'' Remark,'' FollowUp_Difference,'' As Actual_FollowUp_Date
	From student_course_apply
    inner join user_details  on user_details.User_Details_Id =student_course_apply.User_Id
	 where student_course_apply.Student_Id = ",Student_Id_,"
     union
    SELECT '4'  Entry_Type ,'Registered' as Entry_Caption,Branch_Name,'' Department_Name,'' Followup_value ,
	'' Status_Name,
	'' Next_FollowUp_Date,(Date_Format(Registered_On,'%Y-%m-%d-%h:%i')) As Entry_Date,
	'' User_Name,user_details.User_Details_Name By_User_Name,
	'' Remark,'' FollowUp_Difference,'' As Actual_FollowUp_Date
    From student
    inner join  user_details on student.Registered_By=user_details.User_Details_Id 
    inner join Branch  on Branch.Branch_Id =student.Branch
    where student.Student_Id = ",Student_Id_,"
   order by Entry_Date,Entry_Type;");
  PREPARE QUERY FROM @query;
#select @query;
insert into data_log_ values(0,@query,'');
EXECUTE QUERY;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Intake`( In Intake_Id_ Int)
Begin 
 SELECT Intake_Id,
Intake_Name From Intake where Intake_Id =Intake_Id_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Intakes_InCourse`()
Begin 

 SELECT false Intake_Status,false Intake_Selection,Intake_Name,Intake_Id from Intake  order by Intake_Name ;
   

 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Intakes_InCourse_Edit`( In Course_Id_ int)
Begin 

  SELECT false Intake_Status,false Intake_Selection,Intake_Name from Intake 
  left join  course_intake on course_intake.Intake_Id=intake.Intake_Id
  order by Intake_Name ;

 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Internship`( In Internship_Id_ Int)
Begin 
 SELECT Internship_Id,
Internship_Name From Internship where Internship_Id =Internship_Id_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Last_FollowUp`( In User_Id_ Int)
Begin 
Declare Followup_Id_ numeric;
set Followup_Id_=(select Max(Student_FollowUp_Id) from student_followup where By_User_Id =User_Id_ and DeleteStatus=false);

 SELECT Department,student_followup.Status,student_followup.User_Id,
student_followup.Branch,Branch_Name,Department_Name,Department_Status.Department_Status_Name ,
user_details.User_Details_Name ,Department.FollowUp  Department_FollowUp,By_User_Id
From student_followup
inner join Department on student_followup.Department=Department.Department_Id
inner join Branch  on student_followup.Branch=Branch.Branch_Id
inner join Department_Status on student_followup.Status=Department_Status.Department_Status_Id
inner join user_details on student_followup.User_Id=user_details.User_Details_Id and student_followup.Student_FollowUp_Id=student_followup.Student_FollowUp_Id
 where student_followup.Student_FollowUp_Id =Followup_Id_  and student_followup.DeleteStatus=false;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Lead_Load_Data_ByUser`(In Login_User Int )
BEGIN
declare User_Type_ int;
set User_Type_=(select User_Type from user_details where User_Details_Id=Login_User);
if User_Type_=2 then
 	#SET SearchbyName_Value =concat(SearchbyName_Value," and User_Details_Id =",Login_Id_);
    SELECT User_Details_Id,User_Details_Name From user_details  where  DeleteStatus=false and User_Details_Id =Login_User order by  User_Details_Name asc ;
  
else
	SELECT User_Details_Id,User_Details_Name From user_details  where  DeleteStatus=false and User_Details_Id in (select User_Details_Id from user_details where Branch_Id in (select
	distinct Branch_Id from user_department where User_Id =Login_User and VIew_All=1)) order by  User_Details_Name asc ;
   
end if;
#SELECT Department_Id,Department_Name From department where  DeleteStatus=false  order by Department_Name asc ;

#SELECT User_Details_Id,User_Details_Name From user_details  where  DeleteStatus=false order by  User_Details_Name asc ;

SELECT Department_Id,Department_Name From department where  Is_Delete=false and
Department_Id in (select distinct Department_Id from user_department where User_Id =Login_User and View_Entry=1) order by Department_Name asc ;

SELECT Branch_Id,Branch_Name From branch where  Is_Delete=false and Branch_Id in (select
	distinct Branch_Id from user_department where User_Id =Login_User and VIew_Entry=1) order by Branch_Name asc ;

SELECT Fees_Id,Fees_Name From fees where  DeleteStatus=false  order by Fees_Name asc; 

SELECT Remarks_Id,Remarks_Name From remarks where  DeleteStatus=false  order by Remarks_Name asc; 

SELECT Department_Status_Id,Department_Status_Name From department_status where  Is_Delete=false  order by Department_Status_Name asc ;


    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Level_Detail`( In Level_Detail_Id_ Int)
Begin 
 SELECT Level_Detail_Id,
Level_Detail_Name From Level_Detail where Level_Detail_Id =Level_Detail_Id_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Menu_Permission`(In User_Id_ int)
BEGIN
select
User_Menu_Selection.Menu_Id,
User_Menu_Selection.IsEdit Menu_Edit,
User_Menu_Selection.IsDelete Menu_Delete ,
User_Menu_Selection.IsSave Menu_Save,
User_Menu_Selection.IsView VIew_All ,
User_Menu_Selection.Menu_Status,
Menu_Type
from User_Menu_Selection
inner join Menu on User_Menu_Selection.Menu_Id=Menu.Menu_Id
Where
User_Id=User_Id_ 
and User_Menu_Selection.IsView=1 and Menu.Menu_Status=1
order by Menu_Order Asc;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Menu_Status`(In Menu_Id_ int,Login_User_ int)
BEGIN
select IsView ,Menu_Status,IsEdit Edit,IsSave Save,IsDelete,Menu_Id,IsDelete as 'Delete' ,IsView as'View' ,menu_id
from user_menu_selection where User_Id=Login_User_ and DeleteStatus=0 and menu_id=Menu_Id_;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Message_Details`(in Student_Id_ int)
BEGIN
select Student_Message_Id,Message_Detail,
(Date_Format(Entry_Date,'%Y-%m-%d')) As Entry_Date 
from student_message where Student_Id=Student_Id_ and DeleteStatus=false
order by Entry_Date desc ;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_More_Information`(in Course_Id_ int)
BEGIN
select Application_Fees,Level_Detail_Name,Details,Duration_Name,Subject_Name,
ielts.Ielts_Name Ielts_Minimum_Score
 From Course 
 inner join duration on  course.Duration_Id= duration.Duration_Id
 inner join  level_detail on course.Level_Id=level_detail.Level_Detail_Id
 inner join subject on course.Subject_Id=subject.Subject_Id
 inner join ielts on course.Ielts_Minimum_Score=ielts.Ielts_Id
where Course.DeleteStatus = false and Course.Course_Id=Course_Id_;
select Intake_Name
from intake
 inner join course_intake on  course_intake.Intake_Id= intake.Intake_Id
 where course_intake.Course_Id=Course_Id_;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_site_Pageload`()
BEGIN
SELECT Country_Id,Country_Name From Country where  DeleteStatus=false  order by Country_Name asc ;
SELECT Ielts_Id,Ielts_Name From ielts  where  DeleteStatus=false order by  Ielts_Name asc ;
SELECT Subject_Id,Subject_Name,Selection From subject where  DeleteStatus=false  order by Subject_Name asc ;
SELECT Duration_Id,Duration_Name,Selection From duration where  DeleteStatus=false  order by Duration_Name asc ;
SELECT Level_Detail_Id,Level_Detail_Name From level_detail where  DeleteStatus=false  order by Level_Detail_Name asc ;
SELECT Intake_Id,Intake_Name From intake where  DeleteStatus=false  order by Intake_Name asc ;

SELECT Internship_Id,Internship_Name From internship where  DeleteStatus=false  order by Internship_Name asc ;
SELECT University_Id,University_Name From university where  DeleteStatus=false  order by University_Name asc ;
SELECT Sub_Section_Id,Sub_Section_Name From sub_section where DeleteStatus=false  order by Sub_Section_Name asc ;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Status_Selection_Edit`( In Department_Id_ Int)
Begin 
 SELECT Department_Status_Id,
Department_Status_Name,
 case when Status_Selection.Status_Id>0 then 1 else 0 end as Check_Box
 From Department_Status  left join Status_Selection on
  Department_Status.Department_Status_Id=Status_Selection.status_Id
  and Department_Id=Department_Id_ where
  Department_Status.Is_Delete=false order by Status_Order ;
 

 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Student`( In Student_Id_ Int)
Begin 
 SELECT Student_Id,
 Agent_Id,
Student_Name,
Last_Name,
Gender,
Address1,
Address2,
Pincode,
Email,
Alternative_Email,
Phone_Number,
Alternative_Phone_Number,
Dob,
Country_Name,
Promotional_Code,
Student_Status_Id,
Enquiry_Source_Id,
Whatsapp,
Passport_Copy_File_Name,IELTS_File_Name,Passport_Photo_File_Name,
Tenth_Certificate_File_Name,Work_Experience_File_Name,Resume_File_Name,

Facebook,IFNULL(Passport_Copy,'') Passport_Copy
,
IFNULL(IELTS,'') IELTS,IFNULL(Passport_Photo,'') Passport_Photo
,
IFNULL(Tenth_Certificate,'') Tenth_Certificate ,
IFNULL(Work_Experience,'') Work_Experience ,
IFNULL(Resume,'') Resume ,
Is_Registered,
Password,
College_University,
Programme_Course,
Intake,
Year,
Reference,
Visa_Submission_Date,
Activity,
Visa_Outcome,
Agent,
Status_Details,
Student_Remark
 From Student where Student_Id =Student_Id_ and DeleteStatus=false ;

select Student_Document_Id,File_Name,Document_Name,0 New_Entry, Document_File_Name from Student_Document where Student_Id =Student_Id_ and DeleteStatus=false order by Document_Id;
End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Student_Agent`( In Student_Id_ Int)
Begin 
 SELECT Student_Id,
 Agent_Id,
Student_Name,
Last_Name,
Gender,
Address1,
Address2,
Pincode,
Email,
Phone_Number,
Dob,
Country,
Promotional_Code,
Student_Status_Id,
Password From Student where Student_Id =Student_Id_ and DeleteStatus=false ;
End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Student_Course_Apply`(in Student_Id_ int )
BEGIN
select Student_Course_Apply_Id,
(Date_Format(Entry_Date,'%Y-%m-%d')) As Entry_Date ,
(Date_Format(Paid_On,'%Y-%m-%d')) As Paid_On ,Status_Id,Total_Course
from student_course_apply
where Student_Id=Student_Id_;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Student_Course_Selection`(in Student_Course_Apply_Id_ int)
BEGIN
select Course_Name,Application_Fees,Country_Name,University_Name,Student_Course_Apply_Id
from student_course_selection
inner join Course on Course.Course_Id=student_course_selection.Course_Id
inner join Country on Course.Country_Id=Country.Country_Id
inner join University on Course.University_Id=University.University_Id
where Student_Course_Apply_Id=Student_Course_Apply_Id_;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Student_Details`(in Student_Id_ int)
BEGIN
select Student_Id,Student_Name,Gender,Address1,Address2,Email,Phone_Number,Pincode,
Last_Name,Dob,Country,Promotional_Code,Password
from student where Student_Id=Student_Id_;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Student_Document`( In Student_Id_ Int)
Begin 
declare  Student_Document_Id int; 
 SELECT
(Date_Format(Entry_Date,'%Y-%m-%d')) Entry_Date,File_Name,document.Document_Name
From Student_Document
inner join document on Student_Document.Document_Id=document.Document_Id
where Student_Id =Student_Id_ and student_document.DeleteStatus=false
order by Student_Document_Id desc ;

 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Student_Message`( In Student_Message_Id_ Int)
Begin 
 SELECT Student_Message_Id,
Student_Id,
Message_Detail From Student_Message where Student_Message_Id =Student_Message_Id_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Student_Status`( In Student_Status_Id_ Int)
Begin 
 SELECT Student_Status_Id,
Student_Status_Name From Student_Status where Student_Status_Id =Student_Status_Id_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Subject`( In Subject_Id_ Int)
Begin 
 SELECT Subject_Id,
Subject_Name From Subject where Subject_Id =Subject_Id_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_Sub_Section_From_Course`( In Subject_Id_ Int)
Begin 
SELECT course.Sub_Section_Id,Sub_Section_Name From course
inner join sub_section on course.Sub_Section_Id = sub_section.Sub_Section_Id where subject_id=Subject_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_University`( In University_Id_ Int)
Begin 
 SELECT University_Id,
University_Name From University where University_Id =University_Id_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_University_Photos`(in University_Id_ int)
BEGIN
select University_Image from University_Photos
where DeleteStatus=false and University_Id=University_Id_;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_User_Branch`( In User_Id_ Int)
Begin
 SELECT Branch_Id From User_Details  
 where User_Details_Id =User_Id_ ;

 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_User_Branches`( In User_Id_ Int,Branch_ int)
Begin 
SELECT distinct Branch_Id From User_Department where 
User_Id =User_Id_   ;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_User_Department_Edit`( In User_Id_ Int)
Begin 
 SELECT Department.Department_Id ,Department_Name,Branch.Branch_Id,Branch_Name,
 case when User_Department.View_Entry>0 then 1 else 0 end as Check_Box_View,
 case when  User_Department.VIew_All>0 then 1 else 0 end as Check_Box_VIew_All
  From Department inner join Branch_Department 
  on Department.Department_Id=Branch_Department.Department_Id inner join Branch
  on Branch.Branch_Id=Branch_Department.Branch_Id  left join User_Department 
  on Department.Department_Id=User_Department.Department_Id and  Branch.Branch_Id=User_Department.Branch_Id 
   and User_Id=user_Id_
  where Department.Is_Delete=false
  order by Branch_Name,Department_Name asc ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_User_Details`( In User_Details_Id_ Int)
Begin 
 SELECT User_Details_Id,
User_Details_Name,
Password,
Working_Status,
User_Type,
Role_Id,
Address1,
Address2,
Address3,
Address4,
Pincode,
Mobile,
Email,Employee_Id,
Registration_Target,
FollowUp_Target
 From User_Details where User_Details_Id =User_Details_Id_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_User_Details_Edit`( In User_Details_Id_ Int)
Begin 
 SELECT Menu.Menu_Id ,Menu_Name,
 case when User_Menu_Selection.IsView>0 then 1 else 0 end as IsView,
 case when User_Menu_Selection.IsSave>0 then 1 else 0 end as IsSave,
 case when User_Menu_Selection.IsEdit>0 then 1 else 0 end as IsEdit,
 case when User_Menu_Selection.IsDelete>0 then 1 else 0 end as IsDelete,
 Menu.IsEdit Edit_Check,
	Menu.IsSave Save_Check,
	Menu.IsDelete  Delete_Check
  From Menu 
  left join User_Menu_Selection on  Menu.Menu_Id=User_Menu_Selection.Menu_Id
  and User_Id =User_Details_Id_ where Menu.Menu_Status=1 and
  Menu.DeleteStatus=false order by Menu_Id ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_User_Role`( In User_Role_Id_ Int)
Begin 
 SELECT User_Role_Id,
User_Role_Name,
Role_Under_Id
 From user_role where User_Role_Id =User_Role_Id_ and Is_Delete=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_User_Role_Id`( In User_Id_ Int)
Begin
 SELECT Role_Id From User_Details  
 where User_Details_Id =User_Id_ ;

 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_User_Status`()
BEGIN

 SELECT User_Status_Id,
User_Status_Name From User_Status
order by User_Status_Name asc  ;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Get_User_Type`()
BEGIN
SELECT User_Type_Id,
User_Type_Name From User_Type 
order by User_Type_Name asc ;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Load_Account_Group`(In Group_Name_ varchar(100))
Begin 
 set Group_Name_ = Concat( '%',Group_Name_ ,'%');
 SELECT Account_Group_Id,Group_Name
 From Account_Group where  
 Group_Name like Group_Name_ and DeleteStatus=false 
  ORDER BY Group_Name Asc Limit 5;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Load_Company`()
BEGIN
select * from Company;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Load_Country`()
BEGIN
select Country_Id,Country_Name from Country
;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Load_MailAddress_for_Registration`(In Login_Id int,Student_Id_ int)
BEGIN
select Email from user_details where User_Details_Id=Login_Id union
select Email from student where  Student_Id=Student_Id_;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Load_MailAddress_for_Report`(In Login_Id int)
BEGIN
select Email from user_details where User_Details_Id=Login_Id union 
select Email from company ;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Load_Receipt_Data_For_Mail`(In Login_Id_ int)
BEGIN
select Email from user_details where User_Details_Id=Login_Id_ ;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Load_Status`()
BEGIN
select Status_Id,Status_Name from Status
;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Load_User`(in Login_Id int)
BEGIN

select User_Details_Name,Email,Mobile from user_details where User_Details_Id=Login_Id;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Load_User_Role`(In User_Role_Name_ varchar(100))
Begin 
 set User_Role_Name_ = Concat( '%',User_Role_Name_ ,'%');
 SELECT User_Role_Id,User_Role_Name,Role_Under_Id
 From user_role where  
 User_Role_Name like User_Role_Name_ and Is_Delete=false 
  ORDER BY User_Role_Name Asc Limit 5;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Login_Check`( In User_Details_Name_ VARCHAR(50),
in Password_ VARCHAR(50))
BEGIN
SELECT 
User_Details_Id,User_Details_Name,User_Type,Role_Id,Branch_Id
From User_Details 
 where 
 User_Details_Name =User_Details_Name_ and Password=Password_;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Pending_FollowUp`(In  RoleId_ varchar(100),Department_String varchar(1000), Department_ int,Branch_ int,By_User_ int,Login_User_Id_ int)
BEGIN
declare Search_Date_ varchar(500);
declare SearchbyName_Value varchar(2000);declare User_Type_ int;
set SearchbyName_Value='';
set User_Type_=(select User_Type from user_details where User_Details_Id=Login_User_Id_);
set Search_Date_=concat( " and date(student.Next_FollowUp_Date) < '", Date_Format( Now(),'%Y-%m-%d'),"'" );
if Department_>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and student.Department =",Department_);
end if;
if Branch_>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and student.Branch =",Branch_);
end if;
if User_Type_=2 then
 	SET SearchbyName_Value =concat(SearchbyName_Value," and student.User_Id =",Login_User_Id_);
    else
    SET SearchbyName_Value =concat(SearchbyName_Value," and student.User_Id in (select User_Details_Id from user_details where Branch_Id in (select
distinct Branch_Id from user_department where User_Id =",Login_User_Id_," and VIew_All=1))");
end if;
if By_User_>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and student.User_Id =",By_User_);
end if;

SET @query = Concat( "select CAST(CAST(1 AS UNSIGNED) AS SIGNED)as tp,student.Student_Id,
student.Student_Name,student.Phone_Number,student.Remark,(Date_Format(student.Registered_On,'%d-%m-%Y-%h:%i')) As Registered_On ,
(Date_Format(student.Entry_Date,'%d-%m-%Y')) As Entry_Date,  (Date_Format(student.Next_FollowUp_Date,'%d-%m-%Y')) As Next_FollowUp_Date,
Department.Department_Name,Department.FollowUp,Department_Status.Department_Status_Name,T.User_Details_Name,
B.User_Details_Name Registered_By_Name, CAST(CAST(ROW_NUMBER()OVER(ORDER BY student.Student_Id DESC)AS UNSIGNED)AS SIGNED)AS
RowNo,Branch.Branch_Name,Is_Registered,user_details.User_Details_Name As Created_By_Name
from student
inner join Department on Department.Department_Id= student.Department  ",Department_String,"
inner join user_details on user_details.User_Details_Id=student.Created_By
inner join Branch on Branch.Branch_Id= student.Branch
inner join Department_Status on Department_Status.Department_Status_Id=student.Status
inner join user_details as T on T.User_Details_Id=student.User_Id
left join user_details as B on B.User_Details_Id=student.Registered_By
where student.DeleteStatus=0 and department.FollowUp=1  ",SearchbyName_Value,"
and T.Role_Id in(",RoleId_,")
order by Next_FollowUp_Date asc ");

PREPARE QUERY FROM @query;
#select @query;
insert into data_log_ values(0,@query,'');

EXECUTE QUERY;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Public_Search_Course`(In Level_Detail_Id_ int,Country_Id_ int,
Intake_Id_ varchar(100),Sub_Section_Id_ varchar(100),Course_Name_ varchar(100),Branch_Search_ varchar(100),Duration_Search_ varchar(100),Ielts_ int,
Page_Start_ int,Page_End_ int,Page_Length_ int,University_ int,Subject_1 int)
Begin 
declare SearchbyName_Value varchar(2000);
declare SearchQuery_sub varchar(2000);
declare SearchQuery_sub_section varchar(2000);
set SearchQuery_sub=' ';
set SearchQuery_sub_section=' ';
set SearchbyName_Value='';
if Intake_Id_!='' &&  Intake_Id_!='0'  then
	#SET SearchbyName_Value =concat(SearchbyName_Value," );
    set SearchbyName_Value =concat(SearchbyName_Value,"  and course_id in (select course_id from  course_intake where
    Intake_Id in(",Intake_Id_,"))");
end if;

if Sub_Section_Id_!=''  &&  Sub_Section_Id_!='0'  then
	#SET SearchbyName_Value =concat(SearchbyName_Value," );
    set SearchQuery_sub_section=concat(" and Sub_Section_Id in(",Sub_Section_Id_,")");
end if;
if Level_Detail_Id_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and course.Level_Id =",Level_Detail_Id_);
end if;
if Country_Id_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and Course.Country_Id =",Country_Id_);
end if;
if Ielts_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and course.Ielts_Minimum_Score  <=",Ielts_);
end if;
if Course_Name_!='' then
SET SearchbyName_Value =   Concat(SearchbyName_Value, " and( course.Course_Name like '%",Course_Name_ ,"%'") ;
SET SearchbyName_Value =   Concat(SearchbyName_Value, " or course.Tag like '%",Course_Name_ ,"%')") ;
end if;
/*if Duration_Search_!='' then
SET SearchbyName_Value =   Concat( SearchbyName_Value," and Course.Duration_Id in (",Duration_Search_ ,")") ;
end if;*/
/*if Branch_Search_!='' then
SET SearchbyName_Value =   Concat( SearchbyName_Value," and Course.Subject_Id in (",Branch_Search_ ,")") ;
end if;*/
if University_!='' then
SET SearchbyName_Value =   Concat( SearchbyName_Value," and Course.University_Id in (",University_ ,")") ;
end if;
if Subject_1!='' then
SET SearchbyName_Value =   Concat( SearchbyName_Value," and Course.Subject_Id in (",Subject_1,")") ;
end if;
SET @query = Concat("select * from (SELECT course.Course_Id,Course_Name,Country_Name,University_Name,false More_Information,
CAST(CAST(ROW_NUMBER()OVER(ORDER BY Course.Course_Name DESC )AS UNSIGNED)AS SIGNED)AS RowNo
from Course 
inner join country on course.Country_Id = country.Country_Id
inner join university  on course.University_Id = university.University_Id ",SearchQuery_sub,SearchQuery_sub_section, " 
where Course.DeleteStatus = false  " ,SearchbyName_Value," order by Course.Course_Name desc )
 as lds WHERE RowNo >=",Page_Start_," AND RowNo<= ",Page_End_,"
 order by  RowNo LIMIT ",Page_Length_);
 
#insert into db_logs values(Duration_Search_,@query,1,0);
PREPARE QUERY FROM @query;
EXECUTE QUERY;
#delete from data_log_;
insert into data_log_ values(0,@query,1);
#select @query;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Public_Search_Course_Typeahead`(In Level_Detail_Id_ int,Country_Id_ int,
Intake_Id_ varchar(100),Sub_Section_Id_ varchar(100),Course_Name_ varchar(100),Branch_Search_ varchar(100),Duration_Search_ varchar(100),Ielts_ int,
Page_Start_ int,Page_End_ int,Page_Length_ int,University_ int,Subject_1 int)
Begin 
declare SearchbyName_Value varchar(2000);
declare SearchQuery_sub varchar(2000);
declare SearchQuery_sub_section varchar(2000);
set SearchQuery_sub=' ';
set SearchbyName_Value='';
set SearchQuery_sub_section=' ';


if Intake_Id_!='' &&  Intake_Id_!='0'  then
	#SET SearchbyName_Value =concat(SearchbyName_Value," );
    set SearchbyName_Value =concat(SearchbyName_Value,"  and course_id in (select course_id from  course_intake where
    Intake_Id in(",Intake_Id_,"))");
end if;


if Sub_Section_Id_!='' &&  Sub_Section_Id_!='0' then
	#SET SearchbyName_Value =concat(SearchbyName_Value," );
    set SearchQuery_sub_section=concat(" and Sub_Section_Id in(",Sub_Section_Id_,")");
end if;
if Level_Detail_Id_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and course.Level_Id =",Level_Detail_Id_);
end if;
if Country_Id_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and Course.Country_Id =",Country_Id_);
end if;
if Ielts_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and course.Ielts_Minimum_Score  <=",Ielts_);
end if;
if Course_Name_!='' then
SET SearchbyName_Value =   Concat(SearchbyName_Value, " and( course.Course_Name like '%",Course_Name_ ,"%'") ;
SET SearchbyName_Value =   Concat(SearchbyName_Value, " or course.Tag like '%",Course_Name_ ,"%')") ;
end if;
/*if Duration_Search_!='' then
SET SearchbyName_Value =   Concat( SearchbyName_Value," and Course.Duration_Id in (",Duration_Search_ ,")") ;
end if;
if Branch_Search_!='' then
SET SearchbyName_Value =   Concat( SearchbyName_Value," and Course.Subject_Id in (",Branch_Search_ ,")") ;
end if;*/
if University_!='' then
SET SearchbyName_Value =   Concat( SearchbyName_Value," and Course.University_Id in (",University_ ,")") ;
end if;
if Subject_1!='' then
SET SearchbyName_Value =   Concat( SearchbyName_Value," and Course.Subject_Id in (",Subject_1 ,")") ;
end if;
SET @query = Concat("SELECT course.Course_Id,Course_Name,Country_Name,University_Name,false More_Information
from Course 
inner join country on course.Country_Id = country.Country_Id
inner join university  on course.University_Id = university.University_Id ",SearchQuery_sub,SearchQuery_sub_section," 
where Course.DeleteStatus = false  " ,SearchbyName_Value," order by Course.Course_Name desc Limit 5");

#insert into db_logs values(Duration_Search_,@query,1,0);
PREPARE QUERY FROM @query;
EXECUTE QUERY;
delete from data_log_;
insert into data_log_ values(1,@query,1);
#select @query;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Register_Candidate`(In Student_Id_ int , User_Id_ int )
BEGIN
Declare Target_ int;declare Registration_Branch_ int;
set Registration_Branch_=(select Branch_Id from user_details where User_Details_Id= User_Id_);
set Target_=(select Registration_Target from user_details where User_Details_Id=User_Id_ );
Update Student set Is_Registered = true , Registered_By = User_Id_ , Registered_On = now(),Registration_Target=Target_,Registration_Branch=Registration_Branch_
where Student_Id = Student_Id_;
select Student_Id_;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Remarks_Typeahead`( In Remarks_Name_ varchar(100))
Begin
 set Remarks_Name_ = Concat( '%',Remarks_Name_ ,'%');
select  Remarks.Remarks_Id,Remarks_Name
From Remarks
where Remarks_Name like Remarks_Name_  and Remarks.DeleteStatus=false
order by Remarks_Name asc   ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Remove_Registration`(In Student_Id_ int )
BEGIN
Update Student set Is_Registered = false
where Student_Id = Student_Id_;
select Student_Id_;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Account_Group`( In Account_Group_Id_ decimal,
Primary_Id_ decimal,
Group_Code_ varchar(50),
Group_Name_ varchar(200),
Link_Left_ decimal,
Link_Right_ decimal,
Under_Group_ decimal,
IsPrimary_ varchar(1),
CanDelete_ varchar(1),
UserId_ decimal)
Begin 
 if  Account_Group_Id_>0
 THEN 
 UPDATE Account_Group set Account_Group_Id = Account_Group_Id_ ,
Primary_Id = Primary_Id_ ,
Group_Code = Group_Code_ ,
Group_Name = Group_Name_ ,
Link_Left = Link_Left_ ,
Link_Right = Link_Right_ ,
Under_Group = Under_Group_ ,
IsPrimary = IsPrimary_ ,
CanDelete = CanDelete_ ,
UserId = UserId_  Where Account_Group_Id=Account_Group_Id_ ;
 ELSE 
 SET Account_Group_Id_ = (SELECT  COALESCE( MAX(Account_Group_Id ),0)+1 FROM Account_Group); 
 INSERT INTO Account_Group(Account_Group_Id ,
Primary_Id ,
Group_Code ,
Group_Name ,
Link_Left ,
Link_Right ,
Under_Group ,
IsPrimary ,
CanDelete ,
UserId ,
DeleteStatus ) values (Account_Group_Id_ ,
Primary_Id_ ,
Group_Code_ ,
Group_Name_ ,
Link_Left_ ,
Link_Right_ ,
Under_Group_ ,
IsPrimary_ ,
CanDelete_ ,
UserId_ ,
false);
 End If ;
 select Account_Group_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Agent`( In Client_Accounts_Id_ decimal,
Account_Group_Id_ decimal,Client_Accounts_Code_ varchar(50),Client_Accounts_Name_ varchar(500),
Client_Accounts_No_ varchar(50),Address1_ varchar(250),Address2_ varchar(250),
Address3_ varchar(250),Address4_ varchar(250),PinCode_ varchar(50),StateCode_ varchar(50),
GSTNo_ varchar(50) ,PanNo_ varchar(50),State_ varchar(1000),Country_ varchar(1000),
Phone_ varchar(50),Mobile_ varchar(50),Email_ varchar(200),Opening_Balance_ decimal,
Description1_ varchar(1000),UserId_ decimal,LedgerInclude_ varchar(50),CanDelete_ varchar(2),
Commision_ decimal,Opening_Type_ int,Employee_Id_ decimal(18,0))
Begin 
declare Entry_Date_ datetime;
set Entry_Date_=(SELECT CURRENT_DATE());
 if  Client_Accounts_Id_>0
 THEN 
 UPDATE Client_Accounts set 
Account_Group_Id = Account_Group_Id_ ,Client_Accounts_Code = Client_Accounts_Code_ ,
Client_Accounts_Name = Client_Accounts_Name_ ,Client_Accounts_No = Client_Accounts_No_ ,
Address1 = Address1_ ,Address2 = Address2_ ,Address3 = Address3_ ,Address4 = Address4_ ,
PinCode = PinCode_ ,StateCode=StateCode_,GSTNo =GSTNo_,PanNo =PanNo_,
State = State_ ,Country = Country_ ,Phone = Phone_ ,Mobile = Mobile_ ,Email = Email_ ,
Opening_Balance = Opening_Balance_ ,Description1 = Description1_ ,Entry_Date = Entry_Date_ ,
UserId = UserId_ ,LedgerInclude = LedgerInclude_ ,CanDelete = CanDelete_ ,
Commision = Commision_ ,Opening_Type=Opening_Type_ ,Employee_Id=Employee_Id_ 
Where Client_Accounts_Id=Client_Accounts_Id_ ;
 ELSE 
 SET Client_Accounts_Id_ = (SELECT  COALESCE( MAX(Client_Accounts_Id ),0)+1 FROM Client_Accounts); 
 INSERT INTO Client_Accounts(Client_Accounts_Id ,Account_Group_Id ,Client_Accounts_Code ,
Client_Accounts_Name ,Client_Accounts_No ,Address1 ,Address2 ,Address3 ,Address4 ,PinCode ,
StateCode,GSTNo,PanNo, State ,Country ,Phone ,Mobile ,Email ,Opening_Balance ,Description1 ,
Entry_Date ,UserId ,LedgerInclude ,CanDelete ,Commision ,Opening_Type,Employee_Id,DeleteStatus ) 
values (Client_Accounts_Id_ ,Account_Group_Id_ ,Client_Accounts_Code_ ,Client_Accounts_Name_ ,
Client_Accounts_No_ ,Address1_ ,Address2_ ,Address3_ ,Address4_ ,PinCode_ ,
StateCode_,GSTNo_,PanNo_, State_ ,Country_ ,Phone_ ,Mobile_ ,Email_ ,Opening_Balance_ ,Description1_ ,
Entry_Date_ ,UserId_ ,LedgerInclude_ ,CanDelete_ ,Commision_ ,Opening_Type_,Employee_Id_,false);
	#set Client_Accounts_Id_=(SELECT LAST_INSERT_ID());
 End If ;
 select Client_Accounts_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Branch`( In Branch_Id_ int,Branch_Name_ varchar(50),
Address_ varchar(50),Location_ varchar(50),District_ varchar(50),State_ varchar(50),
Country_ varchar(50),PinCode_ varchar(50),Phone_Number_ varchar(50),Email_ varchar(50),
Branch_Code_ varchar(10),Company_ int,Branch_Department JSON)
Begin 

DECLARE Department_Id_ int;
DECLARE i int  DEFAULT 0;

    DECLARE exit handler for sqlexception
BEGIN
GET DIAGNOSTICS CONDITION 1
@p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
SELECT @p2 as MESSAGE_TEXT,@p1 as RETURNED_SQLSTATE  ;
ROLLBACK;
END;
    DECLARE exit handler for sqlwarning
BEGIN
GET DIAGNOSTICS CONDITION 1
@p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
SELECT @p2 as MESSAGE_TEXT,@p1 as RETURNED_SQLSTATE  ;
ROLLBACK;
END;
    START TRANSACTION;

if  Branch_Id_>0
	THEN 
	delete from Branch_Department where Branch_id=Branch_Id_;
	UPDATE Branch 
	SET 
	Branch_Id = Branch_Id_,Branch_Name = Branch_Name_,Address = Address_,Location = Location_,
	District = District_,State = State_,Country = Country_,PinCode = PinCode_,
	Phone_Number = Phone_Number_,Email = Email_,Branch_Code = Branch_Code_,Company=Company_
	WHERE
	Branch_Id = Branch_Id_;
	ELSE 
	SET Branch_Id_ = (SELECT  COALESCE( MAX(Branch_Id ),0)+1 FROM Branch); 
	INSERT INTO Branch(Branch_Id ,Branch_Name ,Address ,Location ,District ,State ,Country ,PinCode ,
	Phone_Number ,Email ,Branch_Code ,Company,Is_Delete )
	values (Branch_Id_ ,Branch_Name_ ,Address_ ,Location_ ,District_ ,State_ ,Country_ ,PinCode_ ,
	Phone_Number_ ,Email_ ,Branch_Code_ ,Company_,false);
End If ;

WHILE i < JSON_LENGTH(Branch_Department) DO
	SELECT JSON_UNQUOTE(JSON_EXTRACT(Branch_Department,CONCAT('$[',i,'].Department_Id'))) INTO Department_Id_;
	INSERT INTO Branch_Department(Branch_Id,Department_Id,Is_Delete )
	values (Branch_Id_ ,Department_Id_,false);  
	SELECT i + 1 INTO i;
END WHILE;     
COMMIT;

SELECT Branch_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Client_Accounts`( In Client_Accounts_Id_ decimal,
Account_Group_Id_ decimal,Client_Accounts_Code_ varchar(50),Client_Accounts_Name_ varchar(500),
Client_Accounts_No_ varchar(50),Address1_ varchar(250),Address2_ varchar(250),
Address3_ varchar(250),Address4_ varchar(250),PinCode_ varchar(50),StateCode_ varchar(50),
GSTNo_ varchar(50) ,PanNo_ varchar(50),State_ varchar(1000),Country_ varchar(1000),
Phone_ varchar(50),Mobile_ varchar(50),Email_ varchar(200),Opening_Balance_ decimal,
Description1_ varchar(1000),UserId_ decimal,LedgerInclude_ varchar(50),CanDelete_ varchar(2),
Commision_ decimal,Opening_Type_ int,Employee_Id_ decimal(18,0))
Begin 
declare Entry_Date_ datetime;
set Entry_Date_=(SELECT CURRENT_DATE());
 if  Client_Accounts_Id_>0
 THEN 
 UPDATE Client_Accounts set 
Account_Group_Id = Account_Group_Id_ ,Client_Accounts_Code = Client_Accounts_Code_ ,
Client_Accounts_Name = Client_Accounts_Name_ ,Client_Accounts_No = Client_Accounts_No_ ,
Address1 = Address1_ ,Address2 = Address2_ ,Address3 = Address3_ ,Address4 = Address4_ ,
PinCode = PinCode_ ,StateCode=StateCode_,GSTNo =GSTNo_,PanNo =PanNo_,
State = State_ ,Country = Country_ ,Phone = Phone_ ,Mobile = Mobile_ ,Email = Email_ ,
Opening_Balance = Opening_Balance_ ,Description1 = Description1_ ,Entry_Date = Entry_Date_ ,
UserId = UserId_ ,LedgerInclude = LedgerInclude_ ,CanDelete = CanDelete_ ,
Commision = Commision_ ,Opening_Type=Opening_Type_ ,Employee_Id=Employee_Id_ 
Where Client_Accounts_Id=Client_Accounts_Id_ ;
 ELSE 
 SET Client_Accounts_Id_ = (SELECT  COALESCE( MAX(Client_Accounts_Id ),0)+1 FROM Client_Accounts); 
 INSERT INTO Client_Accounts(Client_Accounts_Id ,Account_Group_Id ,Client_Accounts_Code ,
Client_Accounts_Name ,Client_Accounts_No ,Address1 ,Address2 ,Address3 ,Address4 ,PinCode ,
StateCode,GSTNo,PanNo, State ,Country ,Phone ,Mobile ,Email ,Opening_Balance ,Description1 ,
Entry_Date ,UserId ,LedgerInclude ,CanDelete ,Commision ,Opening_Type,Employee_Id,DeleteStatus ) 
values (Client_Accounts_Id_ ,Account_Group_Id_ ,Client_Accounts_Code_ ,Client_Accounts_Name_ ,
Client_Accounts_No_ ,Address1_ ,Address2_ ,Address3_ ,Address4_ ,PinCode_ ,
StateCode_,GSTNo_,PanNo_, State_ ,Country_ ,Phone_ ,Mobile_ ,Email_ ,Opening_Balance_ ,Description1_ ,
Entry_Date_ ,UserId_ ,LedgerInclude_ ,CanDelete_ ,Commision_ ,Opening_Type_,Employee_Id_,false);
	#set Client_Accounts_Id_=(SELECT LAST_INSERT_ID());
 End If ;
 select Client_Accounts_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Company`( In Company_ JSON, Company_value_ int)
Begin 
DECLARE Company_Id_ int;DECLARE companyname_ varchar(45);DECLARE Phone1_ varchar(45);
DECLARE Phone2_ varchar(45);DECLARE Mobile_ varchar(45);DECLARE Website_ varchar(500);
DECLARE Email_ varchar(500);DECLARE Address1_ varchar(1000);
DECLARE Address2_ varchar(1000);DECLARE Address3_ varchar(45);DECLARE Logo_ varchar(45);
#DECLARE i int  DEFAULT 0;
DECLARE exit handler for sqlexception
BEGIN
	GET DIAGNOSTICS CONDITION 1
	@p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
	SELECT @p2 AS MESSAGE_TEXT, @p1 AS RETURNED_SQLSTATE;
	ROLLBACK;
END;
    DECLARE exit handler for sqlwarning
BEGIN
	GET DIAGNOSTICS CONDITION 1
	@p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
	SELECT @p2 AS MESSAGE_TEXT, @p1 AS RETURNED_SQLSTATE;
	ROLLBACK;
END;
    START TRANSACTION;
   # delete from Company where Company_Id =1;
if(Company_value_>0) then
	SELECT JSON_UNQUOTE (JSON_EXTRACT(Company_,('$.Company_Id'))) INTO Company_Id_;   
	SELECT JSON_UNQUOTE (JSON_EXTRACT(Company_,('$.companyname'))) INTO companyname_;
	SELECT JSON_UNQUOTE (JSON_EXTRACT(Company_,('$.Phone1'))) INTO Phone1_;
	SELECT JSON_UNQUOTE (JSON_EXTRACT(Company_,('$.Phone2'))) INTO Phone2_;
	SELECT JSON_UNQUOTE (JSON_EXTRACT(Company_,('$.Mobile'))) INTO Mobile_;
	SELECT JSON_UNQUOTE (JSON_EXTRACT(Company_,('$.Website'))) INTO Website_;
	SELECT JSON_UNQUOTE (JSON_EXTRACT(Company_,('$.Email'))) INTO Email_;
	SELECT JSON_UNQUOTE (JSON_EXTRACT(Company_,('$.Address1'))) INTO Address1_;
	SELECT JSON_UNQUOTE (JSON_EXTRACT(Company_,('$.Address2'))) INTO Address2_;
	SELECT JSON_UNQUOTE (JSON_EXTRACT(Company_,('$.Address3'))) INTO Address3_;
	SELECT JSON_UNQUOTE (JSON_EXTRACT(Company_,('$.Logo'))) INTO  Logo_;
	if( Company_Id_>0 )
	then
		if Logo_<>'' && Logo_<>'undefined' then
			UPDATE Company set Logo = Logo_ Where Company_Id=Company_Id_ ;
		end if;
		UPDATE Company set Company_Id = Company_Id_ ,companyname = companyname_ ,Phone1 = Phone1_ ,Phone2 = Phone2_ ,
		Mobile = Mobile_ ,Website = Website_ ,Email = Email_,Address1 = Address1_ ,Address2 = Address2_ ,Address3 = Address3_
		Where Company_Id = Company_Id_ ;
	 ELSE 
		SET Company_Id_ = (SELECT  COALESCE( MAX(Company_Id ),0)+1 FROM Company); 
		INSERT INTO Company(Company_Id ,companyname ,Phone1 ,Phone2 ,Mobile ,Website,Email,
		Address1,
		Address2,
		Address3,
		Logo,
		Is_Delete ) values (1 ,
		companyname_ ,
		Phone1_ ,
		Phone2_ ,
		Mobile_ ,
		Website_ ,
		Email_ ,
		Address1_ ,
		Address2_ ,
		Address3_ ,
		Logo_,
		false);
	end if;
end if;
commit;
 select Company_Id_;
  End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Country`( In Country_Id_ int,
Country_Name_ varchar(50))
Begin 
 if  Country_Id_>0
 THEN 
 UPDATE Country set Country_Id = Country_Id_ ,
Country_Name = Country_Name_  Where Country_Id=Country_Id_ ;
 ELSE 
 SET Country_Id_ = (SELECT  COALESCE( MAX(Country_Id ),0)+1 FROM Country); 
 INSERT INTO Country(Country_Id ,
Country_Name,DeleteStatus ) values (Country_Id_ ,
Country_Name_,false );
 End If ;
 select Country_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Course`( In Course_Id_ int,
Course_Name_ varchar(50),
Subject_Id_ int,
Sub_Section_Id_ int,
Duration_Id_ int,
Level_Id_ int,
Ielts_Minimum_Score_ int,
Internship_Id_ int,
Notes_ varchar(500),
Details_ varchar(500),
Application_Fees_ int,
Tution_Fees_ varchar(200) ,
Entry_Requirement_ varchar(500),
Living_Expense_ varchar(100),
Work_Experience_ varchar(500),
Registration_Fees_ varchar(45) ,
Date_Charges_ varchar(45) ,
Bank_Statements_ varchar(45) ,
Insurance_ varchar(45) ,
VFS_Charges_ varchar(45) ,
Apostille_ varchar(45) ,
Other_Charges_ varchar(45),
IELTS_Name_ varchar(50),
Intake_Name_ varchar(200),
University_Id_ int,
Country_Id_ int,Tag_ varchar(2000), Intake_Data_ json
)
Begin 

Declare Intake_Id_ int; Declare Intake_Status_ varchar(10);Declare Intake_Selection_ varchar(10);Declare i int default 0;
Declare Ielts_Id_ int;
 Declare Duration_Name_ varchar(50);
 Declare IELTS_ varchar(50);
if  Course_Id_>0
 THEN 
 UPDATE Course set Course_Id = Course_Id_ ,
Course_Name = Course_Name_ ,
Subject_Id = Subject_Id_ ,
Sub_Section_Id = Sub_Section_Id_,
Duration_Id = Duration_Id_ ,
Level_Id = Level_Id_ ,
Ielts_Minimum_Score = Ielts_Minimum_Score_ ,
Internship_Id = Internship_Id_ ,
Notes = Notes_ ,
Details = Details_ ,
Application_Fees = Application_Fees_ ,
Tution_Fees=Tution_Fees_,
Entry_Requirement=Entry_Requirement_,
Living_Expense=Living_Expense_,
Work_Experience=Work_Experience_ ,
Registration_Fees =Registration_Fees_,
Date_Charges=Date_Charges_ ,
Bank_Statements =Bank_Statements_ ,
Insurance=Insurance_  ,
VFS_Charges=VFS_Charges_  ,
Apostille=Apostille_ ,
Other_Charges=Other_Charges_ ,
IELTS_Name=IELTS_Name_,
Intake_Name=Intake_Name_,
University_Id = University_Id_ ,
Country_Id = Country_Id_,
Tag=Tag_  Where Course_Id=Course_Id_ ;
Delete from course_intake where Course_Id=Course_Id_;
 
 ELSE 
 SET Course_Id_ = (SELECT  COALESCE( MAX(Course_Id ),0)+1 FROM Course); 
 SET Duration_Name_=(Select Duration_Name from duration where Duration_Id = Duration_Id_ );
 #SET IELTS_=(Select Ielts_Name from ielts where Minimum_Score = Ielts_Minimum_Score_ );
 INSERT INTO Course(Course_Id ,
Course_Name ,
Subject_Id ,
Sub_Section_Id ,
Duration_Id ,
Level_Id ,
Ielts_Minimum_Score ,
Internship_Id ,
Notes ,
Details ,
Application_Fees ,
Tution_Fees,
Entry_Requirement,
Living_Expense,
Work_Experience,
Registration_Fees, 
Date_Charges ,
Bank_Statements , 
Insurance,
VFS_Charges , 
Apostille ,
Other_Charges,
IELTS_Name,
Intake_Name,
Duration,
University_Id ,
Country_Id,Tag,Course_Status,DeleteStatus ) values (Course_Id_ ,
Course_Name_ ,
Subject_Id_ ,
Sub_Section_Id_ ,
Duration_Id_ ,
Level_Id_ ,
Ielts_Minimum_Score_ ,
Internship_Id_ ,
Notes_ ,
Details_ ,
Application_Fees_ ,
Tution_Fees_  ,
Entry_Requirement_ ,
Living_Expense_ ,
Work_Experience_ ,
Registration_Fees_, 
Date_Charges_ ,
Bank_Statements_ , 
Insurance_,
VFS_Charges_ , 
Apostille_ ,
Other_Charges_,
IELTS_Name_,
Intake_Name_,
Duration_Name_,
University_Id_ ,
Country_Id_,Tag_,1,false );
 End If ;
 

	#delete from temptable; 

	WHILE i < JSON_LENGTH(Intake_Data_) DO
		SELECT JSON_UNQUOTE (JSON_EXTRACT(Intake_Data_,CONCAT('$[',i,'].Intake_Id'))) INTO Intake_Id_;
        SELECT JSON_UNQUOTE (JSON_EXTRACT(Intake_Data_,CONCAT('$[',i,'].Intake_Status'))) INTO Intake_Status_;
		SELECT JSON_UNQUOTE (JSON_EXTRACT(Intake_Data_,CONCAT('$[',i,'].Intake_Selection'))) INTO Intake_Selection_;	
		#insert into temptable values(i,Intake_Selection_);
		if Intake_Selection_='true'
		then
			if Intake_Status_='true'
			then
				set Intake_Status_=1;
			else
				set Intake_Status_=0;
			end if;
			INSERT INTO course_intake(Course_Id,Intake_Id,Intake_Status) values(Course_Id_,Intake_Id_,Intake_Status_);
		end if;
	set i=i+1;
	End While;

 select  Course_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Course_Import`( In Course_Details json)
Begin 
Declare  Course_Details_Id_ int; Declare i int;
Declare Course_Id_ int;Declare Course_Name_ varchar(50) ;Declare Course_Code_ varchar(10);Declare Subject_Id_ int ;Declare Duration_Id_ int ;Declare Level_Id_ int ;
Declare Ielts_Minimum_Score_ int ;Declare Internship_Id_ int ;Declare Notes_ varchar(500) ;Declare Details_ varchar(500) ;Declare Application_Fees_ int ;Declare University_Id_ int ;
Declare Country_Id_ int ;Declare DeleteStatus_ tinyint;Declare Subject_Name_ varchar(150);Declare Duration_Name_ varchar(50); Declare Level_Detail_Name_ varchar(50);
Declare Minimum_Score_ int; Declare Internship_Name_ varchar(50); Declare University_Name_ varchar(50); Declare Country_Name_ varchar(50); Declare Intake_Name_ varchar(50);
Declare Level_Detail_Id_ int; Declare Ielts_Id_ int; Declare Import_Master_Id_ int;Declare Entry_Date_  tinyint; Declare Intake_Id_ int;Declare Tag_ varchar(2000);
Declare intake_temp1_ varchar(100);Declare intake_temp2_ varchar(100);Declare intake_length_ int; declare Intake_main_length int;
Declare j int default 1;
Declare Tution_Fees_ varchar(200);Declare Entry_Requirement_ varchar(500); Declare Living_Expense_ varchar(100);Declare Work_Experience_ varchar(500);
Declare Registration_Fees_ varchar(200);Declare Date_Charges_ varchar(500); Declare Bank_Statements_ varchar(100);Declare Insurance_ varchar(500);
Declare VFS_Charges_ varchar(500);Declare Other_Charges_ varchar(500);
Declare Apostille_ varchar(500);

Declare Course_Status int;
Set i=0;
SET import_master_id_ = (SELECT  COALESCE( MAX(import_master_id ),0)+1 FROM import_master);    
delete from data_log_;
insert into import_master(Import_Master_Id,Entry_Date)values(Import_Master_Id_,now());
WHILE i < JSON_LENGTH(Course_Details) DO
	SELECT JSON_UNQUOTE (JSON_EXTRACT(Course_Details,CONCAT('$[',i,'].Course'))) INTO Course_Name_;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Course_Details,CONCAT('$[',i,'].Code'))) INTO Course_Code_;
	SELECT JSON_UNQUOTE (JSON_EXTRACT(Course_Details,CONCAT('$[',i,'].Subject'))) INTO Subject_Name_;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Course_Details,CONCAT('$[',i,'].Duration'))) INTO Duration_Name_;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Course_Details,CONCAT('$[',i,'].Level'))) INTO Level_Detail_Name_;    
	SELECT JSON_UNQUOTE (JSON_EXTRACT(Course_Details,CONCAT('$[',i,'].Ielts'))) INTO Minimum_Score_;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Course_Details,CONCAT('$[',i,'].Internship'))) INTO Internship_Name_;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Course_Details,CONCAT('$[',i,'].Notes'))) INTO Notes_;
	SELECT JSON_UNQUOTE (JSON_EXTRACT(Course_Details,CONCAT('$[',i,'].Details'))) INTO Details_;
	SELECT JSON_UNQUOTE (JSON_EXTRACT(Course_Details,CONCAT('$[',i,'].Fees'))) INTO Application_Fees_;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Course_Details,CONCAT('$[',i,'].University'))) INTO University_Name_;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Course_Details,CONCAT('$[',i,'].Country'))) INTO Country_Name_;
	SELECT JSON_UNQUOTE (JSON_EXTRACT(Course_Details,CONCAT('$[',i,'].Intake'))) INTO Intake_Name_;
	SELECT JSON_UNQUOTE (JSON_EXTRACT(Course_Details,CONCAT('$[',i,'].Tag'))) INTO Tag_;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Course_Details,CONCAT('$[',i,'].Tution_Fees'))) INTO Tution_Fees_;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Course_Details,CONCAT('$[',i,'].Entry_Requirement'))) INTO Entry_Requirement_;
	SELECT JSON_UNQUOTE (JSON_EXTRACT(Course_Details,CONCAT('$[',i,'].Living_Expense'))) INTO Living_Expense_;
	SELECT JSON_UNQUOTE (JSON_EXTRACT(Course_Details,CONCAT('$[',i,'].Work_Experience'))) INTO Work_Experience_;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Course_Details,CONCAT('$[',i,'].Registration_Fees'))) INTO Registration_Fees_;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Course_Details,CONCAT('$[',i,'].Date_Charges'))) INTO Date_Charges_;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Course_Details,CONCAT('$[',i,'].Bank_Statements'))) INTO Bank_Statements_;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Course_Details,CONCAT('$[',i,'].Insurance'))) INTO Insurance_;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Course_Details,CONCAT('$[',i,'].VFS_Charges'))) INTO VFS_Charges_;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Course_Details,CONCAT('$[',i,'].Apostille'))) INTO Apostille_;
     SELECT JSON_UNQUOTE (JSON_EXTRACT(Course_Details,CONCAT('$[',i,'].Other_Charges'))) INTO Other_Charges_;
   
    #insert into db_logs_ (id,Description) values(0,Intake_Name_); 
    
    
	set subject_id_ =(select COALESCE( MAX(subject_id ),0)  from subject where subject_name=Subject_Name_);
    if(subject_id_ =0)
    then
		SET subject_id_ = (SELECT  COALESCE( MAX(subject_id ),0)+1 FROM subject);    
		insert into subject values(subject_id_,Subject_Name_,1,0);
    end if;    
	set duration_id_ =(select  COALESCE( MAX(duration_id ),0 ) from duration where duration_name=Duration_Name_);
    if(duration_id_ =0)
    then
		SET duration_id_ = (SELECT  COALESCE( MAX(duration_id ),0)+1 FROM duration);    
		insert into duration values(duration_id_,Duration_Name_,1,0);
    end if;    
	set level_detail_id_ =(select COALESCE( MAX(level_detail_id ),0) from level_detail where level_detail_name=Level_Detail_Name_);
    if(level_detail_id_ =0)
    then
		SET level_detail_id_ = (SELECT  COALESCE( MAX(level_detail_id ),0)+1 FROM level_detail);    
		insert into level_detail values(level_detail_id_,Level_Detail_Name_,0);
    end if;        
	set ielts_id_ =(select COALESCE( MAX(ielts_id ),0) from ielts where  Minimum_Score_>=Minimum_Score  &&  Minimum_Score_<= Maximum_Score);
    if(ielts_id_ =0)
    then
		SET ielts_id_ = (SELECT  COALESCE( MAX(ielts_id ),0)+1 FROM ielts);    
		insert into ielts values(ielts_id_,Minimum_Score_,Minimum_Score_,Minimum_Score_,0);
    end if;             
	set internship_id_ =(select COALESCE( MAX(internship_id ),0) from internship where internship_name=Internship_Name_);
    if(internship_id_ =0)
    then
		SET internship_id_ = (SELECT  COALESCE( MAX(internship_id ),0)+1 FROM internship);    
		insert into internship values(internship_id_,Internship_Name_,0);
    end if;        
	set university_id_ =(select COALESCE( MAX(university_id ),0) from university where university_name=University_Name_);
    if(university_id_ =0)
    then
		SET university_id_ = (SELECT  COALESCE( MAX(university_id ),0)+1 FROM university);    
		insert into university (University_Id,University_Name,DeleteStatus) values(university_id_,University_Name_,0);
    end if;
    
	set country_id_ =(select COALESCE( MAX(country_id ),0) from country where country_name=Country_Name_);
    if(country_id_ =0)
    then
		SET country_id_ = (SELECT  COALESCE( MAX(country_id ),0)+1 FROM country);    
		insert into country values(country_id_,Country_Name_,0);
    end if; 
    
  SET Course_Id_ = (SELECT  COALESCE( MAX(Course_Id ),0)  FROM Course where Course_Name=Course_name_ and  Country_Id=Country_Id_ and University_Id=University_Id_);      
      if(Course_Id_ >0)
    then
		update course  set Course_name=Course_name_ ,Course_Code=Course_Code_,Subject_Id=Subject_Id_,Duration_Id=Duration_Id_,Level_Id=Level_Detail_Id_,
        Ielts_Minimum_Score=ielts_id_,Internship_Id=Internship_Id_,Notes=Notes_,Details=Details_,Application_Fees=Application_Fees_,
        University_Id=University_Id_,Country_Id=Country_Id_, Tag=Tag_ where Course_Id =Course_Id_;
 else
		SET Course_Id_ = (SELECT  COALESCE( MAX(Course_Id ),0)+1 FROM Course);    
		INSERT INTO Course(Course_Id,Course_Name,Course_Code,University_Id,Level_Id,Subject_Id,Duration_Id,Country_Id,Details,Tution_Fees,Work_Experience,Application_Fees,Entry_Requirement,Duration,Living_Expense,Ielts_Minimum_Score,IELTS_Name,Internship_Id,Notes,Tag,Intake_Name,Course_Status,DeleteStatus,
        Registration_Fees,Date_Charges,Bank_Statements,Insurance,VFS_Charges,Apostille,Other_Charges)
		values (Course_Id_,Course_Name_,Course_Code_,University_Id_,Level_Detail_Id_,Subject_Id_,Duration_Id_,Country_Id_,Details_,Tution_Fees_,Work_Experience_,Application_Fees_,Entry_Requirement_,Duration_Name_,Living_Expense_,ielts_id_,Minimum_Score_,Internship_Id_,Notes_,Tag_,Intake_Name_,1,false
        ,Registration_Fees_,Date_Charges_,Bank_Statements_,Insurance_,VFS_Charges_,Apostille_,Other_Charges_);  
	
end if;       
	delete from course_intake where Course_Id=course_Id_; 
	do_this:
	while j>0 do
		SET Intake_main_length = LENGTH(Intake_Name_);
		set Intake_temp1_ =(SELECT SUBSTRING_INDEX(Intake_Name_, ',',1));
		#insert into data_log_ (id,Description_) values(i,Intake_temp1_); 
        set intake_id_ =(select COALESCE( MAX(intake_id ),0) from intake where intake_name=Intake_temp1_);
		if(intake_id_ =0)
		then
			SET intake_id_ = (SELECT  COALESCE( MAX(intake_id ),0)+1 FROM intake);    
			insert into intake values(intake_id_,Intake_temp1_,0);
		end if; 
        insert into course_intake(Course_Id,Intake_Id,Intake_Status)values(Course_Id_,Intake_Id_,1);
		SET intake_length_ = LENGTH(Intake_temp1_);
        #insert into data_log_ (id,Description_) values(i+10,intake_length_); 
		SET Intake_Name_ = MID(Intake_Name_, intake_length_+2, Intake_main_length);
        set j=length(Intake_main_length);
        #insert into data_log_ (id,Description_) values(i,Intake_Name_); 
        #insert into data_log_ (id,Description_) values(i+11,j); 
        #insert into data_log_ (id,Description_) values(Intake_Name_,Intake_Name_); 
		IF Intake_Name_ = NULL || Intake_Name_ = '' THEN
			set j=0;
		END IF;
	END while;
	set j=1;
	INSERT INTO import_detail(Import_Master_Id,Course_Id)values(Import_Master_Id_,Course_Id_);    
    
	SELECT i + 1 INTO i;       
END WHILE; 
#insert into data_log_ (id,Description_) values('kk1','k1'); 
 select  import_master_id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Department`( In Department_Id_ int,
Department_Name_ varchar(50),
FollowUp_ TInyint,
Status_ varchar(50),
Department_Order_ int,
Color_ varchar(50),
Status_Selection JSON)
Begin 
 DECLARE Status_Id_ int;
DECLARE i int  DEFAULT 0;
	
    DECLARE exit handler for sqlexception
BEGIN
GET DIAGNOSTICS CONDITION 1
@p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
SELECT @p2 as MESSAGE_TEXT,@p1 as RETURNED_SQLSTATE  ;
ROLLBACK;
END;
    DECLARE exit handler for sqlwarning
BEGIN
GET DIAGNOSTICS CONDITION 1
@p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
SELECT @p2 as MESSAGE_TEXT,@p1 as RETURNED_SQLSTATE  ;
ROLLBACK;
END;
    START TRANSACTION;
    
 if  Department_Id_>0
  THEN 
	delete from Status_Selection where Department_Id=Department_Id_;
	UPDATE Department set Department_Id = Department_Id_ ,
	Department_Name = Department_Name_ ,
	FollowUp = FollowUp_ ,
	Status = Status_ ,
	Department_Order = Department_Order_ ,
	Color = Color_  Where Department_Id=Department_Id_ ;
	ELSE 
	SET Department_Id_ = (SELECT  COALESCE( MAX(Department_Id ),0)+1 FROM Department); 
	INSERT INTO Department(Department_Id ,Department_Name ,FollowUp ,Status ,Department_Order ,
	Color ,Is_Delete ) 
	values (Department_Id_ ,Department_Name_ ,FollowUp_ ,Status_ ,Department_Order_ ,Color_ ,false);
End If ;

WHILE i < JSON_LENGTH(Status_Selection) DO
	SELECT JSON_UNQUOTE (JSON_EXTRACT(Status_Selection,CONCAT('$[',i,'].Department_Status_Id'))) INTO Status_Id_;
	INSERT INTO Status_Selection(Department_Id ,Status_Id,Is_Delete )
	values (Department_Id_ ,Status_Id_,false);  
	SELECT i + 1 INTO i;
END WHILE;     
COMMIT;
select Department_Id_;
#select Status_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Department_Status`( In Department_Status_Id_ int,
Department_Status_Name_ varchar(50),
Status_Order_ int,
Editable_ TINYINT,
Color_ varchar(50))
Begin 
 if  Department_Status_Id_>0
 THEN 
 UPDATE Department_Status set Department_Status_Id = Department_Status_Id_ ,
Department_Status_Name = Department_Status_Name_ ,
Status_Order = Status_Order_ ,
Editable = Editable_ ,
Color = Color_  Where Department_Status_Id=Department_Status_Id_ ;
 ELSE 
 SET Department_Status_Id_ = (SELECT  COALESCE( MAX(Department_Status_Id ),0)+1 FROM Department_Status); 
 INSERT INTO Department_Status(Department_Status_Id ,
Department_Status_Name ,
Status_Order ,
Editable ,
Color ,
Is_Delete ) values (Department_Status_Id_ ,
Department_Status_Name_ ,
Status_Order_ ,
Editable_ ,
Color_ ,
false);
 End If ;
 select Department_Status_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Document`( In Document_Id_ int,
Document_Name_ varchar(50))
Begin 
 if  Document_Id_>0
 THEN 
 UPDATE Document set Document_Id = Document_Id_ ,
Document_Name = Document_Name_  Where Document_Id=Document_Id_ ;
 ELSE 
 SET Document_Id_ = (SELECT  COALESCE( MAX(Document_Id ),0)+1 FROM Document); 
 INSERT INTO Document(Document_Id ,
Document_Name,DeleteStatus) values (Document_Id_ ,
Document_Name_,false );
 End If ;
 select Document_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Duration`( In Duration_Id_ int,
Duration_Name_ varchar(50))
Begin 
 if  Duration_Id_>0
 THEN 
 UPDATE Duration set Duration_Id = Duration_Id_ ,
Duration_Name = Duration_Name_  Where Duration_Id=Duration_Id_ ;
 ELSE 
 SET Duration_Id_ = (SELECT  COALESCE( MAX(Duration_Id ),0)+1 FROM Duration); 
 INSERT INTO Duration(Duration_Id ,
Duration_Name,DeleteStatus ) values (Duration_Id_ ,
Duration_Name_,false );
 End If ;
 select Duration_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Enquiry_Source`( In Enquiry_Source_Id_ int,
Enquiry_Source_Name_ varchar(45))
Begin 
 if  Enquiry_Source_Id_>0
 THEN 
 UPDATE Enquiry_Source set Enquiry_Source_Id = Enquiry_Source_Id_ ,
Enquiry_Source_Name = Enquiry_Source_Name_ Where Enquiry_Source_Id=Enquiry_Source_Id_ ;
 ELSE 
 SET Enquiry_Source_Id_ = (SELECT  COALESCE( MAX(Enquiry_Source_Id ),0)+1 FROM Enquiry_Source); 
 INSERT INTO Enquiry_Source(Enquiry_Source_Id ,
Enquiry_Source_Name,DeleteStatus) values (Enquiry_Source_Id_ ,
Enquiry_Source_Name_,false );
 End If ;
 select Enquiry_Source_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Fees`( In Fees_Id_ int,
Fees_Name_ varchar(45))
Begin 

 if  Fees_Id_>0
 THEN 
 UPDATE fees set Fees_Id = Fees_Id_ ,
Fees_Name = Fees_Name_ Where Fees_Id = Fees_Id_ ;
 ELSE 
 
 SET Fees_Id_ = (SELECT  COALESCE( MAX(Fees_Id ),0)+1 FROM fees); 
 INSERT INTO fees(Fees_Id ,
Fees_Name,DeleteStatus) values (Fees_Id_ ,
Fees_Name_,false );
 End If ;
 select Fees_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_FollowUp`( In Student_Id_ int,By_User_Id_ int,
Branch_ int,Department_ int,Status_ int,To_User_ int,Next_FollowUp_Date_ datetime)
Begin
#DECLARE Student_Id_ int;
Declare i int;
declare Student_FollowUp_Id_ int;
declare import_master_id int default 0;
declare Master_Id_ int;

Set i=0;

INSERT INTO student_followup(Student_Id ,Entry_Date,Next_FollowUp_Date,FollowUp_Difference,Department ,Status ,User_Id ,Branch,By_User_Id,FollowUp_Type ,DeleteStatus,FollowUP_Time,Actual_FollowUp_Date)
values (Student_Id_ ,Now(),Next_FollowUp_Date_,0,Department_ ,Status_ ,To_User_ ,Branch_,By_User_Id_,1,false,Now(),Now());
set Student_FollowUp_Id_ =(SELECT LAST_INSERT_ID());
Update student set Student_FollowUp_Id=Student_FollowUp_Id_ ,Next_FollowUp_Date = Next_FollowUp_Date_
where student.Student_Id=Student_Id_;          
SELECT i + 1 INTO i;      

set import_master_id=1;
select Student_Id_;
End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Intake`( In Intake_Id_ int,
Intake_Name_ varchar(50))
Begin 
 if  Intake_Id_>0
 THEN 
 UPDATE Intake set Intake_Id = Intake_Id_ ,
Intake_Name = Intake_Name_  Where Intake_Id=Intake_Id_ ;
 ELSE 
 SET Intake_Id_ = (SELECT  COALESCE( MAX(Intake_Id ),0)+1 FROM Intake); 
 INSERT INTO Intake(Intake_Id ,
Intake_Name,DeleteStatus ) values (Intake_Id_ ,
Intake_Name_,false );
 End If ;
 select Intake_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Internship`( In Internship_Id_ int,
Internship_Name_ varchar(50))
Begin 
 if  Internship_Id_>0
 THEN 
 UPDATE Internship set Internship_Id = Internship_Id_ ,
Internship_Name = Internship_Name_  Where Internship_Id=Internship_Id_ ;
 ELSE 
 SET Internship_Id_ = (SELECT  COALESCE( MAX(Internship_Id ),0)+1 FROM Internship); 
 INSERT INTO Internship(Internship_Id ,
Internship_Name,DeleteStatus ) values (Internship_Id_ ,
Internship_Name_,false );
 End If ;
 select Internship_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Level_Detail`( In Level_Detail_Id_ int,
Level_Detail_Name_ varchar(50))
Begin 
 if  Level_Detail_Id_>0
 THEN 
 UPDATE Level_Detail set Level_Detail_Id = Level_Detail_Id_ ,
Level_Detail_Name = Level_Detail_Name_  Where Level_Detail_Id=Level_Detail_Id_ ;
 ELSE 
 SET Level_Detail_Id_ = (SELECT  COALESCE( MAX(Level_Detail_Id ),0)+1 FROM Level_Detail); 
 INSERT INTO Level_Detail(Level_Detail_Id ,
Level_Detail_Name,DeleteStatus ) values (Level_Detail_Id_ ,
Level_Detail_Name_,false );
 End If ;
 select Level_Detail_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Receipt`( In Fees_Receipt_Id_ int, Fees_Id_ int,
  Entry_Date_ datetime,
  Amount_ int ,
  Description_ varchar(200),
  Student_Id_ int,
  User_Id_ int
  )
Begin 
declare Fee_Receipt_Branch_ int;declare Voucher_No_ int;
if  Fees_Receipt_Id_>0
		 THEN 
		 UPDATE fees_receipt set Fees_Receipt_Id = Fees_Receipt_Id_ ,
		 Fees_Id = Fees_Id_,
		 Entry_Date=Entry_Date_,
		 Amount=Amount_,
		 Description=Description_,
		 Student_Id=Student_Id_,
		 User_Id=User_Id_
		 Where Fees_Receipt_Id=Fees_Receipt_Id_ ;
 ELSE 
			set Fee_Receipt_Branch_=(select Branch_Id from user_details where User_Details_Id=User_Id_);
			SET Fees_Receipt_Id_ = (SELECT  COALESCE( MAX(Fees_Receipt_Id ),0)+1 FROM fees_receipt); 
            SET Voucher_No_ = (SELECT  COALESCE( MAX(Voucher_No ),0)+1 FROM fees_receipt); 
			INSERT INTO fees_receipt(Fees_Receipt_Id,Fees_Id ,
			Entry_Date,
			Amount,
			Description,
			Student_Id,
			User_Id,
            Actual_Entry_Date,
            Delete_Status,
            Fee_Receipt_Branch,
            Voucher_No
            ) 
            values (Fees_Receipt_Id_,Fees_Id_,Entry_Date_,Amount_,Description_,Student_Id_,User_Id_,now(),0,Fee_Receipt_Branch_,Voucher_No_);
            
            insert into transaction_history(Entry_date,User_Id,Student_Id,Description1,Description2,Description3,Transaction_type)
            values (Entry_date_,User_Id_,Student_Id_,Description_,Description_,Description_,0);
			
 end if;
  select Fees_Receipt_Id_;
 end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Remarks`( In Remarks_Id_ int,
Remarks_Name_ varchar(50))
Begin 
 if  Remarks_Id_>0
 THEN 
 UPDATE Remarks set Remarks_Id = Remarks_Id_ ,
Remarks_Name = Remarks_Name_  Where Remarks_Id=Remarks_Id_ ;
 ELSE 
 SET Remarks_Id_ = (SELECT  COALESCE( MAX(Remarks_Id ),0)+1 FROM Remarks); 
 INSERT INTO Remarks(Remarks_Id ,
Remarks_Name,DeleteStatus ) values (Remarks_Id_ ,
Remarks_Name_,false );
 End If ;
 select Remarks_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Student`( In Student_ Json,Followup_ Json,Student_Value_ int,FollowUp_Value_ int
,student_document_ Json,student_document_Value_ int
)
Begin
DECLARE Student_Id_ int;declare Client_Accounts_Id_ int;declare Student_Name_ varchar(50);declare Last_Name_ varchar(50);
declare Gender_ varchar(50);declare Address1_ varchar(200);declare Address2_ varchar(50);declare Pincode_ varchar(7);
declare Email_ varchar(100);declare Alternative_Email_ varchar(100);declare Phone_Number_ varchar(25);declare Alternative_Phone_Number_ varchar(45);declare Dob_ date;declare Country_Name_ varchar(45);declare Promotional_Code_ varchar(50);
declare Student_Status_Id_ int;declare Password_ varchar(20);declare Passport_Copy_ varchar(100);declare IELTS_ varchar(100);declare Enquiry_Source_Id_ int;
declare Passport_Photo_ varchar(100);declare Tenth_Certificate_ varchar(100);declare Work_Experience_ varchar(100);
declare Resume_ varchar(100);declare Facebook_ varchar(45);declare Whatsapp_ varchar(45) ;
declare  File_Name_ varchar(500);declare Document_Name_ varchar(500); Declare i int default 0;
declare Passport_Copy_File_Name_ varchar(500);declare IELTS_File_Name_ varchar(500);declare Passport_Photo_File_Name_ varchar(500);
declare Tenth_Certificate_File_Name_ varchar(500) ;declare Work_Experience_File_Name_ varchar(500) ;declare Resume_File_Name_ varchar(500);
declare Document_File_Name_ varchar(500);declare Duplicate_Student_Id int;
declare Duplicate_Student_Name varchar(25); declare Duplicate_User_Name varchar(25); declare Duplicate_User_Id int;
declare Created_By_ int;declare Email_student_Id int;declare Email_Alternate_student_Id int;
declare Alternate_student_Id int;declare Whatsap_student_Id int;declare Duplicate_Email_Name varchar(50);
declare FollowUp_Count int;declare FollowUp_EntryDate datetime;declare First_FollowUp_Date datetime;
declare Visa_Submission_Date_ varchar(45);
declare Intake_ varchar(45);declare Reference_ varchar(45);declare Activity_ varchar(45);declare Visa_Outcome_ varchar(45);
declare Year_ varchar(45);declare College_University_ varchar(45);
declare Programme_Course_ varchar(45);declare Agent_ varchar(45);declare Status_Details_ varchar(45);declare Student_Remark_ varchar(45);


DECLARE exit handler for sqlexception
BEGIN
GET DIAGNOSTICS CONDITION 1
@p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
SELECT @p2 AS MESSAGE_TEXT, @p1 AS RETURNED_SQLSTATE;
ROLLBACK;
END;
    DECLARE exit handler for sqlwarning
BEGIN
GET DIAGNOSTICS CONDITION 1
@p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
SELECT @p2 AS MESSAGE_TEXT, @p1 AS RETURNED_SQLSTATE;
ROLLBACK;
END;
    START TRANSACTION;
if( Student_Value_>0) then
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Student_Id')) INTO Student_Id_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Agent_Id')) INTO Client_Accounts_Id_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Student_Name')) INTO Student_Name_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Last_Name')) INTO Last_Name_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Gender')) INTO Gender_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Address1')) INTO Address1_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Address2')) INTO Address2_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Pincode')) INTO Pincode_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Email')) INTO Email_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Alternative_Email')) INTO Alternative_Email_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Phone_Number')) INTO Phone_Number_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Alternative_Phone_Number')) INTO Alternative_Phone_Number_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Dob')) INTO Dob_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Country_Name')) INTO Country_Name_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Promotional_Code')) INTO Promotional_Code_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Student_Status_Id')) INTO Student_Status_Id_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Enquiry_Source_Id')) INTO Enquiry_Source_Id_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Password')) INTO Password_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Passport_Copy')) INTO Passport_Copy_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.IELTS')) INTO IELTS_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Passport_Photo')) INTO Passport_Photo_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Tenth_Certificate')) INTO Tenth_Certificate_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Work_Experience')) INTO Work_Experience_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Resume')) INTO Resume_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Whatsapp')) INTO Whatsapp_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Facebook')) INTO Facebook_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Passport_Copy_File_Name')) INTO Passport_Copy_File_Name_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.IELTS_File_Name')) INTO IELTS_File_Name_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Passport_Photo_File_Name')) INTO Passport_Photo_File_Name_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Tenth_Certificate_File_Name')) INTO Tenth_Certificate_File_Name_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Work_Experience_File_Name')) INTO Work_Experience_File_Name_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Resume_File_Name')) INTO Resume_File_Name_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.College_University')) INTO College_University_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Programme_Course')) INTO Programme_Course_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Intake')) INTO Intake_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Reference')) INTO Reference_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Visa_Submission_Date')) INTO Visa_Submission_Date_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Activity')) INTO Activity_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Visa_Outcome')) INTO Visa_Outcome_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Year')) INTO Year_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Agent')) INTO Agent_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Status_Details')) INTO Status_Details_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_,'$.Student_Remark')) INTO Student_Remark_;





if  Student_Id_>0 THEN

          Set Duplicate_Student_Id = (select Student_Id from Student where Student_Id != Student_Id_ and DeleteStatus=false and (Phone_Number like concat('%',Phone_Number_,'%')
        or Alternative_Phone_Number like concat('%',Phone_Number_,'%') or Whatsapp  like concat('%',Phone_Number_,'%') )  limit 1);
#insert into data_log_ values(0,Whatsapp_,Alternative_Phone_Number_);
        if Email_!="" then
set Email_student_Id= ( select Student_Id from Student where Student_Id != Student_Id_  and DeleteStatus=false  and   ( Email like concat('%',Email_,'%') or Alternative_Email  like concat('%',Email_,'%') ) limit 1);
        end if;
        if Alternative_Email_!="" then
        set Email_Alternate_student_Id= (select Student_Id from Student where Student_Id != Student_Id_ and DeleteStatus=false  and   ( Alternative_Email like concat('%',Alternative_Email_,'%') or Email  like concat('%',Alternative_Email_,'%') ) limit 1);
        end if;
         if Alternative_Phone_Number_!="" then
Set Alternate_student_Id = (select Student_Id from Student where  Student_Id != Student_Id_ and DeleteStatus=false  and  (Phone_Number like concat('%',Alternative_Phone_Number_,'%') or Alternative_Phone_Number like concat('%',Alternative_Phone_Number_,'%') or Whatsapp  like concat('%',Alternative_Phone_Number_,'%')) limit 1);
 end if;
         
      #    insert into data_log_ values(0,Alternate_student_Id,Alternative_Phone_Number_);
       
if Whatsapp_!="" then
Set Whatsap_student_Id = (select Student_Id from Student where Student_Id != Student_Id_ and DeleteStatus=false  and   (Phone_Number like concat('%',Whatsapp_,'%') or Alternative_Phone_Number like concat('%',Whatsapp_,'%') or Whatsapp  like concat('%',Whatsapp_,'%')) limit 1);
end if;
        if(Duplicate_Student_Id>0) then
set Duplicate_User_Id = (select User_Id from Student where Student_Id = Duplicate_Student_Id and DeleteStatus=false);
set Duplicate_Student_Name = (select Student_Name from Student where Student_Id = Duplicate_Student_Id and DeleteStatus=false);
set Duplicate_User_Name = (select User_Details_Name from user_details where User_Details_Id = Duplicate_User_Id and DeleteStatus=false);
SET Student_Id_ = -1;  
        elseif(Alternate_student_Id>0) then
set Duplicate_User_Id = (select User_Id from Student where Student_Id = Alternate_student_Id and DeleteStatus=false);
set Duplicate_Student_Name = (select Student_Name from Student where Student_Id = Alternate_student_Id and DeleteStatus=false);
set Duplicate_User_Name = (select User_Details_Name from user_details where User_Details_Id = Duplicate_User_Id and DeleteStatus=false);
SET Student_Id_ = -1;  
        elseif(Whatsap_student_Id>0) then
set Duplicate_User_Id = (select User_Id from Student where Student_Id = Whatsap_student_Id and DeleteStatus=false);
set Duplicate_Student_Name = (select Student_Name from Student where Student_Id = Whatsap_student_Id and DeleteStatus=false);
set Duplicate_User_Name = (select User_Details_Name from user_details where User_Details_Id = Duplicate_User_Id and DeleteStatus=false);
SET Student_Id_ = -1;                
elseif(Email_student_Id>0) then
set Duplicate_User_Id = (select User_Id from Student where Student_Id = Email_student_Id and DeleteStatus=false);
set Duplicate_Student_Name = (select Student_Name from Student where Student_Id = Email_student_Id and DeleteStatus=false);
set Duplicate_User_Name = (select User_Details_Name from user_details where User_Details_Id = Duplicate_User_Id and DeleteStatus=false);
SET Student_Id_ = -2;                
elseif(Email_Alternate_student_Id>0) then
set Duplicate_User_Id = (select User_Id from Student where Student_Id = Email_Alternate_student_Id and DeleteStatus=false);
set Duplicate_Student_Name = (select Student_Name from Student where Student_Id = Email_Alternate_student_Id and DeleteStatus=false);
set Duplicate_User_Name = (select User_Details_Name from user_details where User_Details_Id = Duplicate_User_Id and DeleteStatus=false);
SET Student_Id_ = -2;
else
UPDATE Student set Agent_Id=Client_Accounts_Id_,Student_Name = Student_Name_ ,Last_Name = Last_Name_ ,Gender = Gender_ ,
Address1 = Address1_ ,Address2 = Address2_ ,Pincode = Pincode_ ,Email = Email_ ,Alternative_Email = Alternative_Email_ ,Alternative_Phone_Number = Alternative_Phone_Number_ ,Phone_Number = Phone_Number_ ,
Dob = Dob_ ,Country_Name = Country_Name_ ,Promotional_Code = Promotional_Code_ ,Student_Status_Id = Student_Status_Id_,Enquiry_Source_Id = Enquiry_Source_Id_,Password = Password_ ,
Resume=Resume_,Whatsapp = Whatsapp_ ,Facebook = Facebook_,College_University=College_University_,Programme_Course=Programme_Course_,Intake=Intake_,Year=Year_,Reference=Reference_,
Visa_Submission_Date=Visa_Submission_Date_,Activity=Activity_,Visa_Outcome=Visa_Outcome_,Agent=Agent_,Status_Details=Status_Details_,Student_Remark=Student_Remark_
Where Student_Id=Student_Id_ ;
if Passport_Copy_!="" then
UPDATE Student set Passport_Copy=Passport_Copy_, Passport_Copy_File_Name=Passport_Copy_File_Name_ Where Student_Id=Student_Id_ ;
end if;
if Tenth_Certificate_!="" then
UPDATE Student set Tenth_Certificate=Tenth_Certificate_,Tenth_Certificate_File_Name = Tenth_Certificate_File_Name_ Where Student_Id=Student_Id_ ;
end if;
if Work_Experience_!="" then
UPDATE Student set Work_Experience=Work_Experience_ ,Work_Experience_File_Name = Work_Experience_File_Name_ Where Student_Id=Student_Id_ ;
end if;
if Passport_Photo_!="" then
UPDATE Student set Passport_Photo=Passport_Photo_,Passport_Photo_File_Name = Passport_Photo_File_Name_ Where Student_Id=Student_Id_ ;
end if;
if IELTS_!="" then
UPDATE Student set IELTS=IELTS_,IELTS_File_Name = IELTS_File_Name_ Where Student_Id=Student_Id_ ;
end if;
if Resume_!="" then
UPDATE Student set  Resume=Resume_, Resume_File_Name = Resume_File_Name_ Where Student_Id=Student_Id_ ;
end if;
end if;
ELSE
Set Duplicate_Student_Id = (select Student_Id from Student where  DeleteStatus=false and (Phone_Number like concat('%',Phone_Number_,'%')
        or Alternative_Phone_Number like concat('%',Phone_Number_,'%') or Whatsapp  like concat('%',Phone_Number_,'%') )  limit 1);
if Email_!="" then
set Email_student_Id= ( select Student_Id from Student where  DeleteStatus=false and ( Email like concat('%',Email_,'%') or Alternative_Email  like concat('%',Email_,'%') ) limit 1);
        end if;
        if Alternative_Email_!="" then
        set Email_Alternate_student_Id= (select Student_Id from Student where  DeleteStatus=false and ( Alternative_Email like concat('%',Alternative_Email_,'%') or Email  like concat('%',Alternative_Email_,'%') ) limit 1);
        end if;
         if Alternative_Phone_Number_!="" then
Set Alternate_student_Id = (select Student_Id from Student where  DeleteStatus=false and (Phone_Number like concat('%',Alternative_Phone_Number_,'%') or Alternative_Phone_Number like concat('%',Alternative_Phone_Number_,'%') or Whatsapp  like concat('%',Alternative_Phone_Number_,'%')) limit 1);
 end if;
#insert into data_log_ values(0,Alternate_student_Id,Alternative_Phone_Number_);
       if Whatsapp_!="" then
Set Whatsap_student_Id = (select Student_Id from Student where  DeleteStatus=false and  (Phone_Number like concat('%',Whatsapp_,'%') or Alternative_Phone_Number like concat('%',Whatsapp_,'%') or Whatsapp  like concat('%',Whatsapp_,'%')) limit 1);
end if;
       
         if(Duplicate_Student_Id>0) then
set Duplicate_User_Id = (select User_Id from Student where Student_Id = Duplicate_Student_Id and DeleteStatus=false );
set Duplicate_Student_Name = (select Student_Name from Student where Student_Id = Duplicate_Student_Id and DeleteStatus=false );
set Duplicate_User_Name = (select User_Details_Name from user_details where User_Details_Id = Duplicate_User_Id and DeleteStatus=false );
SET Student_Id_ = -1;  
        elseif(Alternate_student_Id>0) then
set Duplicate_User_Id = (select User_Id from Student where Student_Id = Alternate_student_Id and DeleteStatus=false );
set Duplicate_Student_Name = (select Student_Name from Student where Student_Id = Alternate_student_Id and DeleteStatus=false );
set Duplicate_User_Name = (select User_Details_Name from user_details where User_Details_Id = Duplicate_User_Id and DeleteStatus=false );
SET Student_Id_ = -1;  
        elseif(Whatsap_student_Id>0) then
set Duplicate_User_Id = (select User_Id from Student where Student_Id = Whatsap_student_Id and DeleteStatus=false );
set Duplicate_Student_Name = (select Student_Name from Student where Student_Id = Whatsap_student_Id and DeleteStatus=false );
set Duplicate_User_Name = (select User_Details_Name from user_details where User_Details_Id = Duplicate_User_Id and DeleteStatus=false );
SET Student_Id_ = -1;                
elseif(Email_student_Id>0) then
set Duplicate_User_Id = (select User_Id from Student where Student_Id = Email_student_Id and DeleteStatus=false );
set Duplicate_Student_Name = (select Student_Name from Student where Student_Id = Email_student_Id and DeleteStatus=false );
set Duplicate_User_Name = (select User_Details_Name from user_details where User_Details_Id = Duplicate_User_Id and DeleteStatus=false );
SET Student_Id_ = -2;                
elseif(Email_Alternate_student_Id>0) then
set Duplicate_User_Id = (select User_Id from Student where Student_Id = Email_Alternate_student_Id and DeleteStatus=false );
set Duplicate_Student_Name = (select Student_Name from Student where Student_Id = Email_Alternate_student_Id and DeleteStatus=false );
set Duplicate_User_Name = (select User_Details_Name from user_details where User_Details_Id = Duplicate_User_Id and DeleteStatus=false );
SET Student_Id_ = -2;
else
        SELECT JSON_UNQUOTE (JSON_EXTRACT(FollowUp_,'$.By_User_Id')) INTO Created_By_;
SET Student_Id_ = (SELECT  COALESCE( MAX(Student_Id ),0)+1 FROM Student);
INSERT INTO Student(Student_Id , Agent_Id, Entry_Date,Student_Name ,Last_Name ,Gender ,Address1 ,Address2 ,Pincode ,Email ,Alternative_Email,Phone_Number,Alternative_Phone_Number ,Dob ,Country_Name ,
Promotional_Code ,Student_Status_Id,Enquiry_Source_Id ,Password,Created_By,
Passport_Copy,IELTS,Passport_Photo,Tenth_Certificate, Work_Experience,Resume,Whatsapp,Facebook,
Passport_Copy_File_Name,IELTS_File_Name, Passport_Photo_File_Name,Tenth_Certificate_File_Name,Work_Experience_File_Name,Resume_File_Name,DeleteStatus,Is_Registered,FollowUp_Count,FollowUp_EntryDate,
Entry_Type,First_Followup_Status,First_Followup_Date,College_University,Programme_Course,Intake,Year,Reference,Visa_Submission_Date,Activity,Visa_Outcome,Agent,Status_Details,Student_Remark)
values (Student_Id_ ,Client_Accounts_Id_,now(),Student_Name_ ,Last_Name_ ,Gender_ ,Address1_ ,Address2_ ,Pincode_ ,Email_ ,Alternative_Email_,Phone_Number_ ,
Alternative_Phone_Number_,Dob_ ,
Country_Name_ ,Promotional_Code_ ,Student_Status_Id_,Enquiry_Source_Id_ ,Password_,Created_By_,
Passport_Copy_,IELTS_,Passport_Photo_,Tenth_Certificate_, Work_Experience_,Resume_,Whatsapp_,Facebook_,Passport_Copy_File_Name_,IELTS_File_Name_,
Passport_Photo_File_Name_,Tenth_Certificate_File_Name_,Work_Experience_File_Name_,Resume_File_Name_,
  false,0,0,now(),1,1,now(),College_University_,Programme_Course_,Intake_,Year_,Reference_,Visa_Submission_Date_,Activity_,Visa_Outcome_,Agent_,Status_Details_,Student_Remark_);
end if;
End If ;
 if( student_document_Value_>0) then
WHILE i < JSON_LENGTH(student_document_) DO
SELECT JSON_UNQUOTE (JSON_EXTRACT(student_document_,CONCAT('$[',i,'].File_Name'))) INTO File_Name_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(student_document_,CONCAT('$[',i,'].Document_Name'))) INTO Document_Name_;
        SELECT JSON_UNQUOTE (JSON_EXTRACT(student_document_,CONCAT('$[',i,'].Document_File_Name'))) INTO Document_File_Name_;
        insert into student_document (Student_Id,File_Name,Document_Name,Document_File_Name,DeleteStatus) values(Student_Id_,File_Name_,Document_Name_,Document_File_Name_,0);
SELECT i + 1 INTO i;      
END WHILE;
 end if;
 else
set Student_Id_=1;
 end if;
 if( FollowUp_Value_>0 && Student_Id_>0)
then
        #set Duplicate_Student_Name= "";
        CALL Save_Student_FollowUp(FollowUp_,Student_Id_);
end if;
commit;
 select Student_Id_,Duplicate_Student_Name,Duplicate_User_Name;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Student1`( In
 Student_Id_ int,
 Client_Accounts_Id_ int,
Student_Name_ varchar(50),
Last_Name_ varchar(50),
Gender_ varchar(50),
Address1_ varchar(50),
Address2_ varchar(50),
Pincode_ varchar(7),
Email_ varchar(100),
Phone_Number_ varchar(25),
Dob_ date,
Country_ int,
Promotional_Code_ varchar(50),
Student_Status_Id_ int,
Password_ varchar(20))
Begin 
 if  Student_Id_>0
 THEN 
 UPDATE Student set Student_Id = Student_Id_ ,
Agent_Id=Client_Accounts_Id_,
Student_Name = Student_Name_ ,
Last_Name = Last_Name_ ,
Gender = Gender_ ,
Address1 = Address1_ ,
Address2 = Address2_ ,
Pincode = Pincode_ ,
Email = Email_ ,
Phone_Number = Phone_Number_ ,
Dob = Dob_ ,
Country = Country_ ,
Promotional_Code = Promotional_Code_ ,
Student_Status_Id = Student_Status_Id_ ,
Password = Password_  Where Student_Id=Student_Id_ ;
 ELSE 
 SET Student_Id_ = (SELECT  COALESCE( MAX(Student_Id ),0)+1 FROM Student); 
 INSERT INTO Student(Student_Id ,
 Agent_Id,
 Entry_Date,
Student_Name ,
Last_Name ,
Gender ,
Address1 ,
Address2 ,
Pincode ,
Email ,
Phone_Number ,
Dob ,
Country ,
Promotional_Code ,
Student_Status_Id ,
Password,DeleteStatus ) values (Student_Id_ ,
Client_Accounts_Id_,
now(),
Student_Name_ ,
Last_Name_ ,
Gender_ ,
Address1_ ,
Address2_ ,
Pincode_ ,
Email_ ,
Phone_Number_ ,
Dob_ ,
Country_ ,
Promotional_Code_ ,
Student_Status_Id_ ,
Password_,false );
 End If ;
 select Student_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Student_Course`( In Student_Course_Apply_Id_ int,
Student_Id_ int,Course_Apply JSON,User_Id_ int)
BEGIN
DECLARE Course_Id_ int;declare Course_Branch_ int;
DECLARE i int  DEFAULT 0;
DECLARE exit handler for sqlexception
BEGIN
GET DIAGNOSTICS CONDITION 1
@p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
SELECT @p2 as MESSAGE_TEXT,@p1 as RETURNED_SQLSTATE  ;
ROLLBACK;
END;
   
    DECLARE exit handler for sqlwarning
BEGIN
GET DIAGNOSTICS CONDITION 1
@p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
SELECT @p2 as MESSAGE_TEXT,@p1 as RETURNED_SQLSTATE  ;
ROLLBACK;
END;
   
    START TRANSACTION;
   
if  Student_Course_Apply_Id_>0
THEN
delete from student_course_selection where Student_Course_Apply_Id=Student_Course_Apply_Id_;
UPDATE student_course_apply set Student_Id = Student_Id_
Where Student_Course_Apply_Id=Student_Course_Apply_Id_ ;
ELSE
SET Student_Course_Apply_Id_ = (SELECT  COALESCE( MAX(Student_Course_Apply_Id ),0)+1 FROM student_course_apply);
INSERT INTO student_course_apply(Student_Course_Apply_Id ,Student_Id ,Entry_Date ,Status_Id,Paid_On,Total_Course ,User_Id)
values (Student_Course_Apply_Id_ ,Student_Id_ ,now() ,1,Curdate(),JSON_LENGTH(Course_Apply),User_Id_);
End If ;
 
 WHILE i < JSON_LENGTH(Course_Apply) DO
SELECT JSON_UNQUOTE (JSON_EXTRACT(Course_Apply,CONCAT('$[',i,'].Course_Id'))) INTO Course_Id_;
INSERT INTO student_course_selection(Course_Id,Student_Course_Apply_Id )
values (Course_Id_ ,Student_Course_Apply_Id_);

SELECT i + 1 INTO i;
END WHILE;  
  COMMIT;
select student_course_selection.Student_Course_Apply_Id,Course_Name,student.Email,Student_Name,
 University_Name,Country.Country_Name,Subject_Name,Tution_Fees,Application_Fees,Entry_Requirement,
 Course.Work_Experience,Level_Detail_Name,Duration_Name,intake_Name,ielts.Ielts_Name,Details,Living_Expense,Notes,Course.Registration_Fees,
 Course.Date_Charges,Course.Bank_Statements,Course.Insurance,Course.VFS_Charges,Course.Apostille,Course.Other_Charges
 from student_course_apply
inner join student_course_selection on student_course_selection.Student_Course_Apply_Id=student_course_apply.Student_Course_Apply_Id
inner join student on student.Student_Id=student_course_apply.Student_Id
inner join Course on course.Course_Id=student_course_selection.Course_Id
inner join University on course.University_Id=University.University_Id
inner join Country on course.Country_Id=Country.Country_Id
inner join level_detail on course.Level_Id=level_detail.Level_Detail_Id
inner join duration on course.Duration_Id=duration.Duration_Id
inner join ielts on course.Ielts_Minimum_Score=ielts.Ielts_Id
inner join subject on course.Subject_Id=subject.Subject_Id
where student_course_selection.Student_Course_Apply_Id=Student_Course_Apply_Id_;

#delete from data_log_;
insert into data_log_ values(1,Student_Course_Apply_Id,0);
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Student_Document`( In Student_Id_ int,Document_Id_ int, Image_Detail_ varchar(500))
Begin 
Declare Student_Document_Id_ int;
	 SET Student_Document_Id_ = (SELECT  COALESCE( MAX(Student_Document_Id ),0)+1 FROM Student_Document); 
	 INSERT INTO Student_Document(Student_Document_Id ,Student_Id ,Entry_Date,Document_Id,File_Name,DeleteStatus,Document_File_Name ) 
	 values (Student_Document_Id_ ,Student_Id_ ,now(),Document_Id_,Image_Detail_,false ,Document_File_Name_);

 select Student_Document_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Student_FollowUp`( In FollowUp_ JSON,Student_Id_ int)
Begin 
declare Student_FollowUp_Id_ int;declare Department_ int;declare Status_ int;
declare User_Id_ int;declare By_User_Id_ int;declare Next_FollowUp_Date_ datetime;declare Remark_Id_ int;
declare Remark_ varchar(4000);declare Branch_ int;declare Stage_ int;declare Entry_Date_ datetime;
declare FollowUp_Difference_ int;declare Student_Id_J int;declare FollowUP_Time_ datetime;
declare Previous_Followup_Date_ datetime; declare FollowUp_Count_ int;
declare x int;
declare First_Followup_Status_ int;
 declare Duplicate_Student_Name varchar(25); declare Duplicate_User_Name varchar(25);
 set x=0;
SELECT JSON_UNQUOTE (JSON_EXTRACT(FollowUp_,'$.Student_Id')) INTO Student_Id_J;   
	if( Student_Id_J>0 )
		then set Student_Id_=Student_Id_J;
	end if;
SELECT JSON_UNQUOTE (JSON_EXTRACT(FollowUp_,'$.Next_FollowUp_Date')) INTO Next_FollowUp_Date_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(FollowUp_,'$.Department')) INTO Department_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(FollowUp_,'$.Status')) INTO Status_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(FollowUp_,'$.User_Id')) INTO User_Id_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(FollowUp_,'$.Branch')) INTO Branch_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(FollowUp_,'$.Remark')) INTO Remark_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(FollowUp_,'$.Remark_id')) INTO Remark_Id_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(FollowUp_,'$.By_User_Id')) INTO By_User_Id_;
set Student_FollowUp_Id_ =(SELECT Student_FollowUp_Id from student where Student_Id =Student_Id_);
set Previous_Followup_Date_ =(SELECT Next_FollowUp_Date from student where Student_Id =Student_Id_);
set FollowUp_Difference_= DATEDIFF(Previous_Followup_Date_,now() );
update student_followup set Actual_FollowUp_Date=Now(), FollowUp_Difference=FollowUp_Difference_ where Student_FollowUp_Id= Student_FollowUp_Id_ ; 

 INSERT INTO student_followup(Student_Id ,Entry_Date,Next_FollowUp_Date,FollowUp_Difference,Department ,Status ,User_Id ,Branch,Remark,Remark_Id,By_User_Id,FollowUp_Type ,
 DeleteStatus,FollowUP_Time,Actual_FollowUp_Date,Entry_Type) 
values (Student_Id_ ,Now(),Next_FollowUp_Date_,0,Department_ ,Status_ ,User_Id_ ,Branch_,Remark_,Remark_Id_,By_User_Id_,1,false,Now(),Now(),1);

set Student_FollowUp_Id_ =(SELECT LAST_INSERT_ID());
set First_Followup_Status_=(select First_Followup_Status from Student where Student_Id = Student_Id_);
if First_Followup_Status_=0 then
	Update student set Student_FollowUp_Id=Student_FollowUp_Id_ ,Department = Department_ ,Status = Status_ ,
	User_Id = User_Id_ ,By_User_Id=By_User_Id_,Next_FollowUp_Date = Next_FollowUp_Date_ ,Remark = Remark_  ,Remark_Id = Remark_Id_,
	Branch=Branch_,FollowUp_Count=x+1,First_Followup_Status=1,First_Followup_Date=now()
	where student.Student_Id=Student_Id_;
else
	Update student set Student_FollowUp_Id=Student_FollowUp_Id_ ,Department = Department_ ,Status = Status_ ,
	User_Id = User_Id_ ,By_User_Id=By_User_Id_,Next_FollowUp_Date = Next_FollowUp_Date_ ,Remark = Remark_  ,Remark_Id = Remark_Id_,
	Branch=Branch_,FollowUp_Count=x+1
	where student.Student_Id=Student_Id_;
end if;
 select Student_Id_,Duplicate_Student_Name,Duplicate_User_Name;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Student_Import`( In Student_Details json,By_User_Id_ int,Branch_ int,Department_ int,Status_ int,To_User_ int,
Enquiry_Source_ int,Next_FollowUp_Date_ datetime)
Begin
Declare i int;DECLARE Student_Id_ int;
Declare intake_temp1_ varchar(100);Declare intake_temp2_ varchar(100);Declare intake_length_ int; declare Intake_main_length int;
declare Name_ varchar(25);declare Email_ varchar(100);declare Phone_ varchar(25);declare Whatsapp_ varchar(100);
declare Address1_ varchar(200);declare Last_Name_ varchar(100);declare Address2_ varchar(100);declare Pincode_ varchar(100);
declare Alternative_Email_ varchar(100);declare Alternative_Phone_Number_ varchar(100);declare Facebook_ varchar(100);
declare Duplicate_Student_Id int;declare Duplicate_Student_Name varchar(25); declare Student_FollowUp_Id_ int;
declare Duplicate_User_Name varchar(25); declare Duplicate_User_Id int; declare import_master_id int default 0;
declare Master_Id_ int;
declare Visa_Submission_Date_ varchar(20);declare Country_Name_ varchar(45);
declare Intake_ varchar(50);declare Reference_ varchar(50);declare Activity_ varchar(50);declare Visa_Outcome_ varchar(50);
declare Year_ varchar(50);declare College_University_ varchar(50);
declare Programme_Course_ varchar(50);declare Agent_ varchar(50);declare Status_Details_ varchar(45);declare Student_Remark_ varchar(45);
#DROP TEMPORARY TABLE Duplicate_Students;
#CREATE TEMPORARY TABLE Duplicate_Students
#(
# Student_Id int PRIMARY KEY,
#    Student_Name varchar(100),
 #  Mobile varchar(100),
#    By_User_Name varchar(100)
#);
Set i=0;
#SET import_master_id_ = (SELECT  COALESCE( MAX(import_master_id ),0)+1 FROM import_master);    
delete from data_log_;
delete from Duplicate_Students;
#insert into import_master(Import_Master_Id,Entry_Date)values(Import_Master_Id_,now());
 SET Master_Id_ = (SELECT  COALESCE( MAX(Master_Id ),0)+1 FROM import_students_master);
 insert into import_students_master values(Master_Id_,By_User_Id_,Next_FollowUp_Date_);
WHILE i < JSON_LENGTH(Student_Details) DO
	SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_Details,CONCAT('$[',i,'].Name'))) INTO Name_;
	SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_Details,CONCAT('$[',i,'].Phone'))) INTO Phone_ ;
	SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_Details,CONCAT('$[',i,'].Address'))) INTO Address1_ ;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_Details,CONCAT('$[',i,'].Country'))) INTO Country_Name_ ;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_Details,CONCAT('$[',i,'].College_University'))) INTO College_University_ ;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_Details,CONCAT('$[',i,'].Programme_Course'))) INTO Programme_Course_ ;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_Details,CONCAT('$[',i,'].Intake'))) INTO Intake_ ;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_Details,CONCAT('$[',i,'].Year'))) INTO Year_ ;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_Details,CONCAT('$[',i,'].Reference'))) INTO Reference_ ;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_Details,CONCAT('$[',i,'].Visa_Submission_Date'))) INTO Visa_Submission_Date_ ;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_Details,CONCAT('$[',i,'].Activity'))) INTO Activity_ ;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_Details,CONCAT('$[',i,'].Visa_Outcome'))) INTO Visa_Outcome_ ;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_Details,CONCAT('$[',i,'].Status'))) INTO Status_Details_ ;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_Details,CONCAT('$[',i,'].Remarks'))) INTO Student_Remark_ ;
	SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_Details,CONCAT('$[',i,'].Agent'))) INTO Agent_ ;
	SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_Details,CONCAT('$[',i,'].Whatsapp'))) INTO Whatsapp_ ;
    SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_Details,CONCAT('$[',i,'].Email'))) INTO Email_ ;
  # if Whatsapp_='null' then 
  # set Whatsapp_=''; 
   #end if;
	
	if  ISNULL(Address1_) then set Address1_=''; end if;
    if  ISNULL(Country_Name_) then set Country_Name_=''; end if;
    if  ISNULL(College_University_) then set College_University_=''; end if;
    if  ISNULL(Programme_Course_) then set Programme_Course_=''; end if;
    if  ISNULL(Intake_) then set Intake_=''; end if;
    if  ISNULL(Year_) then set Year_=''; end if;
	if  ISNULL(Reference_) then set Reference_=''; end if;
    if  ISNULL(Visa_Submission_Date_) then set Visa_Submission_Date_=''; end if;
	if  ISNULL(Activity_) then set Activity_=''; end if;
    if  ISNULL(Visa_Outcome_) then set Visa_Outcome_=''; end if;
    if  ISNULL(Status_Details_) then set Status_Details_=''; end if;
    if  ISNULL(Student_Remark_) then set Student_Remark_=''; end if;
     if  ISNULL(Whatsapp_) then set Whatsapp_=''; end if;
    
    #insert into db_logs_ (id,Description) values(0,Intake_Name_);and Alternative_Phone_Number like concat('%',Phone_,'%') 
    Set Duplicate_Student_Id = (select Student_Id from Student where  Phone_Number like concat('%',Phone_,'%') limit 1);
	if(Duplicate_Student_Id>0) then
		set Duplicate_User_Id = (select User_Id from Student where Student_Id = Duplicate_Student_Id);
		set Duplicate_Student_Name = (select Student_Name from Student where Student_Id = Duplicate_Student_Id);
		set Duplicate_User_Name = (select User_Details_Name from user_details where User_Details_Id = Duplicate_User_Id);
		SET Student_Id_ = -1;
            insert into Duplicate_Students values(Duplicate_Student_Id,Duplicate_Student_Name,Phone_,Duplicate_User_Name,Master_Id_);
	else
		SET Student_Id_ = (SELECT  COALESCE( MAX(Student_Id ),0)+1 FROM Student);
           
/*INSERT INTO Student(Student_Id , Agent_Id, Entry_Date,Student_Name ,Last_Name ,Gender ,Address1 ,Address2 ,Pincode ,Email ,Alternative_Email,Phone_Number,Alternative_Phone_Number ,Dob ,Country ,
Promotional_Code ,Student_Status_Id,Enquiry_Source_Id ,Password,Created_By,
Passport_Copy,IELTS,Passport_Photo,Tenth_Certificate, Work_Experience,Resume,Whatsapp,Facebook,
Passport_Copy_File_Name,IELTS_File_Name, Passport_Photo_File_Name,Tenth_Certificate_File_Name,Work_Experience_File_Name,
Resume_File_Name,DeleteStatus,By_User_Id,Branch,Department,Status,User_Id,Next_FollowUp_Date,Is_Registered)
        values (Student_Id_,1,now(),Name_ ,'',0,Address1_,'','',Email_ ,'',Phone_ ,'',now(),0,
'',0,Enquiry_Source_,'',By_User_Id_,'','','','','','','','','','','','','','',0,
By_User_Id_,Branch_,Department_,Status_,To_User_,Next_FollowUp_Date_,0); */
		INSERT INTO Student(Student_Id , Agent_Id, Entry_Date,Student_Name ,Last_Name ,Gender ,Address1 ,Address2 ,Pincode ,Email ,Phone_Number,Dob ,Country_Name ,Promotional_Code ,Student_Status_Id,Password,
		Next_FollowUp_Date,Department,Status,User_Id, Branch,Remark,Remark_Id,By_User_Id,Passport_Copy,IELTS,Passport_Photo,
		Tenth_Certificate,Work_Experience, Resume,DeleteStatus,Enquiry_Source_Id,Alternative_Phone_Number,Alternative_Email,
		Whatsapp,Facebook,Passport_Copy_File_Name,IELTS_File_Name,Passport_Photo_File_Name,Tenth_Certificate_File_Name,
		Work_Experience_File_Name,Resume_File_Name,Is_Registered,Registered_By ,Created_By,College_University,Programme_Course,
		Intake,Year,Reference,Visa_Submission_Date,Activity,Visa_Outcome,Agent,Status_Details,Student_Remark)
		values(Student_Id_ , 1, now(),Name_ ,'' ,0 ,Address1_ ,'' ,'',Email_,Phone_,now() ,Country_Name_ ,'' ,0,'',
		Next_FollowUp_Date_,Department_,Status_,To_User_, Branch_,'',0,By_User_Id_,'','','',
		'','', '',0,Enquiry_Source_,'','',
		Whatsapp_,'','','','','','','',0,0 ,By_User_Id_,College_University_,Programme_Course_,
		Intake_,Year_,Reference_,Visa_Submission_Date_,Activity_,Visa_Outcome_,Agent_,Status_Details_,Student_Remark_);
           
		INSERT INTO student_followup(Student_Id ,Entry_Date,Next_FollowUp_Date,FollowUp_Difference,Department ,Status ,User_Id ,Branch,Remark,Remark_Id,By_User_Id,FollowUp_Type ,DeleteStatus,FollowUP_Time,Actual_FollowUp_Date)
		values (Student_Id_ ,Now(),Next_FollowUp_Date_,0,Department_ ,Status_ ,To_User_ ,Branch_,0,0,By_User_Id_,1,false,Now(),Now());
		set Student_FollowUp_Id_ =(SELECT LAST_INSERT_ID());
		Update student set Student_FollowUp_Id=Student_FollowUp_Id_ ,Next_FollowUp_Date = Next_FollowUp_Date_ where student.Student_Id=Student_Id_;
           
	end if;
SELECT i + 1 INTO i;      
END WHILE;
set import_master_id=1;
#insert into data_log_ (id,Description_) values('kk1','k1');
 select  import_master_id;
 select * from Duplicate_Students where Master_Id=Master_Id_;
 delete from Duplicate_Students where Master_Id=Master_Id_;
# DROP TEMPORARY TABLE Duplicate_Students;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Student_Message`( In Student_Message_Id_ int,
Student_Id_ int,
Message_Detail_ varchar(2000))
Begin 
 if  Student_Message_Id_>0
 THEN 
 UPDATE Student_Message set Student_Message_Id = Student_Message_Id_ ,
Student_Id = Student_Id_ ,
Message_Detail = Message_Detail_  Where Student_Message_Id=Student_Message_Id_ ;
 ELSE 
 SET Student_Message_Id_ = (SELECT  COALESCE( MAX(Student_Message_Id ),0)+1 FROM Student_Message); 
 INSERT INTO Student_Message(Student_Message_Id ,
Student_Id ,
Message_Detail,Entry_Date,DeleteStatus ) values (Student_Message_Id_ ,
Student_Id_ ,
Message_Detail_,now(),false );
 End If ;
 select Student_Message_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Student_Report_FollowUp`( In Student_Details_ json,By_User_Id_ int,
Branch_ int,Department_ int,Status_ int,User_Id_ int,Next_FollowUp_Date_ datetime,Remark_ varchar(100),Remark_Id_ int)
Begin
Declare i int;DECLARE Student_Id_ int;declare x int default 0;
declare Student_FollowUp_Id_ int;
declare import_master_id int default 0;
declare Master_Id_ int;

Set i=0;
WHILE i < JSON_LENGTH(Student_Details_) DO
SELECT JSON_UNQUOTE (JSON_EXTRACT(Student_Details_,CONCAT('$[',i,'].Student_Id'))) INTO Student_Id_;
INSERT INTO student_followup(Student_Id ,Entry_Date,Next_FollowUp_Date,FollowUp_Difference,Department ,Status ,User_Id ,Branch,By_User_Id,FollowUp_Type ,
DeleteStatus,FollowUP_Time,Actual_FollowUp_Date,Remark,Remark_Id,Entry_Type)
values (Student_Id_ ,Now(),Next_FollowUp_Date_,0,Department_ ,Status_ ,User_Id_ ,Branch_,By_User_Id_,1,false,Now(),Now(),Remark_,Remark_Id_,3);
set Student_FollowUp_Id_ =(SELECT LAST_INSERT_ID());
Update student set Student_FollowUp_Id=Student_FollowUp_Id_ ,Department = Department_ ,Status = Status_ ,
User_Id = User_Id_ ,By_User_Id=By_User_Id_,Next_FollowUp_Date = Next_FollowUp_Date_ ,Remark=Remark_,Remark_Id=Remark_Id_,
Branch=Branch_,FollowUp_Count=x+1
where student.Student_Id=Student_Id_;
SELECT i + 1 INTO i;      
END WHILE;
set import_master_id=1;
select Student_Id_;
End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Student_Status`( In Student_Status_Id_ int,
Student_Status_Name_ varchar(50))
Begin 
 if  Student_Status_Id_>0
 THEN 
 UPDATE Student_Status set Student_Status_Id = Student_Status_Id_ ,
Student_Status_Name = Student_Status_Name_  Where Student_Status_Id=Student_Status_Id_ ;
 ELSE 
 SET Student_Status_Id_ = (SELECT  COALESCE( MAX(Student_Status_Id ),0)+1 FROM Student_Status); 
 INSERT INTO Student_Status(Student_Status_Id ,
Student_Status_Name,DeleteStatus ) values (Student_Status_Id_ ,
Student_Status_Name_,false );
 End If ;
 select Student_Status_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Subject`( In Subject_Id_ int,
Subject_Name_ varchar(50))
Begin 
 if  Subject_Id_>0
 THEN 
 UPDATE Subject set Subject_Id = Subject_Id_ ,
Subject_Name = Subject_Name_  Where Subject_Id=Subject_Id_ ;
 ELSE 
 SET Subject_Id_ = (SELECT  COALESCE( MAX(Subject_Id ),0)+1 FROM Subject); 
 INSERT INTO Subject(Subject_Id ,
Subject_Name,DeleteStatus ) values (Subject_Id_ ,
Subject_Name_,false );
 End If ;
 select Subject_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_Sub_Section`( In Sub_Section_Id_ int,
Sub_Section_Name_ varchar(50))
Begin 
 if  Sub_Section_Id_>0
 THEN 
 UPDATE sub_section set Sub_Section_Id = Sub_Section_Id_ ,
Sub_Section_Name = Sub_Section_Name_  Where Sub_Section_Id=Sub_Section_Id_ ;
 ELSE 
 SET Sub_Section_Id_ = (SELECT  COALESCE( MAX(Sub_Section_Id ),0)+1 FROM sub_section); 
 INSERT INTO sub_section(Sub_Section_Id ,
Sub_Section_Name,DeleteStatus ) values (Sub_Section_Id_ ,
Sub_Section_Name_,false );
 End If ;
 select Sub_Section_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_University`(In University_Id_ int,University_Name_ varchar(50),
About_ varchar(500),About1_ varchar(500),About2_ varchar(500),Location_ varchar(50) ,Address_ varchar(150) ,
Founded_In_  varchar(50),Institution_Type_  varchar(50),Cost_Of_Living_  varchar(50),Tution_Fee_  varchar(50),
Application_Fee_  varchar(50),Type_Of_Accomodation_  varchar(50),Contact_Number_  varchar(50),Email_  varchar(50),
Web_ varchar(500),Fb_ varchar(500),Linkedin_ varchar(500),Twitter_ varchar(500),Googlemap_ varchar(500),
Status_ int,Country_Id_ int,Sub_Heading1_ varchar(500),Sub_Heading2_ varchar(500) ,Sub_Heading3_ varchar(500) ,
School_Rank_ varchar(50),Video_Link_ varchar(500),Sub_Heading_Colored_ varchar(500),Banner_Image_ varchar(500))
BEGIN
if  University_Id_>0
	 THEN 
	 UPDATE University set University_Name = University_Name_  ,About =About_,About1=About1_,About2=About2_,Location=Location_,
	 Address=Address_,Founded_In=Founded_In_,Institution_Type=Institution_Type_,Cost_Of_Living=Cost_Of_Living_,
	 Tution_Fee=Tution_Fee_,Application_Fee=Application_Fee_,Type_Of_Accomodation=Type_Of_Accomodation_,
	 Contact_Number=Contact_Number_,Email=Email_,Web=Web_,Fb=Fb_,Linkedin=Linkedin_,Twitter=Twitter_,Googlemap=Googlemap_,
	 Status=Status_,Country_Id=Country_Id_,Sub_Heading1=Sub_Heading1_,Sub_Heading2=Sub_Heading2_,Sub_Heading3=Sub_Heading3_,
	 School_Rank=School_Rank_,Video_Link=Video_Link_,Sub_Heading_Colored=Sub_Heading_Colored_,Banner_Image=Banner_Image_
	Where University_Id=University_Id_ ;
   ELSE 
 SET University_Id_ = (SELECT  COALESCE( MAX(University_Id ),0)+1 FROM University); 
 INSERT INTO University(University_Id ,University_Name,About ,About1 ,About2 ,Location ,Address ,Founded_In ,
 Institution_Type ,Cost_Of_Living ,Tution_Fee ,Application_Fee ,Type_Of_Accomodation ,Contact_Number ,Email ,
 Web ,Fb ,Linkedin ,Twitter ,Googlemap ,Status ,Country_Id , Sub_Heading1 ,Sub_Heading2 ,Sub_Heading3 ,
 School_Rank ,Video_Link ,Sub_Heading_Colored ,Banner_Image ,DeleteStatus )
 
 values (University_Id_ ,University_Name_,About_ ,About1_ ,About2_ ,Location_ ,Address_ ,
 Founded_In_ ,Institution_Type_ ,Cost_Of_Living_ ,Tution_Fee_ ,Application_Fee_ ,Type_Of_Accomodation_ ,
 Contact_Number_ ,Email_ ,Web_ ,Fb_ ,Linkedin_ ,Twitter_ ,Googlemap_ ,Status_ ,Country_Id_ , 
Sub_Heading1_ ,Sub_Heading2_ ,Sub_Heading3_ ,School_Rank_ ,Video_Link_ ,Sub_Heading_Colored_ ,
Banner_Image_ ,false );
 End If ;
 select University_Id_;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_University_Photos`(in University_Id_ int,
Photo json)
BEGIN
DECLARE University_Image_ varchar(50);DECLARE i int  DEFAULT 0;
DECLARE exit handler for sqlexception  
BEGIN
GET DIAGNOSTICS CONDITION 1
@p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
SELECT @p2 AS MESSAGE_TEXT, @p1 AS RETURNED_SQLSTATE;
#ROLLBACK;
END;
DECLARE exit handler for sqlwarning
BEGIN
GET DIAGNOSTICS CONDITION 1
@p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
SELECT @p2 AS MESSAGE_TEXT, @p1 AS RETURNED_SQLSTATE;
#ROLLBACK;
END;
    START TRANSACTION;
 WHILE i < JSON_LENGTH(Photo) DO
SELECT JSON_UNQUOTE (JSON_EXTRACT(Photo,CONCAT('$[',i,'].File_name'))) INTO University_Image_;
   
INSERT INTO University_Photos(University_Id,University_Image,DeleteStatus )
values (University_Id_ ,University_Image_ ,false);
SELECT i + 1 INTO i;
END WHILE;  
COMMIT;
select University_Id_;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_User_Details`( In User_Details_Id_ decimal,
User_Details_Name_ varchar(250),Password_ varchar(250),Working_Status_ int,
User_Type_ int,Role_Id_ decimal,Branch_ int,Address1_ varchar(250),Address2_ varchar(250),Address3_ varchar(250),
Address4_ varchar(250),Pincode_ varchar(250),Mobile_ varchar(250),Email_ varchar(250),
Employee_Id_ int,Registration_Target_ int,FollowUp_Target_ int,User_Menu_Selection JSON,User_Department JSON)
BEGIN

DECLARE Department_Id_ int;DECLARE Branch_Id_ int;DECLARE View_Entry_ varchar(25);
DECLARE VIew_All_ varchar(25); DECLARE VIew_All_1 varchar(25);
DECLARE Menu_Id_ int;DECLARE IsEdit_ varchar(25);DECLARE IsSave_ varchar(25);
DECLARE IsDelete_ varchar(25);DECLARE IsView_ varchar(25); DECLARE Menu_Status_ varchar(25);
        declare User_Max_Count int;
    declare Current_User_Count int;
DECLARE i int  DEFAULT 0;
DECLARE exit handler for sqlexception
BEGIN
GET DIAGNOSTICS CONDITION 1
@p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
SELECT @p2 as MESSAGE_TEXT,@p1 as RETURNED_SQLSTATE  ;
ROLLBACK;
END;
   
    DECLARE exit handler for sqlwarning
BEGIN
GET DIAGNOSTICS CONDITION 1
@p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
SELECT @p2 as MESSAGE_TEXT,@p1 as RETURNED_SQLSTATE  ;
ROLLBACK;
END;
   
    START TRANSACTION;
delete from User_Menu_Selection where User_Id=User_Details_Id_;
delete from User_Department where User_Id=User_Details_Id_;
if  User_Details_Id_>0
THEN

UPDATE User_Details set User_Details_Name = User_Details_Name_ ,Password = Password_ ,Working_Status = Working_Status_ ,
User_Type = User_Type_ ,Role_Id = Role_Id_ ,Address1 = Address1_ ,Address2 = Address2_ ,Address3 = Address3_ ,Branch_Id=Branch_,
Address4 = Address4_ ,Pincode = Pincode_ ,Mobile = Mobile_ ,Email = Email_,Employee_Id=Employee_Id_,Registration_Target=Registration_Target_,
FollowUp_Target=FollowUp_Target_
Where User_Details_Id=User_Details_Id_ ;
ELSE

        set User_Max_Count=(select Settings_Value from settings_table where  Settings_Id=1);
set Current_User_Count=(select count(User_Details_Id) from user_details where DeleteStatus=0);
if User_Max_Count>Current_User_Count then
       
SET User_Details_Id_ = (SELECT  COALESCE( MAX(User_Details_Id ),0)+1 FROM User_Details);
INSERT INTO User_Details(User_Details_Id ,User_Details_Name ,Password ,Working_Status ,User_Type ,Role_Id ,Branch_Id,
Address1 ,Address2 ,Address3 ,Address4 ,Pincode ,Mobile ,Email ,Employee_Id,Registration_Target,FollowUp_Target,DeleteStatus )
values (User_Details_Id_ ,User_Details_Name_ ,Password_ ,Working_Status_ ,User_Type_ ,
Role_Id_ ,Branch_,Address1_ ,Address2_ ,Address3_ ,Address4_ ,Pincode_ ,Mobile_ ,Email_ ,Employee_Id_,Registration_Target_,FollowUp_Target_,false);
else
SET User_Details_Id_ = -1;
end if;
End If ;
    if  User_Details_Id_>0 then
WHILE i < JSON_LENGTH(User_Department) DO
SELECT JSON_UNQUOTE (JSON_EXTRACT(User_Department,CONCAT('$[',i,'].Department_Id'))) INTO Department_Id_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(User_Department,CONCAT('$[',i,'].Branch_Id'))) INTO Branch_Id_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(User_Department,CONCAT('$[',i,'].Check_Box_View'))) INTO View_Entry_;
if(View_Entry_='true')
then set View_Entry_=1;
else set View_Entry_=0;
end if;
SELECT JSON_UNQUOTE (JSON_EXTRACT(User_Department,CONCAT('$[',i,']. Check_Box_VIew_All'))) INTO VIew_All_;
set VIew_All_1=VIew_All_;

if(VIew_All_='true')
then set VIew_All_=1;
else set VIew_All_=0;
end if;

INSERT INTO User_Department(User_Id,Department_Id,Branch_Id,View_Entry,VIew_All,Is_Delete )
values (User_Details_Id_,Department_Id_,Branch_Id_,View_Entry_,VIew_All_,false);  
SELECT i + 1 INTO i;
END WHILE;  
set i=0;
WHILE i < JSON_LENGTH(User_Menu_Selection) DO
SELECT JSON_UNQUOTE (JSON_EXTRACT(User_Menu_Selection,CONCAT('$[',i,'].Menu_Id'))) INTO Menu_Id_;
SELECT JSON_UNQUOTE (JSON_EXTRACT(User_Menu_Selection,CONCAT('$[',i,'].IsEdit'))) INTO IsEdit_;
        if(IsEdit_='true')
then set IsEdit_=1;
else set IsEdit_=0;
end if;
SELECT JSON_UNQUOTE (JSON_EXTRACT(User_Menu_Selection,CONCAT('$[',i,'].IsSave'))) INTO IsSave_;
if(IsSave_='true')
then set IsSave_=1;
else set IsSave_=0;
end if;
SELECT JSON_UNQUOTE (JSON_EXTRACT(User_Menu_Selection,CONCAT('$[',i,'].IsDelete'))) INTO IsDelete_;
  if(IsDelete_='true')
then set IsDelete_=1;
else set IsDelete_=0;
end if;
           SELECT JSON_UNQUOTE (JSON_EXTRACT(User_Menu_Selection,CONCAT('$[',i,'].IsView'))) INTO IsView_;
  if(IsView_='true')
then set IsView_=1;
else set IsView_=0;
end if;
        SELECT JSON_UNQUOTE (JSON_EXTRACT(User_Menu_Selection,CONCAT('$[',i,'].Menu_Status'))) INTO Menu_Status_;
  if(Menu_Status_='true')
then set Menu_Status_=1;
else set Menu_Status_=0;
end if;          
INSERT INTO User_Menu_Selection(Menu_Id,User_Id,IsEdit,IsSave,IsDelete ,IsView,Menu_Status,DeleteStatus )
values (Menu_Id_ ,User_Details_Id_ ,IsEdit_ ,IsSave_ ,IsDelete_ ,IsView_ ,Menu_Status_ ,false);
SELECT i + 1 INTO i;
END WHILE;  
end if;
 COMMIT;
 select User_Details_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Save_User_Role`( In User_Role_Id_ int,
User_Role_Name_ varchar(50),
Role_Under_Id_ int)
Begin 
 if  User_Role_Id_>0
 THEN 
 UPDATE user_role set User_Role_Id = User_Role_Id_ ,
User_Role_Name=User_Role_Name_,
Role_Under_Id = Role_Under_Id_  Where User_Role_Id=User_Role_Id_ ;
 ELSE 
 SET User_Role_Id_ = (SELECT  COALESCE( MAX(User_Role_Id ),0)+1 FROM user_role); 
 INSERT INTO user_role(User_Role_Id ,
User_Role_Name ,
Role_Under_Id ,
Is_Delete ) values (User_Role_Id_ ,
User_Role_Name_ ,
Role_Under_Id_,
false);
 End If ;
 select User_Role_Id_;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Account_Group`( In Group_Name_ varchar(100))
Begin 
set Group_Name_ = Concat( '%',Group_Name_ ,'%');
SELECT Second.Account_Group_Id,Second.Primary_Id,Second.Group_Name,Second.Under_Group,
First.Group_Name as UnderGroup
FROM Account_Group as Second inner join Account_Group as First 
on First.Account_Group_Id=Second.Under_Group
where Second.Group_Name LIKE Group_Name_
and Second.Account_Group_Id>35 AND First.DeleteStatus=False AND Second.DeleteStatus=False;
End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Account_Group_Typeahead`( In Group_Name_ varchar(100))
Begin 
set Group_Name_ = Concat( '%',Group_Name_ ,'%');
SELECT
Account_Group_Id,Group_Name
FROM Account_Group 
where Group_Name LIKE Group_Name_ 
and Group_Name Not in('Sundry Debtors')
and DeleteStatus=False
order by Group_Name asc Limit 5 ;
End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Agent`( In Client_Accounts_Name_ varchar(100),Account_Group_ int,Pointer_Start_ Varchar(10), 
Pointer_Stop_ Varchar(10), Page_Length_ Varchar(10))
Begin 
declare Search_Date_ varchar(500);declare SearchbyName_Value varchar(2000);
set Search_Date_="";set SearchbyName_Value=""; 

if Client_Accounts_Name_!='' then
SET SearchbyName_Value =   Concat( SearchbyName_Value ," and Client_Accounts.Client_Accounts_Name like '%",Client_Accounts_Name_ ,"%'") ;
end if;

if Account_Group_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and Client_Accounts.Account_Group_Id =",Account_Group_);
end if;


SET @query = Concat("select * from (SELECT 
Client_Accounts.Client_Accounts_Id,Client_Accounts.Client_Accounts_Code,
Client_Accounts.Client_Accounts_Name,Client_Accounts.Client_Accounts_No,Client_Accounts.Address1,
Client_Accounts.Address2,Client_Accounts.Address3,Client_Accounts.Address4,
Client_Accounts.PinCode,Client_Accounts.StateCode,Client_Accounts.GSTNo,Client_Accounts.PanNo,
Client_Accounts.State,Client_Accounts.Country,Client_Accounts.Phone,
Client_Accounts.Mobile,Client_Accounts.Email,Client_Accounts.Opening_Balance,
Client_Accounts.Description1,Client_Accounts.UserId,
Client_Accounts.LedgerInclude,Client_Accounts.CanDelete,Client_Accounts.Opening_Type
,Client_Accounts.Commision,
(Date_Format(Client_Accounts.Entry_Date,'%Y-%m-%d')) As Entry_Date,
Client_Accounts.Account_Group_Id ,Group_Name Account_Group_Name,
Client_Accounts.Employee_Id,Emp.Client_Accounts_Name as Employee,
CAST(CAST(ROW_NUMBER()OVER(ORDER BY client_accounts.Client_Accounts_Name DESC )AS UNSIGNED)AS SIGNED)AS RowNo
From Client_Accounts
inner join Account_Group on Account_Group.Account_Group_Id=Client_Accounts.Account_Group_Id
inner join Client_Accounts as Emp on Client_Accounts.Employee_Id=Emp.Client_Accounts_Id
where Client_Accounts.Client_Accounts_Id>35 and  Client_Accounts.DeleteStatus=false   ",SearchbyName_Value, ")
 as lds WHERE RowNo >=",Pointer_Start_," AND RowNo<= ",Pointer_Stop_," order by  RowNo LIMIT ",Page_Length_);
 
PREPARE QUERY FROM @query;
EXECUTE QUERY;
#delete from data_log_;
#insert into data_log_ values(1,@query,0);
#select @query;
End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Branch`( In Branch_Name_ varchar(100))
Begin 
 set Branch_Name_ = Concat( '%',Branch_Name_ ,'%');
 SELECT Branch_Id,
Branch_Name,
Address,
Location,
District,
State,
Country,
PinCode,
Branch.Phone_Number,
Branch.Email,
Branch_Code
 From Branch 
 where Branch_Name like Branch_Name_ and Branch.Is_Delete=false 
 Order by Branch_Name asc;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Branchwise_Summary`(In Fromdate_ date,Todate_ date,RoleId_ varchar(100),Department_String varchar(1000),Search_By_ int,
SearchbyName_ varchar(50),Department_ int,Branch_ int,By_User_ int,Is_Date_Check_ Tinyint,
Page_Index1_ int,Page_Index2_ int,Login_User_Id_ int,RowCount int ,RowCount2 int)
BEGIN
declare SearchbyName_Value varchar(2000);declare UnionQuery varchar(4000);declare Search_Date_ varchar(500);
declare Search_Date_union varchar(500);declare pos1frm int;declare pos1to int;declare pos2frm int;
declare pos2to int; declare PageSize int;
 set pos1frm=0;    set pos1to=0;    set pos2frm=0;    set pos2to=0;    set PageSize=10;
 set SearchbyName_Value='';
 set Search_Date_='';


set Search_Date_=concat( " and date(fees_receipt.Entry_Date) >= '", Fromdate_ ,"' and  date(fees_receipt.Entry_Date) <= '", Todate_,"'");


SET @query = Concat( "select sum(fees_receipt.Amount) Branch_Total , Branch_Name from 
student
inner join fees_receipt on student.Student_Id=fees_receipt.Student_Id
inner join Branch on Branch.Branch_Id= student.Branch
where fees_receipt.Delete_Status=0",Search_Date_," 
group by student.Branch ");
PREPARE QUERY FROM @query;
#select @query;
#insert into data_log_ values(0,@query,'');
EXECUTE QUERY;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Branch_Department_Typeahead`(In Branch_Id_ int,
Department_Name_ Varchar(100))
BEGIN
 set Department_Name_ = Concat( '%',Department_Name_ ,'%');
SELECT
Department.Department_Id,
Department_Name,Department.FollowUp Department_FollowUp
from Department 
inner join Branch_Department on Department.Department_Id=Branch_Department.Department_Id and 
Branch_department.Branch_Id=Branch_Id_
where Department_Name like Department_Name_ 
and Department.Is_Delete=false 
 ORDER BY Department_Order Asc ;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Branch_Typeahead`( In Branch_Name_ varchar(100))
Begin 
 set Branch_Name_ = Concat( '%',Branch_Name_ ,'%');
 SELECT 
 Branch_Id,
Branch_Name,
Address,
Location,
District,
State,
Country,
PinCode,
Phone_Number,
Email,
Branch_Code From Branch where Branch_Name like Branch_Name_ and Is_Delete=false 
 ORDER BY Branch_Name Asc LIMIT 5;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Client_Accounts`( In Client_Accounts_Name_ varchar(100),Account_Group_ int,Pointer_Start_ Varchar(10), 
Pointer_Stop_ Varchar(10), Page_Length_ Varchar(10))
Begin 
declare Search_Date_ varchar(500);declare SearchbyName_Value varchar(2000);
set Search_Date_="";set SearchbyName_Value=""; 
/*
if Client_Accounts_Name_ !='' then
	set SearchbyName_Value = concat( "'%",Client_Accounts_Name_ ,"%'");
	SET SearchbyName_Value =concat(" and Client_Accounts.Client_Accounts_Name like " ,Client_Accounts_Name_);
end if;
*/

if Client_Accounts_Name_!='' then
SET SearchbyName_Value =   Concat( SearchbyName_Value ," and Client_Accounts.Client_Accounts_Name like '%",Client_Accounts_Name_ ,"%'") ;
end if;

if Account_Group_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and Client_Accounts.Account_Group_Id =",Account_Group_);
end if;


SET @query = Concat("select * from (SELECT 
Client_Accounts.Client_Accounts_Id,Client_Accounts.Client_Accounts_Code,
Client_Accounts.Client_Accounts_Name,Client_Accounts.Client_Accounts_No,Client_Accounts.Address1,
Client_Accounts.Address2,Client_Accounts.Address3,Client_Accounts.Address4,
Client_Accounts.PinCode,Client_Accounts.StateCode,Client_Accounts.GSTNo,Client_Accounts.PanNo,
Client_Accounts.State,Client_Accounts.Country,Client_Accounts.Phone,
Client_Accounts.Mobile,Client_Accounts.Email,Client_Accounts.Opening_Balance,
Client_Accounts.Description1,Client_Accounts.UserId,
Client_Accounts.LedgerInclude,Client_Accounts.CanDelete,Client_Accounts.Opening_Type
,Client_Accounts.Commision,
(Date_Format(Client_Accounts.Entry_Date,'%Y-%m-%d')) As Entry_Date,
Client_Accounts.Account_Group_Id ,Group_Name Account_Group_Name,
Client_Accounts.Employee_Id,Emp.Client_Accounts_Name as Employee,
CAST(CAST(ROW_NUMBER()OVER(ORDER BY client_accounts.Client_Accounts_Name DESC )AS UNSIGNED)AS SIGNED)AS RowNo
From Client_Accounts
inner join Account_Group on Account_Group.Account_Group_Id=Client_Accounts.Account_Group_Id
inner join Client_Accounts as Emp on Client_Accounts.Employee_Id=Emp.Client_Accounts_Id
where Client_Accounts.Client_Accounts_Id>35 and  Client_Accounts.DeleteStatus=false   ",SearchbyName_Value, ")
 as lds WHERE RowNo >=",Pointer_Start_," AND RowNo<= ",Pointer_Stop_," order by  RowNo LIMIT ",Page_Length_);
 
PREPARE QUERY FROM @query;
EXECUTE QUERY;
#delete from data_log_;
#insert into data_log_ values(1,@query,0);
#select @query;
End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Counselor_Fees_Receipt_Report`(In Fromdate_ date,Todate_ date,Search_By_ int,
SearchbyName_ varchar(50),Department_ int,Branch_ int,By_User_ int,Is_Date_Check_ Tinyint,
Page_Index1_ int,Page_Index2_ int,Login_User_Id_ int,RowCount int ,RowCount2 int,Fees_Id int)
BEGIN
declare SearchbyName_Value varchar(2000);declare UnionQuery varchar(4000);declare Search_Date_ varchar(500);
declare Search_Date_union varchar(500);declare pos1frm int;declare pos1to int;declare pos2frm int;
declare pos2to int; declare PageSize int;
 set pos1frm=0;    set pos1to=0;    set pos2frm=0;    set pos2to=0;    set PageSize=10;
 set SearchbyName_Value='';
 set Search_Date_='';

if(SearchbyName_ !='0') then
	if Search_By_=1 then
	SET SearchbyName_Value =   Concat( " and student.Student_Name like '%",SearchbyName_ ,"%'") ;
	end if;
end if;
if Department_>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and student.Department =",Department_);
end if;
if Branch_>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and student.Branch =",Branch_);
end if;
if Login_User_Id_>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and fees_receipt.User_Id =",Login_User_Id_);
end if;
if Fees_Id>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and fees_receipt.Fees_Id =",Fees_Id);
end if;
if Is_Date_Check_=true then
set Search_Date_=concat( " and date(Fees_Receipt.Entry_Date) >= '", Fromdate_ ,"' and  date(Fees_Receipt.Entry_Date) <= '", Todate_,"'");

ELSE
set Search_Date_= "and 1 =1 ";
end if;
set UnionQuery="";
SET @query = Concat( "select student.Student_Id,
student.Student_Name,(Date_Format(student.Registered_On,'%d-%m-%Y-%h:%i')) As Registered_On ,
    (Date_Format(Fees_Receipt.Entry_Date,'%d-%m-%Y')) As Entry_Date,  (Date_Format(student.Next_FollowUp_Date,'%d-%m-%Y')) As Next_FollowUp_Date,
Department.Department_Name,Department.FollowUp,Department_Status.Department_Status_Name,T.User_Details_Name,
B.User_Details_Name Registered_By_Name,Branch.Branch_Name,Is_Registered,user_details.User_Details_Name As Created_By_Name,
    F_user.User_Details_Name As Fees_Collected_By,Fees_Receipt.Amount,Fees_Receipt.Description,Fees.Fees_Name 
from student
inner join user_details on user_details.User_Details_Id=student.Created_By
inner join Department on Department.Department_Id= student.Department  
inner join Branch on Branch.Branch_Id= student.Branch
inner join Department_Status on Department_Status.Department_Status_Id=student.Status
inner join user_details as T on T.User_Details_Id=student.User_Id
left join user_details as B on B.User_Details_Id=student.Registered_By
inner join Fees_Receipt on Fees_Receipt.Student_Id=student.Student_Id
inner join user_details as F_user on F_user.User_Details_Id=Fees_Receipt.User_Id
inner join Fees on Fees.Fees_Id=Fees_Receipt.Fees_Id 
where student.DeleteStatus=0    and student.DeleteStatus=0  ",SearchbyName_Value," ",Search_Date_,"
order by Fees_Receipt.Entry_Date ");

PREPARE QUERY FROM @query;
#select @query;
#insert into data_log_ values(0,@query,'');

EXECUTE QUERY;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Counselor_Registration_Report`(In Fromdate_ date,Todate_ date,Search_By_ int,
SearchbyName_ varchar(50),Department_ int,Branch_ int,By_User_ int,Is_Date_Check_ Tinyint,
Page_Index1_ int,Page_Index2_ int,Login_User_Id_ int,RowCount int ,RowCount2 int)
BEGIN

declare SearchbyName_Value varchar(2000);declare UnionQuery varchar(4000);declare Search_Date_ varchar(500);
declare Search_Date_union varchar(500);declare pos1frm int;declare pos1to int;declare pos2frm int;
declare pos2to int; declare PageSize int;
 set pos1frm=0;    set pos1to=0;    set pos2frm=0;    set pos2to=0;    set PageSize=10;
 set SearchbyName_Value='';
 set Search_Date_='';
if(SearchbyName_ !='0') then
if Search_By_=1 then
SET SearchbyName_Value =   Concat( " and student.Student_Name like '%",SearchbyName_ , "%' " ) ;
end if;
end if;
if Department_>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and student.Department =",Department_);
end if;
if Branch_>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and student.Branch =",Branch_);
end if;
if Login_User_Id_>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and student.Registered_By =",Login_User_Id_);
end if;
if Is_Date_Check_=true then
set Search_Date_=concat( " and date(student.Registered_On) >= '", Fromdate_ ,"' and  date(student.Registered_On) <= '", Todate_,"'");
ELSE
set Search_Date_= "and 1 =1 ";
end if;
set UnionQuery=""; 

SET @query = Concat( "select student.Student_Id,
student.Student_Name,student.Phone_Number,student.Remark,(Date_Format(student.Registered_On,'%d-%m-%Y-%h:%i')) As Registered_On ,
    (Date_Format(student.Entry_Date,'%d-%m-%Y')) As Entry_Date,  (Date_Format(student.Next_FollowUp_Date,'%d-%m-%Y')) As Next_FollowUp_Date,
Department.Department_Name,Department.FollowUp,Department_Status.Department_Status_Name,T.User_Details_Name,
B.User_Details_Name Registered_By_Name,
Branch.Branch_Name,Is_Registered,user_details.User_Details_Name As Created_By_Name
from student
inner join Department on Department.Department_Id= student.Department  
inner join user_details on user_details.User_Details_Id=student.Created_By
inner join Branch on Branch.Branch_Id= student.Branch
inner join Department_Status on Department_Status.Department_Status_Id=student.Status
inner join user_details as T on T.User_Details_Id=student.User_Id
inner join user_details as B on B.User_Details_Id=student.Registered_By
where student.DeleteStatus=0    and student.Is_Registered=1  ",SearchbyName_Value," ",Search_Date_,"
order by student.Registered_On");

PREPARE QUERY FROM @query;
#select @query;
#insert into data_log_ values(0,@query,'');
EXECUTE QUERY;

select 1;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Country`( In Country_Name_ varchar(100))
Begin 
 set Country_Name_ = Concat( '%',Country_Name_ ,'%');
 SELECT Country_Id,
Country_Name From Country where Country_Name like Country_Name_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Country_Typeahead`( In Country_Name_ varchar(100))
Begin
 set Country_Name_ = Concat( '%',Country_Name_ ,'%');
select  Country.Country_Id,Country_Name
From Country
where Country_Name like Country_Name_  and Country.DeleteStatus=false
order by Country_Name asc  limit 5  ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Course`(In Course_Name_ varchar(100),Level_Id_ int,Country_Id_ int,Internship_Id_ int,
Duration_Id_ int,University_Id_ int,Subject_Id_ int ,Sub_Section_Id_ int, Pointer_Start_ int , Pointer_Stop_ int,Page_Length_ int)
Begin 
declare SearchbyName_Value varchar(2000);
set SearchbyName_Value='';
if Course_Name_!='' then
	SET SearchbyName_Value =concat( SearchbyName_Value ," and Course.Course_Name like '%",Course_Name_ ,"%'") ;
end if;
if Level_Id_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and level_detail.Level_Detail_Id =",Level_Id_);
end if;
if Country_Id_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and Course.Country_Id =",Country_Id_);
end if;
if Internship_Id_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and Internship.Internship_Id =",Internship_Id_);
end if;
if Duration_Id_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and Course.Duration_Id =",Duration_Id_);
end if;
if University_Id_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and Course.University_Id =",University_Id_);
end if;
if Subject_Id_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and Course.Subject_Id =",Subject_Id_);
end if;

if Sub_Section_Id_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and Course.Sub_Section_Id =",Sub_Section_Id_);
end if;

SET @query = Concat("select * from (SELECT Course_Id,Course_Name,Course_Code,Country_Name,University_Name,Duration_Name,Level_Detail_Name,Subject_Name,Sub_Section_Name,Internship_Name,course.Internship_Id,
 course.Country_Id,course.Subject_Id,course.Sub_Section_Id,course.University_Id, 
 CAST(CAST(ROW_NUMBER()OVER(ORDER BY Course.Course_Name DESC )AS UNSIGNED)AS SIGNED)AS RowNo
 From Course 
 inner join country on course.Country_Id = country.Country_Id 
 inner join duration on  course.Duration_Id= duration.Duration_Id
 inner join  level_detail on course.Level_Id=level_detail.Level_Detail_Id
 inner join subject on course.Subject_Id=subject.Subject_Id
inner join Sub_Section on course.Sub_Section_Id=Sub_Section.Sub_Section_Id
inner join  internship on course.Internship_Id=internship.Internship_Id
inner join university  on course.University_Id = university.University_Id 
where Course.DeleteStatus = false  " ,SearchbyName_Value," order by Course.Course_Name desc )
 as lds WHERE RowNo >=",Pointer_Start_," AND RowNo<= ",Pointer_Stop_,"
 order by  RowNo LIMIT ",Page_Length_);
PREPARE QUERY FROM @query;
EXECUTE QUERY;
#delete from data_log_;
#insert into data_log_ values(1,@query,1);
#select @query;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Course_Import`(In From_Date_ datetime,To_Date_ datetime,Is_Date_Check_ Tinyint)
Begin 
declare Search_Date_ varchar(500);declare SearchbyName_Value varchar(2000);
Declare Import_Master_Id_ int;
set Search_Date_="";set SearchbyName_Value=""; 
if Is_Date_Check_=true then
	set Search_Date_=concat(" and date(import_master.Entry_Date) >= '", From_Date_ ,"' and  date(import_master.Entry_Date) <= '", To_Date_,"'");
end if;

SET @query = Concat("SELECT Import_Master_Id,(Date_Format(Entry_Date,'%Y-%m-%d')) Entry_Date
 From import_master  order by import_master.Entry_Date desc ");
PREPARE QUERY FROM @query;EXECUTE QUERY;
#insert into db_logs values(1,@query,1,1);
#select @query;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Course_Intake`( In Course_Intake_Name_ varchar(100))
Begin 
 set Course_Intake_Name_ = Concat( '%',Course_Intake_Name_ ,'%');
 SELECT Course_Id,
Intake_Id From Course_Intake where Course_Intake_Name like Course_Intake_Name_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Course_Typeahead`(In Country_Id_ int,Subject_Id_ varchar(100),Level_Id_ int,
Course_Name_ varchar(100),Duration_Id_ varchar(100),Ielts_Minimum_Score_ int,Intake_Id_ int,Internship_Id_ int)
Begin 
declare SearchbyName_Value varchar(2000);
set SearchbyName_Value=""; 

if Course_Name_!='' then
SET SearchbyName_Value =   Concat( SearchbyName_Value ," and course.Course_Name like '%",Course_Name_ ,"%'") ;
end if;
if Duration_Id_!='' then
SET SearchbyName_Value =   Concat( SearchbyName_Value ," and course.Duration_Id in (",Duration_Id_ ,")") ;
end if;
if Subject_Id_!='' then
SET SearchbyName_Value =   Concat( SearchbyName_Value ," and course.Subject_Id in (",Subject_Id_ ,")") ;
end if;
if Country_Id_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and course.Country_Id =",Country_Id_);
end if;
if Intake_Id_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and course_intake.Intake_Id =",Intake_Id_);
end if;

if Level_Id_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and course.Level_Id =",Level_Id_);
end if;
if Ielts_Minimum_Score_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and course.Ielts_Minimum_Score =",Ielts_Minimum_Score_);
end if;
if Internship_Id_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and course.Internship_Id =",Internship_Id_);
end if;


SET @query = Concat("SELECT Course_Id,Course_Name,country.Country_Id,University_Name
From course 
 inner join country  on course.Country_Id = country.Country_Id
 inner join university on course.University_Id = university.University_Id 
 
 where course.DeleteStatus = false and country.DeleteStatus = false ",SearchbyName_Value," order by course.Course_Name asc ");
PREPARE QUERY FROM @query;EXECUTE QUERY;
#insert into db_logs values(1,@query,1,1);
#select @query;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Department`( In Department_Name_ varchar(100))
Begin 
 set Department_Name_ = Concat( '%',Department_Name_ ,'%');
 SELECT Department_Id,
Department_Name,
FollowUp,
Status,
Department_Order,
Color From Department where Department_Name like Department_Name_ and Is_Delete=false 
Order by Department_Name asc;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Department_Status`( In Department_Status_Name_ varchar(100))
Begin 
 set Department_Status_Name_ = Concat( '%',Department_Status_Name_ ,'%');
 SELECT Department_Status_Id,
Department_Status_Name,
Status_Order,
Editable,
Color From Department_Status where Department_Status_Name like Department_Status_Name_
 and Is_Delete=false 
Order by Department_Status_Name asc;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Department_Status_Typeahead`(In Department_Id_ int,

Department_Status_Name_ varchar(100))
BEGIN

 set Department_Status_Name_ = Concat( '%',Department_Status_Name_ ,'%');
select
 Department_Status_Name,Department_Status_Id 
 from Department_Status
 inner join Status_Selection
 on Department_Status.Department_Status_Id=Status_Selection.Status_Id
 and Status_Selection.Department_Id=Department_Id_
 where Department_Status_Name like Department_Status_Name_ 
 and Department_Status.Is_Delete=false
 ORDER BY Department_Status_Name Asc 
 ;
 
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Department_User_Typeahead`(IN Branch_Id_ int,
Department_Id_ int,Users_Name_ varchar(100))
BEGIN
set Users_Name_ = Concat( '%',Users_Name_ ,'%');
select
 distinct user_details.User_Details_Id,User_Details_Name
from user_details
 inner join User_Department on user_details.User_Details_Id=User_Department.User_Id  and user_details.Branch_Id=Branch_Id_
 and User_Department.Department_Id=Department_Id_ and user_department.Branch_Id=Branch_Id_
where User_Details_Name like Users_Name_  and user_details.DeleteStatus=false and user_details.Working_Status=1
 ORDER BY User_Details_Name Asc ;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Document`( In Document_Name_ varchar(100))
Begin 
 set Document_Name_ = Concat( '%',Document_Name_ ,'%');
 SELECT Document_Id,
Document_Name From Document where Document_Name like Document_Name_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Documentation_Report`(In Phone_Number_ varchar(25),User_id_ int)
BEGIN
declare SearchbyNumber_Value varchar(500);
declare Alternative_Phone_ varchar(25);
 set SearchbyNumber_Value = replace(replace(SearchbyNumber_Value,'+',''),' ','');
SET SearchbyNumber_Value = Concat(" and replace(replace(student.Phone_Number,'+',''),' ','') like '%",Phone_Number_,"%'
     or  replace(replace(student.Whatsapp,'+',''),' ','')  like '%",Phone_Number_,"%' or replace(replace(student.Alternative_Phone_Number,'+',''),' ','') like '%",Phone_Number_,"%' ") ;
SET @query = Concat( "select student.Student_Id,
student.Student_Name,student.Phone_Number,student.Alternative_Phone_Number,student.Remark,(Date_Format(student.Registered_On,'%d-%m-%Y-%h:%i')) As Registered_On ,
    (Date_Format(student.Entry_Date,'%d-%m-%Y')) As Entry_Date,  (Date_Format(student.Next_FollowUp_Date,'%d-%m-%Y')) As Next_FollowUp_Date,
Department.Department_Name,Department.FollowUp,Department_Status.Department_Status_Name,T.User_Details_Name,
B.User_Details_Name Registered_By_Name,
Branch.Branch_Name,Is_Registered,user_details.User_Details_Name As Created_By_Name,Whatsapp
from student
inner join Department on Department.Department_Id= student.Department  
inner join user_details on user_details.User_Details_Id=student.Created_By
inner join Branch on Branch.Branch_Id= student.Branch
inner join Department_Status on Department_Status.Department_Status_Id=student.Status
inner join user_details as T on T.User_Details_Id=student.User_Id
inner join user_details as B on B.User_Details_Id=student.Created_By
where student.DeleteStatus=0 and student.student_id in (select distinct Student_Id from student_followup where By_User_Id=" , User_id_ ,")",SearchbyNumber_Value," 
order by student.Phone_Number");
PREPARE QUERY FROM @query;
#select @query;
insert into data_log_ values(0,@query,'');
EXECUTE QUERY;
select 1;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Duration`( In Duration_Name_ varchar(100))
Begin 
 set Duration_Name_ = Concat( '%',Duration_Name_ ,'%');
 SELECT Duration_Id,
Duration_Name From Duration where Duration_Name like Duration_Name_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Efficiency_Count_Report`(In Fromdate_ date,Todate_ date,Branch_ int,
By_User_ int)
BEGIN
declare SearchbyName_Value varchar(2000);declare UnionQuery varchar(4000);declare Search_Date_ varchar(500);
declare Search_Date_union varchar(500);declare pos1frm int;declare pos1to int;declare pos2frm int;
declare pos2to int; declare PageSize int;
 set pos1frm=0;    set pos1to=0;    set pos2frm=0;    set pos2to=0;    set PageSize=10;
 set SearchbyName_Value='';
 set Search_Date_='';
if Branch_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and student.Branch =",Branch_);
end if;

	set Search_Date_=concat( SearchbyName_Value," and student.Next_FollowUp_Date >= '", Fromdate_ ,"' and  student.Next_FollowUp_Date <= '", Todate_,"'");
	set Search_Date_union=concat( SearchbyName_Value," and  student.Entry_Date < '", Fromdate_,"'");
    
SET @query = Concat("select count(student_followup.Student_Id) Count,Date_Format(Entry_Date,'%H') Entry_Date
from student_followup 
	inner join user_details as B on B.User_Details_Id=student_followup.By_User_Id 
    inner join Branch on Branch.Branch_Id= Student_followup.Branch
    and date(student_followup.Entry_Date )
    and B.User_Details_Id= '", By_User_,"'
    and Branch.Branch_Id= '", Branch_,"'
    group by FollowUp_Difference,By_User_Id
    "
    );	 
PREPARE QUERY FROM @query;
#select @query;
#insert into data_log_ values(0,@query,'');
EXECUTE QUERY;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Employee_Summary`(In RoleId_ varchar(100)
,Department_String varchar(1000),Fromdate_ date,
 Todate_ date,Login_User_Id_ int,
 Is_Date_Check_ tinyint,Branch_ int 
 )
BEGIN
#select 1;

declare Search_Date_ varchar(500);declare SearchbyName_Value varchar(2000);declare User_Type_ int;
set Search_Date_=''; set SearchbyName_Value='';
set User_Type_=(select User_Type from user_details where User_Details_Id=Login_User_Id_);
if Is_Date_Check_=true then
set Search_Date_=concat( SearchbyName_Value," and date(student.Entry_Date) >= '", Fromdate_ ,"' and  date(student.Entry_Date) <= '", Todate_,"'");
ELSE
set Search_Date_= "and 1 =1 ";
end if;
 if Branch_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and student.Branch =",Branch_);
end if;
if User_Type_=2 then
 	SET SearchbyName_Value =concat(SearchbyName_Value," and student.User_Id =",Login_User_Id_);
    else
    SET SearchbyName_Value =concat(SearchbyName_Value," and student.User_Id in (select User_Details_Id from user_details where Branch_Id in (select
distinct Branch_Id from user_department where User_Id =",Login_User_Id_," and VIew_All=1))");
end if;
SET @query =concat ( "select sum(Data_Count) as Data_Count,sum(Registration_Count) as Registration_Count ,sum(Total) as Total,User_Details_Name,Branch_Name
from (
 select T.User_Details_Name,count(student.Student_Id) as Data_Count,
sum(student.Is_Registered) as Registration_Count, 0 as Total,Branch_Name
from  student 
    inner join user_details as T on T.User_Details_Id=student.User_Id
	inner join user_details on user_details.User_Details_Id=student.Created_By
    inner join Branch on Branch.Branch_Id= student.Branch
    inner join Department on Department.Department_Id= student.Department  ",Department_String,"
	where student.DeleteStatus=0    ",Search_Date_,SearchbyName_Value,"
	group by T.User_Details_Id,Branch.Branch_Id
  union
select T.User_Details_Name,0 as Data_Count,
0 as Registration_Count, sum(fees_receipt.Amount) as Total,Branch_Name
from student 
inner join user_details as T on T.User_Details_Id=student.User_Id
	inner join user_details on user_details.User_Details_Id=student.Created_By
    inner join Branch on Branch.Branch_Id= student.Branch
    inner join Department on Department.Department_Id= student.Department  ",Department_String,"
left join fees_receipt on fees_receipt.Student_Id=student.Student_Id
	where student.DeleteStatus=0   ",Search_Date_,SearchbyName_Value,"
	group by T.User_Details_Id,Branch.Branch_Id) as ld
   group by User_Details_Name,Branch_Name 
order by User_Details_Name,Branch_Name 
");


PREPARE QUERY FROM @query;
#select @query;
#insert into data_log_ values(0,@query,'');
EXECUTE QUERY;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Enquiry_Conversion`(In RoleId_ varchar(100),Department_String varchar(1000),Fromdate_ date, Todate_ date,Login_User_Id_ int,Is_Date_Check_ tinyint,Branch_ int)
BEGIN
declare Search_Date_ varchar(500);declare SearchbyName_Value varchar(2000);declare User_Type_ int;

set Search_Date_=''; set SearchbyName_Value='';
set User_Type_=(select User_Type from user_details where User_Details_Id=Login_User_Id_);

if Is_Date_Check_=true then
set Search_Date_=concat(SearchbyName_Value, " and date(student.Entry_Date) >= '", Fromdate_ ,"' and  date(student.Entry_Date) <= '", Todate_,"'");
ELSE
set Search_Date_= "and 1 =1 ";
end if;
 if Branch_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and student.Branch =",Branch_);
end if;
if User_Type_=2 then
 	SET SearchbyName_Value =concat(SearchbyName_Value," and student.Created_By =",Login_User_Id_);
    else
    SET SearchbyName_Value =concat(SearchbyName_Value," and student.Created_By in (select User_Details_Id from user_details where Branch_Id in (select
distinct Branch_Id from user_department where User_Id =",Login_User_Id_," and VIew_All=1))");
end if;

SET @query = Concat( " select sum(Data_Count) as Data_Count,sum(Registration_Count) as Registration_Count ,sum(Total) as Total,Enquiry_Source_Name,Branch_Name
from (
select Enquiry_Source_Name,count(student.Student_Id) as Data_Count,
sum(student.Is_Registered) as Registration_Count, 0 as Total,Branch_Name
from student 
	inner join enquiry_source on enquiry_source.Enquiry_Source_Id= student.Enquiry_Source_Id
    inner join Branch on Branch.Branch_Id= student.Branch
    inner join Department on Department.Department_Id= student.Department  
inner join user_details on user_details.User_Details_Id=student.Created_By
	where student.DeleteStatus=0   ",Search_Date_,"",SearchbyName_Value,"
	group by enquiry_source.Enquiry_Source_Id,Branch.Branch_Id
   union

select Enquiry_Source_Name,0 as Data_Count,
0 as Registration_Count, sum(fees_receipt.Amount) as Total,Branch_Name
from student 
	inner join enquiry_source on enquiry_source.Enquiry_Source_Id= student.Enquiry_Source_Id
    inner join Branch on Branch.Branch_Id= student.Branch
    inner join Department on Department.Department_Id= student.Department  ",Department_String,"
inner join user_details on user_details.User_Details_Id=student.Created_By
left join fees_receipt on fees_receipt.Student_Id=student.Student_Id 
	where student.DeleteStatus=0   ",Search_Date_,"",SearchbyName_Value,"
	group by enquiry_source.Enquiry_Source_Id,Branch.Branch_Id) as ld
   group by Enquiry_Source_Name,Branch_Name 
order by Enquiry_Source_Name,Branch_Name


");
PREPARE QUERY FROM @query;
#insert into data_log_ values(0,@query,'');
EXECUTE QUERY;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Enquiry_Source`( In Enquiry_Source_Name_ varchar(45))
Begin 
 set Enquiry_Source_Name_ = Concat( '%',Enquiry_Source_Name_ ,'%');
 SELECT Enquiry_Source_Id,
Enquiry_Source_Name From Enquiry_Source where Enquiry_Source_Name like Enquiry_Source_Name_ 
and DeleteStatus=false 
order by  Enquiry_Source_Name asc;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Enquiry_Source_Report`(In Search_Fromdate_ date,Todate_ date,Is_Date_Check_ tinyint,Branch_ int)
BEGIN
declare SearchbyName_Value varchar(2000);declare UnionQuery varchar(4000);declare Search_Date_ varchar(500);
declare Search_Date_union varchar(500);declare pos1frm int;declare pos1to int;declare pos2frm int;
declare pos2to int; declare PageSize int;
 set pos1frm=0;    set pos1to=0;    set pos2frm=0;    set pos2to=0;    set PageSize=10;
 set SearchbyName_Value='';
 set Search_Date_='';

if Branch_>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and student.Branch =",Branch_);
end if;

if Is_Date_Check_=true then
set Search_Date_=concat( SearchbyName_Value," and date(student.Entry_Date) >= '", Search_Fromdate_,"' and  date(student.Entry_Date) <= '", Todate_,"'");
ELSE
set Search_Date_= "and 1 =1 ";
end if;

SET @query = Concat( " select count(student.Student_Id) Enquiry_Source_Count,Enquiry_Source_Name,Branch_Name
from student 
	inner join enquiry_source on enquiry_source.Enquiry_Source_Id= student.Enquiry_Source_Id
    inner join Branch on Branch.Branch_Id= student.Branch
	where student.DeleteStatus=0   ",Search_Date_,"",SearchbyName_Value,"
	 group by student.Branch ");
	 
PREPARE QUERY FROM @query;
#select @query;
#insert into data_log_ values(0,@query,'');

EXECUTE QUERY;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Enquiry_Source_Summary_Track`(In RoleId_ varchar(100),Department_String varchar(1000),Fromdate_ date, Todate_ date,Login_User_Id_ int,Is_Date_Check_ tinyint,Branch_ int)
BEGIN
declare Search_Date_ varchar(500);declare SearchbyName_Value varchar(2000);declare User_Type_ int;
set Search_Date_=''; set SearchbyName_Value='';
set User_Type_=(select User_Type from user_details where User_Details_Id=Login_User_Id_);
if Is_Date_Check_=true then
set Search_Date_=concat( SearchbyName_Value," and date(student.Entry_Date) >= '", Fromdate_ ,"' and  date(student.Entry_Date) <= '", Todate_,"'");
ELSE
set Search_Date_= "and 1 =1 ";
end if;
if Branch_>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and user_details.Branch_Id =",Branch_);
end if;
if User_Type_=2 then
 	SET SearchbyName_Value =concat(SearchbyName_Value," and student.Created_By =",Login_User_Id_);
    else
    SET SearchbyName_Value =concat(SearchbyName_Value," and student.Created_By in (select User_Details_Id from user_details where Branch_Id in (select
distinct Branch_Id from user_department where User_Id =",Login_User_Id_," and VIew_All=1))");
end if;
SET @query = Concat( " select Enquiry_Source_Name,count(student.Student_Id) as Data_Count, Branch_Name  from
		enquiry_source left join
		student on enquiry_source.Enquiry_Source_Id=student.Enquiry_Source_Id
		inner join Department on Department.Department_Id= student.Department  
		inner join user_details on user_details.User_Details_Id=student.Created_By
		inner join Branch on Branch.Branch_Id= user_details.Branch_Id
		and student.DeleteStatus=0   and enquiry_source.DeleteStatus=0  ", Search_Date_ ,"",SearchbyName_Value,"
		and user_details.Role_Id in(",RoleId_,") 
		group by enquiry_source.Enquiry_Source_Id
		order by Branch,User_Id
    ");
PREPARE QUERY FROM @query;
#select @query;
insert into data_log_ values(0,@query,'');
EXECUTE QUERY;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Fees`( In Fees_Name_ varchar(45))
Begin 
 set Fees_Name_ = Concat( '%',Fees_Name_ ,'%');
 SELECT Fees_Id,
Fees_Name From fees where Fees_Name like Fees_Name_ and DeleteStatus=false order by Fees_Name asc;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Fees_Data`( In Fees_Name_ varchar(45))
Begin 
 set Fees_Name_ = Concat( '%',Fees_Name_ ,'%');
 SELECT Fees_Id,
Fees_Name From fees where Fees_Name like Fees_Name_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Fees_Receipt_Report`(In Fromdate_ date,Todate_ date,RoleId_ varchar(100),Department_String varchar(1000),Search_By_ int,
SearchbyName_ varchar(50),Department_ int,Branch_ int,By_User_ int,Is_Date_Check_ Tinyint,
Page_Index1_ int,Page_Index2_ int,Login_User_Id_ int,RowCount int ,RowCount2 int,Fees_Id int)
BEGIN
declare SearchbyName_Value varchar(2000);declare UnionQuery varchar(4000);declare Search_Date_ varchar(500);
declare Search_Date_union varchar(500);declare pos1frm int;declare pos1to int;declare pos2frm int;
declare pos2to int; declare PageSize int;declare User_Type_ int;
 set pos1frm=0;    set pos1to=0;    set pos2frm=0;    set pos2to=0;    set PageSize=10;
 set SearchbyName_Value='';
 set Search_Date_='';
 set User_Type_=(select User_Type from user_details where User_Details_Id=Login_User_Id_);

if(SearchbyName_ !='0') then
if Search_By_=1 then
SET SearchbyName_Value =   Concat( SearchbyName_Value," and student.Student_Name like '%",SearchbyName_ ,"%'") ;
end if;
end if;
if Department_>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and student.Department =",Department_);
end if;
if Branch_>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and  fees_receipt.Fee_Receipt_Branch =",Branch_);
end if;
if User_Type_=2 then
 	SET SearchbyName_Value =concat(SearchbyName_Value," and fees_receipt.User_Id =",Login_User_Id_);
    else
    SET SearchbyName_Value =concat(SearchbyName_Value," and fees_receipt.User_Id in (select User_Details_Id from user_details where Branch_Id in (select
distinct Branch_Id from user_department where User_Id =",Login_User_Id_," and VIew_All=1))");
end if;
if By_User_>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and Fees_Receipt.User_Id =",By_User_);
end if;
if Fees_Id>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and fees_receipt.Fees_Id =",Fees_Id);
end if;
if Is_Date_Check_=true then
set Search_Date_=concat(SearchbyName_Value, " and date(Fees_Receipt.Entry_Date) >= '", Fromdate_ ,"' and  date(Fees_Receipt.Entry_Date) <= '", Todate_,"'");

ELSE
set Search_Date_= "and 1 =1 ";
end if;
set UnionQuery="";
SET @query = Concat( "select student.Student_Id,
student.Student_Name,(Date_Format(student.Registered_On,'%d-%m-%Y-%h:%i')) As Registered_On ,
    (Date_Format(Fees_Receipt.Entry_Date,'%d-%m-%Y  %h:%i')) As Entry_Date,  (Date_Format(student.Next_FollowUp_Date,'%d-%m-%Y')) As Next_FollowUp_Date,
Department.Department_Name,Department.FollowUp,Department_Status.Department_Status_Name,T.User_Details_Name,
B.User_Details_Name Registered_By_Name,Branch.Branch_Name,Is_Registered,user_details.User_Details_Name As Created_By_Name,
    F_user.User_Details_Name As Fees_Collected_By,Fees_Receipt.Amount,Fees_Receipt.Description,Fees.Fees_Name ,By_User_Id,Fees_Receipt.User_Id as User_Id_
from student
inner join Department on Department.Department_Id= student.Department  ",Department_String,"
inner join user_details on user_details.User_Details_Id=student.Created_By
inner join Branch on Branch.Branch_Id= student.Branch
inner join Department_Status on Department_Status.Department_Status_Id=student.Status
inner join user_details as T on T.User_Details_Id=student.User_Id
left join user_details as B on B.User_Details_Id=student.Registered_By
inner join Fees_Receipt on Fees_Receipt.Student_Id=student.Student_Id
inner join user_details as F_user on F_user.User_Details_Id=Fees_Receipt.User_Id
inner join Fees on Fees.Fees_Id=Fees_Receipt.Fees_Id 
    where student.DeleteStatus=0 and  fees_receipt.Delete_Status=0  ",SearchbyName_Value," ",Search_Date_,"
and T.Role_Id in(",RoleId_,")
order by Fees_Receipt.Entry_Date ");
PREPARE QUERY FROM @query;
#select @query;
#insert into data_log_ values(0,@query,'');
EXECUTE QUERY;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Intake`( In Intake_Name_ varchar(100))
Begin 
 set Intake_Name_ = Concat( '%',Intake_Name_ ,'%');
 SELECT Intake_Id,
Intake_Name From Intake where Intake_Name like Intake_Name_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Internship`( In Internship_Name_ varchar(100))
Begin 
 set Internship_Name_ = Concat( '%',Internship_Name_ ,'%');
 SELECT Internship_Id,
Internship_Name From Internship where Internship_Name like Internship_Name_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Level_Detail`( In Level_Detail_Name_ varchar(100))
Begin 
 set Level_Detail_Name_ = Concat( '%',Level_Detail_Name_ ,'%');
 SELECT Level_Detail_Id,
Level_Detail_Name From Level_Detail where Level_Detail_Name like Level_Detail_Name_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Receipt`( In Student_Id_ int)
Begin 
 SELECT Fees_Receipt_Id,
Student_Id,
(Date_Format(Entry_Date,'%Y-%m-%d')) As Entry_Date,
User_Details_Name,
Description,
Fees_Name,
fees_receipt.Fees_Id,
Amount,
(Date_Format(Actual_Entry_Date,'%Y-%m-%d %h:%i')) As Actual_Entry_Date,Voucher_No
 From fees_receipt 
 inner join fees on fees_receipt.Fees_Id= fees.Fees_Id  
inner join user_details on fees_receipt.User_Id=user_details.User_Details_Id 
where  Student_Id=Student_Id_ and Delete_Status=false
 order by Fees_Receipt_Id asc ;
 select Fees_Id,Fees_Name from fees where DeleteStatus=false order by Fees_Name asc;
 
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Registration_Report`(In Fromdate_ date,Todate_ date,RoleId_ varchar(100),Department_String varchar(1000),Search_By_ int,
SearchbyName_ varchar(50),Department_ int,Branch_ int,By_User_ int,Is_Date_Check_ Tinyint,
Page_Index1_ int,Page_Index2_ int,Login_User_Id_ int,RowCount int ,RowCount2 int)
BEGIN
declare SearchbyName_Value varchar(2000);declare UnionQuery varchar(4000);declare Search_Date_ varchar(500);
declare Search_Date_union varchar(500);declare pos1frm int;declare pos1to int;declare pos2frm int;
declare pos2to int; declare PageSize int;declare User_Type_ int;
 set pos1frm=0;    set pos1to=0;    set pos2frm=0;    set pos2to=0;    set PageSize=10;
 set SearchbyName_Value='';
 set Search_Date_='';
 set User_Type_=(select User_Type from user_details where User_Details_Id=Login_User_Id_);
if(SearchbyName_ !='0') then
	if Search_By_=1 then
	SET SearchbyName_Value =   Concat( SearchbyName_Value," and student.Student_Name like '%",SearchbyName_ ,"%'") ;
	end if;
end if;
if User_Type_=2 then
 	SET SearchbyName_Value =concat(SearchbyName_Value," and student.Registered_By =",Login_User_Id_);
    else
    SET SearchbyName_Value =concat(SearchbyName_Value," and student.Registered_By in (select User_Details_Id from user_details where Branch_Id in (select
distinct Branch_Id from user_department where User_Id =",Login_User_Id_," and VIew_All=1))");
end if;
if Department_>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and student.Department =",Department_);
end if;
if Branch_>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and  student.Registration_Branch =",Branch_);
end if;
if By_User_>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and student.Registered_By =",By_User_);
end if;
if Is_Date_Check_=true then
set Search_Date_=concat( SearchbyName_Value," and date(student.Registered_On) >= '", Fromdate_ ,"' and  date(student.Registered_On) <= '", Todate_,"'");
ELSE
set Search_Date_= "and 1 =1 ";
end if;
set UnionQuery="";
SET @query = Concat( "select * from (select * from(select CAST(CAST(1 AS UNSIGNED) AS SIGNED)as tp,student.Student_Id,
student.Student_Name,student.Phone_Number,student.Remark,(Date_Format(student.Registered_On,'%d-%m-%Y-%h:%i')) As Registered_On ,
    (Date_Format(student.Entry_Date,'%d-%m-%Y   %h:%i')) As Entry_Date,  (Date_Format(student.Next_FollowUp_Date,'%d-%m-%Y')) As Next_FollowUp_Date,
Department.Department_Name,Department.FollowUp,Department_Status.Department_Status_Name,T.User_Details_Name,
B.User_Details_Name Registered_By_Name, CAST(CAST(ROW_NUMBER()OVER(ORDER BY student.Student_Id DESC)AS UNSIGNED)AS SIGNED)AS
RowNo,D.Branch_Name,Is_Registered,user_details.User_Details_Name As Created_By_Name
from student
inner join Department on Department.Department_Id= student.Department  ",Department_String,"
inner join user_details on user_details.User_Details_Id=student.Created_By

inner join Branch as D on D.Branch_Id= student.Registration_Branch
inner join Department_Status on Department_Status.Department_Status_Id=student.Status
inner join user_details as T on T.User_Details_Id=student.User_Id
inner join user_details as B on B.User_Details_Id=student.Registered_By
where student.DeleteStatus=0    and student.Is_Registered=1  ",SearchbyName_Value," ",Search_Date_,"
and T.Role_Id in(",RoleId_,"))as lds )as ldtwo
order by tp ");

PREPARE QUERY FROM @query;
#select @query;inner join Branch on Branch.Branch_Id= student.Branch
#insert into data_log_ values(0,@query,'');

EXECUTE QUERY;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Remarks`( In Remarks_Name_ varchar(100))
Begin 
 set Remarks_Name_ = Concat( '%',Remarks_Name_ ,'%');
 SELECT Remarks_Id,
Remarks_Name From Remarks where Remarks_Name like Remarks_Name_ and DeleteStatus=false 
order by Remarks_Name asc;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Student`(In Fromdate_ date,Todate_ date,RoleId_ varchar(100),Department_String varchar(4000),Search_By_ int,
SearchbyName_ varchar(50),Department_ int,Branch_ int,By_User_ int,Status_Id_ int,Is_Date_Check_ Tinyint,
Page_Index1_ int,Page_Index2_ int,Login_User_Id_ int,RowCount int ,RowCount2 int,Register_Value int)
BEGIN
declare SearchbyName_Value varchar(2000);declare UnionQuery varchar(4000);declare Search_Date_ varchar(500);
declare Search_Date_union varchar(500);declare pos1frm int;declare pos1to int;declare pos2frm int;
declare pos2to int; declare PageSize int;declare Search_By_Registered varchar(500);declare User_Status int;declare more_info int;
 set pos1frm=0;    set pos1to=0;    set pos2frm=0;    set pos2to=0;    set PageSize=10; set more_info=0;
 set SearchbyName_Value='';
 set Search_Date_='';
 set User_Status= (select Working_Status from user_details where User_Details_Id=Login_User_Id_ );
if(SearchbyName_ !='') then
#if Search_By_=1 then
 set SearchbyName_Value = replace(replace(SearchbyName_Value,'+',''),' ','');
SET SearchbyName_Value =   Concat( SearchbyName_Value," and student.Student_Name like '%",SearchbyName_ ,"%' or  replace(replace(student.Phone_Number,'+',''),' ','') like '%",SearchbyName_ ,"%'
        or  replace(replace(student.Whatsapp,'+',''),' ','')  like '%",SearchbyName_ ,"%' or replace(replace(student.Alternative_Phone_Number,'+',''),' ','') like '%",SearchbyName_ ,"%' or  student.Email like '%",SearchbyName_ ,"%' or student.Alternative_Email like '%",SearchbyName_ ,"%' ") ;
#end if;
							/*    if Search_By_=2 then
							   set SearchbyName_Value = replace(replace(SearchbyName_Value,'+',''),' ','');
							   
							SET SearchbyName_Value =   Concat(SearchbyName_Value, " and replace(replace(student.Phone_Number,'+',''),' ','') like '%",SearchbyName_ ,"%'
									or  replace(replace(student.Whatsapp,'+',''),' ','')  like '%",SearchbyName_ ,"%' or replace(replace(student.Alternative_Phone_Number,'+',''),' ','') like '%",SearchbyName_ ,"%' ") ;
							end if;
							if Search_By_=3 then
							SET SearchbyName_Value =   Concat(SearchbyName_Value, " and student.Email like '%",SearchbyName_ ,"%'
							or student.Alternative_Email like '%",SearchbyName_ ,"%' ") ;
							end if;*/

end if;

if Register_Value=2 then
Set SearchbyName_Value= Concat( SearchbyName_Value," and student.Is_Registered= ",1) ;
    elseif Register_Value=3 then
    Set SearchbyName_Value= Concat( SearchbyName_Value," and student.Is_Registered= ",0) ;
    end if;
   
if Department_>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and student.Department =",Department_);
end if;
if Branch_>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and student.Branch =",Branch_);
end if;
if By_User_>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and student.User_Id =",By_User_);
end if;
if Status_Id_>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and student.Status =",Status_Id_);
end if;
if(SearchbyName_ !='') then
	set Is_Date_Check_=false;
end if;
if Is_Date_Check_=true then
set Search_Date_=concat( " and date(student.Next_FollowUp_Date) >= '", Fromdate_ ,"' and  date(student.Next_FollowUp_Date) <= '", Todate_,"'");
set Search_Date_union=concat( " and  date(student.Next_FollowUp_Date) < '", Fromdate_,"'");
ELSE
set Search_Date_= "and 1 =1 ";
end if;
set UnionQuery="";
if User_Status=1 then
if Is_Date_Check_=true then

#inner join user_details on user_details.User_Details_Id=student.User_Id
#inner join user_details as B on B.User_Details_Id=student.By_User_Id
#B.User_Details_Name Registered_By_Name,
set UnionQuery=concat("  union select * from(select  CAST(CAST(2 AS UNSIGNED) AS SIGNED)   as tp,student.Student_Id,
student.Student_Name,student.Phone_Number,student.Remark,(Date_Format(student.Next_FollowUp_Date,'%d-%m-%Y')) As Next_FollowUp_Date,
Department.Department_Name,Department.FollowUp,Department_Status.Department_Status_Name,T.User_Details_Name User_Details_Name,

CAST(CAST(ROW_NUMBER()OVER(ORDER BY student.Student_Id DESC,Student.Next_FollowUp_Date desc)AS UNSIGNED)AS SIGNED)AS
RowNo,Branch.Branch_Name,Client_Accounts_Name,Agent_Id,student.Is_Registered,1 as User_Status,0 as more_info
from student
inner join Department on Department.Department_Id= student.Department and department.FollowUp=1 and student.DeleteStatus=0 ",Search_Date_union ," ",Department_String,"

inner join Branch on Branch.Branch_Id= student.Branch
inner join client_accounts on client_accounts.Client_Accounts_Id= student.Agent_Id
inner join Department_Status on Department_Status.Department_Status_Id=student.Status
inner join user_details as T on T.User_Details_Id=student.User_Id

where student.DeleteStatus=0    ",SearchbyName_Value, " " ,Search_Date_union,"
and T.Role_Id in(",RoleId_,"))as lds WHERE RowNo >=",RowCount," AND RowNo<= ",RowCount2
);
end if;
SET @query = Concat( "select * from (select * from(select CAST(CAST(1 AS UNSIGNED) AS SIGNED)as tp,student.Student_Id,
student.Student_Name,student.Phone_Number,student.Remark,(Date_Format(student.Next_FollowUp_Date,'%d-%m-%Y')) As Next_FollowUp_Date,
Department.Department_Name,Department.FollowUp,Department_Status.Department_Status_Name,T.User_Details_Name User_Details_Name,

    CAST(CAST(ROW_NUMBER()OVER(ORDER BY student.Student_Id DESC,Student.Next_FollowUp_Date desc)AS UNSIGNED)AS SIGNED)AS
RowNo,Branch.Branch_Name,Client_Accounts_Name,Agent_Id,student.Is_Registered,1 as User_Status,0 as more_info
from student
inner join Department on Department.Department_Id= student.Department and student.DeleteStatus=0 ",Search_Date_," ",Department_String,"

inner join Branch on Branch.Branch_Id= student.Branch
inner join client_accounts on client_accounts.Client_Accounts_Id= student.Agent_Id
inner join Department_Status on Department_Status.Department_Status_Id=student.Status
inner join user_details as T on T.User_Details_Id=student.User_Id

where student.DeleteStatus=0     ",SearchbyName_Value,"
and T.Role_Id in(",RoleId_,"))as lds WHERE RowNo >=",Page_Index1_," AND RowNo<= ",Page_Index2_,UnionQuery,"
)as ldtwo order by tp, RowNo LIMIT ",PageSize
);


PREPARE QUERY FROM @query;
#select @query;
#delete from data_log_;
insert into data_log_ values(0,@query,'');
EXECUTE QUERY;
else
 select 2 as User_Status;
 end if;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Student_Agent`(In From_Date_ datetime,To_Date_ datetime,Is_Date_Check_ Tinyint,Student_Name_ varchar(100),
Phone_Number_ varchar(25), Agent_Id_ int,Student_Status_Id_ int, Pointer_Start_ Varchar(10), Pointer_Stop_ Varchar(10), Page_Length_ Varchar(10))
Begin 
declare Search_Date_ varchar(500);declare SearchbyName_Value varchar(4000);
set Search_Date_="";set SearchbyName_Value=""; 

if Is_Date_Check_=true then
	set Search_Date_=concat(SearchbyName_Value," and date(Student.Entry_Date) >= '", From_Date_ ,"' and  date(Student.Entry_Date) <= '", To_Date_,"'");
end if;
if Student_Name_!='' then
SET SearchbyName_Value =   Concat( SearchbyName_Value ," and Student.Student_Name like '%",Student_Name_ ,"%'") ;
end if;
if Phone_Number_!='' then
SET SearchbyName_Value =   Concat( SearchbyName_Value ," and Student.Phone_Number like '%",Phone_Number_ ,"%'") ;
end if;
if Agent_Id_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and Student.Agent_Id =",Agent_Id_);
end if;
if Student_Status_Id_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and Student.Student_Status_Id =",Student_Status_Id_);
end if;

/* inner join student_course_apply on Student.Student_Id = student_course_apply.Student_Id 
 inner join student_course_selection  on student_course_apply.Student_Course_Apply_Id = student_course_selection.Student_Course_Apply_Id 
 inner join course on student_course_selection.Course_Id = course.Course_Id */
 
SET @query = Concat("select * from (SELECT student.Student_Id,(Date_Format(student.Entry_Date,'%Y-%m-%d')) Entry_Date,student.Student_Name,student.Address1,
student.Email,student.Phone_Number,student.Agent_Id,client_accounts.Client_Accounts_Name,student_status.Student_Status_Name,
 CAST(CAST(ROW_NUMBER()OVER(ORDER BY Student.Student_Name DESC )AS UNSIGNED)AS SIGNED)AS RowNo
 From Student 

 inner join client_accounts on student.Agent_Id=client_accounts.Client_Accounts_Id
 inner join student_status on student.Student_Status_Id=student_status.Student_Status_Id
 
 where Student.DeleteStatus = false  ", Search_Date_ ,SearchbyName_Value," order by Student.Entry_Date desc  )
 as lds WHERE RowNo >=",Pointer_Start_," AND RowNo<= ",Pointer_Stop_,"
 order by  RowNo LIMIT ",Page_Length_);
 
PREPARE QUERY FROM @query;
#delete from data_log_;
#insert into data_log_ values(1,@query,0);
EXECUTE QUERY;
#select @query;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Student_Count`(In Fromdate_ date,Todate_ date,RoleId_ varchar(100),Department_String varchar(1000),Search_By_ int,
SearchbyName_ varchar(50),Department_ int,Branch_ int,By_User_ int,Is_Date_Check_ Tinyint,
Page_Index1_ int,Page_Index2_ int,Login_User_Id_ int,RowCount int ,RowCount2 int)
BEGIN
declare SearchbyName_Value varchar(2000);declare UnionQuery varchar(4000);declare Search_Date_ varchar(500);
declare Search_Date_union varchar(500);declare pos1frm int;declare pos1to int;declare pos2frm int;
declare pos2to int; declare PageSize int;
 set pos1frm=0;    set pos1to=0;    set pos2frm=0;    set pos2to=0;    set PageSize=10;
 set SearchbyName_Value='';
 set Search_Date_='';
if(SearchbyName_ !='0') then
	if Search_By_=1 then
		SET SearchbyName_Value =   Concat( SearchbyName_Value," and student.Student_Name like '%",SearchbyName_ ,"%'") ;
	end if;
end if;
if Department_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and student.Department =",Department_);
end if;
if Branch_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and student.Branch =",Branch_);
end if;
if By_User_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and student.User_Id =",By_User_);
end if;
if Is_Date_Check_=true then
	set Search_Date_=concat( " and student.Next_FollowUp_Date >= '", Fromdate_ ,"' and  student.Next_FollowUp_Date <= '", Todate_,"'");
	set Search_Date_union=concat( " and  student.Entry_Date < '", Fromdate_,"'");
ELSE
	set Search_Date_= "and 1 =1 ";
end if;
set UnionQuery="";
SET @query = Concat(    "select B.User_Details_Name By_User,Department.Department_Name, count(student.Student_Id) Count
from student 
	inner join Department on Department.Department_Id= student.Department  ",Search_Date_," ",Department_String," 
	inner join user_details as B on B.User_Details_Id=student.By_User_Id 
and student.DeleteStatus=0  ",SearchbyName_Value,"  and B.Role_Id in(",RoleId_,") group by student.Department,By_User_Id 
 order by Count desc"
    );
	 
PREPARE QUERY FROM @query;
#select @query;
#insert into data_log_ values(0,@query,'');
EXECUTE QUERY;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Student_Count_Track_Report`(In Fromdate_ date,
By_User_ int)
BEGIN
declare SearchbyName_Value varchar(2000);declare UnionQuery varchar(4000);declare Search_Date_ varchar(500);
declare Search_Date_union varchar(500);declare pos1frm int;declare pos1to int;declare pos2frm int;
declare pos2to int; declare PageSize int;
 set pos1frm=0;    set pos1to=0;    set pos2frm=0;    set pos2to=0;    set PageSize=10;
 set SearchbyName_Value='';
 set Search_Date_='';

SET @query = Concat("select count(student_followup.Student_Id) Count,Date_Format(Entry_Date,'%H') Entry_Date
from student_followup 
	inner join user_details as B on B.User_Details_Id=student_followup.By_User_Id and date(student_followup.Entry_Date )= '", Fromdate_,"'
    and B.User_Details_Id= '", By_User_,"'
    group by (Date_Format(Entry_Date,'%H')) order by Entry_Date asc"
    );	 
PREPARE QUERY FROM @query;
#select @query;
insert into data_log_ values(0,@query,'');
EXECUTE QUERY;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Student_Document`( In Student_Document_Name_ varchar(100))
Begin 
 set Student_Document_Name_ = Concat( '%',Student_Document_Name_ ,'%');
 SELECT Student_Document_Id,
Student_Id,
Document_Id From Student_Document where Student_Document_Name like Student_Document_Name_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Student_Import`(In From_Date_ datetime,To_Date_ datetime,Is_Date_Check_ Tinyint)
Begin 
declare Search_Date_ varchar(500);declare SearchbyName_Value varchar(2000);
declare Search_Date_union varchar(500);
#Declare Import_Master_Id_ int;
set Search_Date_="";set SearchbyName_Value=""; 
if Is_Date_Check_=true then
	set Search_Date_=concat(" and date(import_students_master.Entry_Date) >= '", From_Date_ ,"' and  date(import_students_master.Entry_Date) <= '", To_Date_,"'");
end if;

SET @query = Concat("SELECT User_Details_Name,(Date_Format(Entry_Date,'%Y-%m-%d')) Entry_Date
 From import_students_master ",Search_Date_," 
 inner join user_details  on  user_details.User_Details_Id = import_students_master.By_User_Id 
 order by import_students_master.Entry_Date desc ");
PREPARE QUERY FROM @query;EXECUTE QUERY;
#insert into db_logs values(1,@query,1,1);
#select @query;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Student_Message`( In Student_Id_ varchar(100))
Begin 

 SELECT Student_Message_Id,
Student_Id,
Message_Detail From Student_Message where Student_Id=Student_Id_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Student_Report`(In Fromdate_ date,Todate_ date,RoleId_ varchar(100),Department_String varchar(1000),Search_By_ int,
SearchbyName_ varchar(50),Department_ int,Branch_ int,By_User_ int,Is_Date_Check_ Tinyint,
Page_Index1_ int,Page_Index2_ int,Login_User_Id_ int,RowCount int ,RowCount2 int,remarks_ int,To_User_ int)
BEGIN
declare SearchbyName_Value varchar(2000);declare UnionQuery varchar(4000);declare Search_Date_ varchar(500);
declare Search_Date_union varchar(500);declare pos1frm int;declare pos1to int;declare pos2frm int;
declare pos2to int; declare PageSize int;
 set pos1frm=0;    set pos1to=0;    set pos2frm=0;    set pos2to=0;    set PageSize=10;
 set SearchbyName_Value='';
 set Search_Date_='';
if(SearchbyName_ !='0') then
	if Search_By_=1 then
		SET SearchbyName_Value =   Concat( SearchbyName_Value," and student.Student_Name like '%",SearchbyName_ ,"%'") ;
	end if;
end if;
if Department_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and student.Department =",Department_);
end if;
if Branch_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and student.Branch =",Branch_);
end if;
if By_User_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and student.Created_By =",By_User_);
end if;
if To_User_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and student.User_Id =",To_User_);
end if;
if remarks_ >0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and student.Remark_Id =",remarks_);
end if;
if Is_Date_Check_=true then
	set Search_Date_=concat( SearchbyName_Value," and date(student.Entry_Date) >= '", Fromdate_ ,"' and  date(student.Entry_Date) <= '", Todate_,"'");
	
ELSE
	set Search_Date_= "and 1 =1 ";
end if;
set UnionQuery="";
SET @query = Concat( "select * from (select * from(select CAST(CAST(1 AS UNSIGNED) AS SIGNED)as tp,student.Student_Id,
	student.Student_Name,student.Phone_Number,student.Remark,(Date_Format(student.Registered_On,'%d-%m-%Y   %h:%i')) As Registered_On ,
    (Date_Format(student.Entry_Date,'%d-%m-%Y   %h:%i')) As Entry_Date,  (Date_Format(student.Next_FollowUp_Date,'%d-%m-%Y')) As Next_FollowUp_Date,
	Department.Department_Name,Department.FollowUp,Department_Status.Department_Status_Name,T.User_Details_Name,
	B.User_Details_Name Registered_By_Name,	CAST(CAST(ROW_NUMBER()OVER(ORDER BY student.Student_Id DESC)AS UNSIGNED)AS SIGNED)AS 
	RowNo,Branch.Branch_Name,Is_Registered,user_details.User_Details_Name As Created_By_Name
from student 
	inner join Department on Department.Department_Id= student.Department  ",Department_String," 
	inner join user_details on user_details.User_Details_Id=student.Created_By 
	inner join Branch on Branch.Branch_Id= student.Branch
	inner join Department_Status on Department_Status.Department_Status_Id=student.Status 
	inner join user_details as T on T.User_Details_Id=student.User_Id 
	left join user_details as B on B.User_Details_Id=student.Registered_By 
	where student.DeleteStatus=0    and student.DeleteStatus=0  ",SearchbyName_Value," ",Search_Date_," 
	and T.Role_Id in(",RoleId_,"))as lds )as ldtwo
	order by tp ");	 
PREPARE QUERY FROM @query;
#select @query;
#insert into data_log_ values(0,@query,'');
EXECUTE QUERY;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Student_Status`( In Student_Status_Name_ varchar(100))
Begin 
 set Student_Status_Name_ = Concat( '%',Student_Status_Name_ ,'%');
 SELECT Student_Status_Id,
Student_Status_Name From Student_Status where Student_Status_Name like Student_Status_Name_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Student_Summary`(In Fromdate_ date,Todate_ date,RoleId_ varchar(100),Department_String varchar(1000),Search_By_ int,
SearchbyName_ varchar(50),Department_ int,Branch_ int,By_User_ int,Is_Date_Check_ Tinyint,
Page_Index1_ int,Page_Index2_ int,Login_User_Id_ int,RowCount int ,RowCount2 int)
BEGIN
declare SearchbyName_Value varchar(2000);declare UnionQuery varchar(4000);declare Search_Date_ varchar(500);
declare Search_Date_union varchar(500);declare pos1frm int;declare pos1to int;declare pos2frm int;
declare pos2to int; declare PageSize int;
 set pos1frm=0;    set pos1to=0;    set pos2frm=0;    set pos2to=0;    set PageSize=10;
 set SearchbyName_Value='';
 set Search_Date_='';
if(SearchbyName_ !='0') then
	if Search_By_=1 then
		SET SearchbyName_Value =   Concat( SearchbyName_Value," and student.Student_Name like '%",SearchbyName_ ,"%'") ;
	end if;
end if;
if Department_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and student.Department =",Department_);
end if;
if Branch_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and student.Branch =",Branch_);
end if;
if By_User_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and student.Created_By =",By_User_);
end if;
if Is_Date_Check_=true then
	set Search_Date_=concat( SearchbyName_Value," and date(student.Entry_Date) >= '", Fromdate_ ,"' and  date(student.Entry_Date) <= '", Todate_,"'");
	
ELSE
	set Search_Date_= "and 1 =1 ";
end if;
set UnionQuery="";
SET @query = Concat("select count(student.Student_Id) Count,Department_Name
from student
	inner join department on student.Department=department.Department_Id     
    group by department.Department_Id"
    );	 
	 
PREPARE QUERY FROM @query;
#select @query;
#insert into data_log_ values(0,@query,'');

EXECUTE QUERY;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Student_Summary_Report`(In Fromdate_ date,Todate_ date,RoleId_ varchar(100),Department_String varchar(1000),Search_By_ int,
SearchbyName_ varchar(50),Department_ int,Branch_ int,By_User_ int,Is_Date_Check_ Tinyint,
Page_Index1_ int,Page_Index2_ int,Login_User_Id_ int,RowCount int ,RowCount2 int)
BEGIN
declare SearchbyName_Value varchar(2000);declare UnionQuery varchar(4000);declare Search_Date_ varchar(500);
declare Search_Date_union varchar(500);declare pos1frm int;declare pos1to int;declare pos2frm int;declare User_Type_ int;
declare pos2to int; declare PageSize int;
 set pos1frm=0;    set pos1to=0;    set pos2frm=0;    set pos2to=0;    set PageSize=10;
 set SearchbyName_Value='';
 set Search_Date_='';
set User_Type_=(select User_Type from user_details where User_Details_Id=Login_User_Id_);

if Branch_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and student.Branch =",Branch_);
end if;
if User_Type_=2 then
 	SET SearchbyName_Value =concat(SearchbyName_Value," and student.User_Id =",Login_User_Id_);
    else
    SET SearchbyName_Value =concat(SearchbyName_Value," and student.User_Id in (select User_Details_Id from user_details where Branch_Id in (select
distinct Branch_Id from user_department where User_Id =",Login_User_Id_," and VIew_All=1))");
end if;

if Is_Date_Check_=true then
	set Search_Date_=concat( SearchbyName_Value," and date(student.Next_FollowUp_Date) >= '", Fromdate_ ,"' and  date(student.Next_FollowUp_Date) <= '", Todate_,"'");
	
ELSE
	set Search_Date_= "and 1 =1 ";
end if;
set UnionQuery="";
SET @query = Concat("select count(student.Student_Id) Data_Count,Department_Name,Branch_Name
from student
	inner join department on student.Department=department.Department_Id 
    inner join branch on student.Branch=branch.Branch_Id
    where department.Is_Delete=0 and student.DeleteStatus=0 ",Search_Date_," ",SearchbyName_Value,"  
    group by department.Department_Id ,branch.Branch_Id order by Branch,Department"
    );	 
	 
PREPARE QUERY FROM @query;
#select @query;
#insert into data_log_ values(0,@query,'');

EXECUTE QUERY;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Student_With_PhoneNumber`(In Phone_Number_ varchar(25))
BEGIN
declare SearchbyNumber_Value varchar(500);
declare Alternative_Phone_ varchar(25);
 set SearchbyNumber_Value = replace(replace(SearchbyNumber_Value,'+',''),' ','');
SET SearchbyNumber_Value = Concat(" and replace(replace(student.Phone_Number,'+',''),' ','') like '%",Phone_Number_,"%'
     or  replace(replace(student.Whatsapp,'+',''),' ','')  like '%",Phone_Number_,"%' or replace(replace(student.Alternative_Phone_Number,'+',''),' ','') like '%",Phone_Number_,"%' ") ;
#SET SearchbyNumber_Value=Concat( SearchbyNumber_Value," and( student.Phone_Number =",Phone_Number_," or student.Alternative_Phone_Number = ",Phone_Number_," or student.Whatsapp = ",Phone_Number_,")" ) ;

 # Concat( SearchbyNumber_Value," and( student.Phone_Number =",Phone_Number_," or student.Alternative_Phone_Number = ",Phone_Number_," or student.Whatsapp = ",Phone_Number_,")" ) ;
#SET SearchbyNumber_Value =   Concat() ;

	#SET SearchbyNumber_Value =   Concat( " and student.Phone_Number =",Phone_Number_ , " or  (student.Alternative_Phone_Number =)",Phone_Number_ ) ;
SET @query = Concat( "select student.Student_Id,
student.Student_Name,student.Phone_Number,student.Alternative_Phone_Number,student.Remark,(Date_Format(student.Registered_On,'%d-%m-%Y-%h:%i')) As Registered_On ,
    (Date_Format(student.Entry_Date,'%d-%m-%Y')) As Entry_Date,  (Date_Format(student.Next_FollowUp_Date,'%d-%m-%Y')) As Next_FollowUp_Date,
Department.Department_Name,Department.FollowUp,Department_Status.Department_Status_Name,T.User_Details_Name,
B.User_Details_Name Registered_By_Name,
Branch.Branch_Name,Is_Registered,user_details.User_Details_Name As Created_By_Name,Whatsapp
from student
inner join Department on Department.Department_Id= student.Department  
inner join user_details on user_details.User_Details_Id=student.Created_By
inner join Branch on Branch.Branch_Id= student.Branch
inner join Department_Status on Department_Status.Department_Status_Id=student.Status
inner join user_details as T on T.User_Details_Id=student.User_Id
inner join user_details as B on B.User_Details_Id=student.Created_By
where student.DeleteStatus=0",SearchbyNumber_Value," 
order by student.Phone_Number");
PREPARE QUERY FROM @query;
#select @query;
insert into data_log_ values(0,@query,'');
EXECUTE QUERY;
select 1;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Subject`( In Subject_Name_ varchar(100))
Begin 
 set Subject_Name_ = Concat( '%',Subject_Name_ ,'%');
 SELECT Subject_Id,
Subject_Name From Subject where Subject_Name like Subject_Name_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Sub_Section`( In Sub_Section_Name_ varchar(100))
Begin 
 set Sub_Section_Name_ = Concat( '%',Sub_Section_Name_ ,'%');
 SELECT Sub_Section_Id,
Sub_Section_Name From Sub_Section where Sub_Section_Name like Sub_Section_Name_ and DeleteStatus=false ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_University`( In University_Name_ varchar(100),Country_ int,Status_ int)
Begin 
 declare Search_Date_ varchar(500);declare SearchbyName_Value varchar(2000);
set Search_Date_="";set SearchbyName_Value="";
if Country_>0 then
		SET SearchbyName_Value =concat(SearchbyName_Value," and university.Country_Id =",Country_);
	end if;
	if Status_>0 then
		SET SearchbyName_Value =concat(SearchbyName_Value," and university.Status =",Status_);
	end if;
	if University_Name_!='' then
    SET SearchbyName_Value =   Concat(SearchbyName_Value, " and university.University_Name like '%",University_Name_ ,"%'") ;
	end if;
 SET @query = Concat("SELECT University.University_Id ,University_Name,About ,About1 ,About2 ,Location ,Address ,Founded_In ,
 Institution_Type ,Cost_Of_Living ,Tution_Fee ,Application_Fee ,Type_Of_Accomodation ,Contact_Number ,Email ,
 Web ,Fb ,Linkedin ,Twitter ,Googlemap ,Status ,University.Country_Id , Sub_Heading1 ,Sub_Heading2 ,Sub_Heading3 ,
 School_Rank ,Video_Link ,Sub_Heading_Colored ,Banner_Image,Country_Name,Status_Name
 From University 
 inner join Country on Country.Country_Id=University.Country_Id
 inner join Status on Status.Status_Id=University.Status
where University.DeleteStatus=false" ,SearchbyName_Value,"");
PREPARE QUERY FROM @query;EXECUTE QUERY;
#select @query;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Userwise_Summary`(In Fromdate_ date,Todate_ date,RoleId_ varchar(100),Department_String varchar(1000),Search_By_ int,
SearchbyName_ varchar(50),Department_ int,Branch_ int,By_User_ int,Is_Date_Check_ Tinyint,
Page_Index1_ int,Page_Index2_ int,Login_User_Id_ int,RowCount int ,RowCount2 int)
BEGIN
declare SearchbyName_Value varchar(2000);declare UnionQuery varchar(4000);declare Search_Date_ varchar(500);
declare Search_Date_union varchar(500);declare pos1frm int;declare pos1to int;declare pos2frm int;
declare pos2to int; declare PageSize int;declare User_Type_ int;
 set pos1frm=0;    set pos1to=0;    set pos2frm=0;    set pos2to=0;    set PageSize=10;
 set SearchbyName_Value='';
 set Search_Date_='';
set User_Type_=(select User_Type from user_details where User_Details_Id=Login_User_Id_);

if By_User_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and fees_receipt.User_Id =",By_User_);
end if;
if Branch_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and fees_receipt.Fee_Receipt_Branch =",Branch_);
end if;
if User_Type_=2 then
 	SET SearchbyName_Value =concat(SearchbyName_Value," and fees_receipt.User_Id=",Login_User_Id_);
    else
    SET SearchbyName_Value =concat(SearchbyName_Value," and fees_receipt.User_Id in (select User_Details_Id from user_details where Branch_Id in (select
distinct Branch_Id from user_department where User_Id =",Login_User_Id_," and VIew_All=1))");
end if;
if Is_Date_Check_=true then
	set Search_Date_=concat(SearchbyName_Value, " and date(fees_receipt.Entry_Date) >= '", Fromdate_ ,"' and  date(fees_receipt.Entry_Date) <= '", Todate_,"'");
ELSE
	set Search_Date_= "and 1 =1 ";
end if;

SET @query = Concat( "select sum(fees_receipt.Amount) Data_Count , User_Details_Name ,Branch_Name,User_Details_Id
from 
student
inner join fees_receipt on student.Student_Id=fees_receipt.Student_Id
inner join Branch on Branch.Branch_Id= fees_receipt.Fee_Receipt_Branch
inner join user_details on User_Details_Id =fees_receipt.User_Id
where fees_receipt.Delete_Status=0 and student.DeleteStatus=0  ",Search_Date_," ",SearchbyName_Value,"
group by fees_receipt.User_Id order by Branch,student.User_Id");
PREPARE QUERY FROM @query;
#select @query;
insert into data_log_ values(0,@query,'');
EXECUTE QUERY;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_User_Details`( In User_Details_Name_ varchar(100), Branch_Id_ int)
Begin 
declare SearchbyName_Value varchar(2000);
set SearchbyName_Value='';
if (User_Details_Name_ !='0') then
	 set  SearchbyName_Value =    Concat( SearchbyName_Value," and user_details.User_Details_Name like '%",User_Details_Name_,"%'");
end if;
if Branch_Id_>0 then
 set SearchbyName_Value =  Concat(SearchbyName_Value," and user_details.Branch_Id = " , Branch_Id_);
end if;
 SET @query = Concat("SELECT User_Details_Id,User_Details_Name,Password,Working_Status,User_Type,Role_Id,User_Status_Name,User_Type_Name,Branch_Name,
 User_Details.Address1, User_Details.Address2,User_Details.Address3,User_Details.Address4,User_Details.Pincode,
 User_Details.Mobile,User_Details.Email,branch.Branch_Id,branch.Branch_Name,User_Details.Registration_Target,User_Details.FollowUp_Target
From User_Details
inner join user_status on User_Details.Working_Status=user_status.User_Status_Id
inner join user_type on User_Details.User_Type=user_type.User_Type_Id
inner join branch on User_Details.Branch_Id=branch.Branch_Id
where User_Details.DeleteStatus=false ",SearchbyName_Value,"
order by User_Details_Id ");
PREPARE QUERY FROM @query;
#select @query;
#insert into data_log_ values(0,@query,'');
EXECUTE QUERY;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_User_Menu_Selection`( )
Begin 
SELECT 
	Menu_Id,
	Menu_Name,
	Menu_Order,
	IsEdit Edit_Check,
	IsSave Save_Check,
	IsDelete  Delete_Check,
	IsView,
	Menu_Status 
From Menu 
	where Menu_Status=1 and DeleteStatus=false 
order by Menu.Menu_Id asc;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_User_Role`(In User_Role_Name_ varchar(100))
BEGIN
 set User_Role_Name_ = Concat( '%',User_Role_Name_ ,'%');
 SELECT second.User_Role_Id,second.User_Role_Name,second.Role_Under_Id,
 first.User_Role_Name as Role_Under
 from 
 User_Role  as second 
 inner join User_Role as first
 on first.User_Role_Id=second.Role_Under_Id
 where second.User_Role_Name like User_Role_Name_ 
 and first.Is_Delete=false AND Second.Is_Delete=False
order by User_Role_Name asc ;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_User_Role_Typeahead`( In User_Role_Name_ varchar(100))
Begin 
set User_Role_Name_ = Concat( '%',User_Role_Name_ ,'%');
SELECT
User_Role_Id,User_Role_Name
FROM user_role 
where User_Role_Name LIKE User_Role_Name_ 
and User_Role_Name Not in('Sundry Debtors')
and DeleteStatus=False
order by User_Role_Name asc Limit 5 ;
End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_User_Typeahead`( In User_Details_Name_ varchar(100))
Begin 
set User_Details_Name_ = Concat( '%',User_Details_Name_ ,'%');
SELECT
User_Details_Id,User_Details_Name
FROM User_Details 
where User_Details_Name LIKE User_Details_Name_ 
and User_Details_Name Not in('Sundry Debtors')
and DeleteStatus=False
order by User_Details_Name asc Limit 5 ;
End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_User_Typeahead_ByUser`(In Login_Id_ int,User_Details_Name_ varchar(100))
BEGIN
declare SearchbyName_Value varchar(2000);
declare User_Type_ int;
 set SearchbyName_Value='';
 set User_Type_=(select User_Type from user_details where User_Details_Id=Login_Id_);
 set User_Details_Name_ =  Concat( " and User_Details_Name LIKE '%",User_Details_Name_,"%' ") ;
if User_Type_=2 then
 	SET SearchbyName_Value =concat(SearchbyName_Value," and User_Details_Id =",Login_Id_);
else
    SET SearchbyName_Value =concat(SearchbyName_Value," and User_Details_Id in (select User_Details_Id from user_details where Branch_Id in (select
	distinct Branch_Id from user_department where User_Id =",Login_Id_," and VIew_All=1))");
end if;

SET @query = Concat("select User_Details_Id,User_Details_Name  
from 
 user_details 
where DeleteStatus=0  ",User_Details_Name_," ",SearchbyName_Value,"
order by User_Details_Name asc Limit 5 ");
PREPARE QUERY FROM @query;
#select @query;
insert into data_log_ values(0,@query,'');

EXECUTE QUERY;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Work_History`(In RoleId_ varchar(100)
,Department_String varchar(1000),Fromdate_ date,
 Todate_ date,Login_User_Id_ int,
 Is_Date_Check_ tinyint,Branch_ int 
 )
BEGIN
#select 1;

declare Search_Date_ varchar(500);declare SearchbyName_Value varchar(2000);declare User_Type_ int;
set Search_Date_=''; set SearchbyName_Value='';
set User_Type_=(select User_Type from user_details where User_Details_Id=Login_User_Id_);
if Is_Date_Check_=true then
set Search_Date_=concat( SearchbyName_Value," and date(student_followup.Entry_Date) >= '", Fromdate_ ,"' and  date(student_followup.Entry_Date) <= '", Todate_,"'");
ELSE
set Search_Date_= "and 1 =1 ";
end if;
 if Branch_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and student_followup.Branch =",Branch_);
end if;
if User_Type_=2 then
 	SET SearchbyName_Value =concat(SearchbyName_Value," and student_followup.By_User_Id =",Login_User_Id_);
    else
    SET SearchbyName_Value =concat(SearchbyName_Value," and student_followup.By_User_Id in (select User_Details_Id from user_details where Branch_Id in (select
distinct Branch_Id from user_department where User_Id =",Login_User_Id_," and VIew_All=1))");
end if;
SET @query =concat ( "select count(Student_FollowUp_Id) as Data_Count,remarks.Remarks_Name as Remarks_Name,User_Details_Name
from student_followup
	inner join user_details on  user_details.User_Details_Id=student_followup.By_User_Id
    inner join Branch on Branch.Branch_Id= student_followup.Branch
    inner join Department on Department.Department_Id= student_followup.Department  ",Department_String,"
	left join remarks on remarks.Remarks_Id=student_followup.Remark_Id
	where student_followup.DeleteStatus=0   ",Search_Date_,SearchbyName_Value,"
	group by User_Details_Name,student_followup.Remark_Id
");


PREPARE QUERY FROM @query;
#select @query;
insert into data_log_ values(0,@query,'');
EXECUTE QUERY;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Work_report`(In RoleId_ varchar(100),Fromdate_ date,Todate_ date,Search_By_ int,
SearchbyName_ varchar(50),Department_ int,Branch_ int,By_User_ int,Is_Date_Check_ Tinyint,
Page_Index1_ int,Page_Index2_ int,Login_User_Id_ int,RowCount int ,RowCount2 int)
BEGIN
declare SearchbyName_Value varchar(2000);declare UnionQuery varchar(4000);declare Search_Date_ varchar(500);
declare Search_Date_union varchar(500);declare pos1frm int;declare pos1to int;declare pos2frm int;
declare pos2to int; declare PageSize int;declare User_Type_ int;
 set pos1frm=0;    set pos1to=0;    set pos2frm=0;    set pos2to=0;    set PageSize=10;
 set SearchbyName_Value='';
 set Search_Date_='';
 set User_Type_=(select User_Type from user_details where User_Details_Id=Login_User_Id_);
if(SearchbyName_ !='0') then
if Search_By_=1 then
SET SearchbyName_Value =   Concat( SearchbyName_Value," and student.Student_Name like '%",SearchbyName_ ,"%' ") ;
end if;
end if;
if Department_>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and student.Department =",Department_);
end if;
if Branch_>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and t.Branch_Id =",Branch_);
end if;
if By_User_>0 then
SET SearchbyName_Value =concat(SearchbyName_Value," and Student_followup.By_User_Id =",By_User_);
end if;
if User_Type_=2 then
 	SET SearchbyName_Value =concat(SearchbyName_Value," and student_followup.By_User_Id =",Login_User_Id_);
    else
    SET SearchbyName_Value =concat(SearchbyName_Value," and student_followup.By_User_Id in (select User_Details_Id from user_details where Branch_Id in (select
distinct Branch_Id from user_department where User_Id =",Login_User_Id_," and VIew_All=1))");
end if;
if Is_Date_Check_=true then
set Search_Date_=concat( SearchbyName_Value," and date(Student_followup.Entry_Date) >= '", Fromdate_ ,"' and  date(Student_followup.Entry_Date) <= '", Todate_,"'");
set Search_Date_union=concat( SearchbyName_Value," and  student.Entry_Date < '", Fromdate_,"'");
ELSE
set Search_Date_= "and 1 =1 ";
end if;
set UnionQuery="";
SET @query = Concat( "select student.Student_Id,
student.Student_Name,student.Phone_Number,Student_followup.Remark,(Date_Format(Student_followup.Next_FollowUp_Date,'%d-%m-%Y ')) As Next_FollowUp_Date,(Date_Format(Student_followup.Entry_Date,'%d-%m-%Y   %h:%i')) As Entry_Date,
Department.Department_Name,Department.FollowUp,Department_Status.Department_Status_Name,T.User_Details_Name,Branch.Branch_Name,Touser.User_Details_Name as Touser,(Date_Format(Student_followup.Entry_Date, '%h:%i')) As Time
from student
	inner join student_followup on Student.Student_Id=Student_followup.Student_Id
	inner join Department on Department.Department_Id= Student_followup.Department
	inner join Department_Status on Department_Status.Department_Status_Id=Student_followup.Status
	inner join user_details as T on T.User_Details_Id=Student_followup.By_User_Id
    inner join Branch on Branch.Branch_Id= t.Branch_Id
    inner join  user_details as Touser on Touser.User_Details_Id =student.User_Id
	where student.DeleteStatus=0 and student_followup.Entry_Type =1 ",SearchbyName_Value," ",Search_Date_,"
	order by Student_followup.By_User_Id  ");

PREPARE QUERY FROM @query;
#select @query;
insert into data_log_ values(0,@query,'');
EXECUTE QUERY;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Search_Work_Summary`(In RoleId_ varchar(100),Fromdate_ date,Todate_ date,By_User_ int,Login_User_Id_ int,look_In_Date_Value tinyint,Branch_ int)
BEGIN
declare SearchbyName_Value varchar(2000);declare UnionQuery varchar(4000);declare Search_Date_ varchar(500);
declare Search_Date_union varchar(500);declare pos1frm int;declare pos1to int;declare pos2frm int;
declare pos2to int; declare PageSize int;declare User_Type_ int;
 set pos1frm=0;    set pos1to=0;    set pos2frm=0;    set pos2to=0;    set PageSize=10;
 set SearchbyName_Value='';
 set Search_Date_='';
 set User_Type_=(select User_Type from user_details where User_Details_Id=Login_User_Id_);
 if Branch_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and user_details.Branch_Id =",Branch_);
end if;
if User_Type_=2 then
 	SET SearchbyName_Value =concat(SearchbyName_Value," and student_followup.By_User_Id =",Login_User_Id_);
    else
    SET SearchbyName_Value =concat(SearchbyName_Value," and student_followup.By_User_Id in (select User_Details_Id from user_details where Branch_Id in (select
distinct Branch_Id from user_department where User_Id =",Login_User_Id_," and VIew_All=1))");
end if;
 if look_In_Date_Value=true then
	set Search_Date_=concat( SearchbyName_Value," and date(student_followup.Entry_Date) >= '", Fromdate_ ,"' and  date(student_followup.Entry_Date) <= '", Todate_,"'");
else	
set Search_Date_= "and 1 =1 ";
end if;
SET @query = Concat("select count(student_followup.Student_Id) Followup_Count,User_Details_Name,User_Details_Id,T.Branch_Name
from student_followup
	inner join user_details on student_followup.By_User_Id=user_details.User_Details_Id
    inner join branch on Branch.Branch_Id= student_followup.Branch
    inner join branch as T on T.Branch_Id=user_details.Branch_Id
    where student_followup.DeleteStatus=0 and Entry_Type =1 ",Search_Date_," ",SearchbyName_Value,"
    group by student_followup.By_User_Id
   order by User_Id , Branch ");
PREPARE QUERY FROM @query;
#select @query;
insert into data_log_ values(0,@query,'');

EXECUTE QUERY;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Student_Login_Check`(in Email_ varchar(100),in Password_ VARCHAR(50))
BEGIN
SELECT Student_Id,Student_Name
From student 
 where 
 Email =Email_ and Password=Password_;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Student_Registration_Summary`(In RoleId_ varchar(100),Fromdate_ date,Todate_ date,  Branch_  int,Is_Date_Check_ Tinyint,Login_User_Id_ int)
BEGIN
declare Search_Date_ varchar(500);
declare SearchbyName_Value varchar(2000);declare User_Type_ int;
set SearchbyName_Value='';
set Search_Date_='';
set User_Type_=(select User_Type from user_details where User_Details_Id=Login_User_Id_);
#set Search_Date_=concat( " and date(student.Next_FollowUp_Date) < '", Date_Format( Now(),'%Y-%m-%d'),"'" );
if Is_Date_Check_=true then
	set Search_Date_=concat(SearchbyName_Value, " and date(student.Registered_On) >= '", Fromdate_ ,"' and  date(student.Registered_On) <= '", Todate_,"'");
ELSE
	set Search_Date_= "and 1 =1 ";
end if;
if User_Type_=2 then
 	SET SearchbyName_Value =concat(SearchbyName_Value," and student.Registered_By =",Login_User_Id_);
    else
    SET SearchbyName_Value =concat(SearchbyName_Value," and student.Registered_By in (select User_Details_Id from user_details where Branch_Id in (select
distinct Branch_Id from user_department where User_Id =",Login_User_Id_," and VIew_All=1))");
end if;
if Branch_>0 then
	SET SearchbyName_Value =concat(SearchbyName_Value," and student.Registration_Branch =",Branch_);
end if;

SET @query = Concat( "select count(student.Student_Id) as Registration_Count, User_Details_Name,User_Details_Id,Branch_Name
from student
inner join user_details on user_details.User_Details_Id=student.Registered_By
inner join Branch  on Branch.Branch_Id= student.Registration_Branch
where student.DeleteStatus=0 and student.Is_Registered=1 ",Search_Date_," ",SearchbyName_Value,"
group by student.Registered_By order by Branch,User_Id");

PREPARE QUERY FROM @query;
#select @query;
#insert into data_log_ values(0,@query,'');

EXECUTE QUERY;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Subject_Typeahead`( In Subject_Name_ varchar(100))
Begin
 set Subject_Name_ = Concat( '%',Subject_Name_ ,'%');
select  Subject.Subject_Id,Subject_Name
From Subject
where Subject_Name like Subject_Name_  and Subject.DeleteStatus=false
order by Subject_Name asc  limit 5  ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Sub_Section_Typeahead`( In Sub_Section_Name_ varchar(100))
Begin
 set Sub_Section_Name_ = Concat( '%',Sub_Section_Name_ ,'%');
select  Sub_Section.Sub_Section_Id,Sub_Section_Name
From Sub_Section
where Sub_Section_Name like Sub_Section_Name_  and Sub_Section.DeleteStatus=false
order by Sub_Section_Name asc  limit 5  ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `University_Typeahead`( In University_Name_ varchar(100))
Begin
 set University_Name_ = Concat( '%',University_Name_ ,'%');
select  University.University_Id,University_Name
From University
where University_Name like University_Name_  and University.DeleteStatus=false
order by University_Name asc  limit 5  ;
 End$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Update_Student`( In Student_Id_ int,Agent_Id_ int,Student_Name_ varchar(50),
Last_Name_ varchar(50),Address1_ varchar(50),Address2_ varchar(50),
Pincode_ varchar(7),Email_ varchar(100),Phone_Number_ varchar(25),
Promotional_Code_ varchar(50),Student_Status_Id_ int,Password_ varchar(20))
Begin 
 if  Student_Id_>0
 THEN 
 UPDATE Student set Student_Name = Student_Name_ ,Last_Name = Last_Name_ ,Agent_Id=Agent_Id_,
Address1 = Address1_ ,Address2 = Address2_ ,Pincode = Pincode_ ,Email = Email_ ,
Phone_Number = Phone_Number_ ,Promotional_Code = Promotional_Code_ ,
Student_Status_Id = Student_Status_Id_ ,Password = Password_  
Where Student_Id=Student_Id_ ;
ELSE 
 SET Student_Id_ = (SELECT  COALESCE( MAX(Student_Id ),0)+1 FROM student); 
  INSERT INTO Student(Student_Id , Agent_Id, Entry_Date,Student_Name ,Last_Name ,Gender ,  Address1 ,
  Address2 ,Pincode ,Email ,Phone_Number ,Dob ,Country ,Promotional_Code ,Student_Status_Id ,Password,DeleteStatus ) 
  values (Student_Id_ ,Agent_Id_,now(),Student_Name_ ,Last_Name_ ,0 ,Address1_ ,
Address2_ ,Pincode_ ,Email_ ,Phone_Number_ ,now() ,0 ,Promotional_Code_ ,1 ,
Password_,false );
End If ;
select Student_Id_;
END$$
DELIMITER ;
